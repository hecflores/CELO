import React from 'react';
import $ from 'jquery';
import APIComponent from '../../Containers/APIComponent.jsx';
import DataInput from '../../Containers/DataInput.jsx';
import CoursesAPI from "../../../libaries/APIs/CoursesAPI.jsx";
import {ButtonGroup,Button} from 'react-bootstrap';
import Loader from '../../Containers/Loader.jsx';

import QuestionTypes from '../../QuestionTypes/*.jsx';
import QuestionAPI from '../../../libaries/APIs/QuestionsAPI.jsx';

class AnswerableQuestion extends React.Component
{
    state={
        AnswerableQuestion:false
    };
    constructor(props) {
        super(props);
        this.Important=function(){
            return {Question:this.props.AnswerableQuestion,Index:this.props.Index};
        }.bind(this);

        this.apiHook=QuestionAPI.instance.hook()
            .on("get-answerable-question",function(data){
                if(data.data.AnswerableID!=this.state.AnswerableQuestion.AnswerableID){
                    return;
                }
                this.setState({
                    AnswerableQuestion:data.data
                });
        }.bind(this))
            .on("answer-question",function(data){
                if(data.data.AnswerableID!=this.props.AnswerableQuestion.AnswerableID){
                    return;
                }
                this.props.onAnswered(data.data.ChoseAnswer);
            }.bind(this));

    }
    componentWillReceiveProps(){
    }
    componentWillUnmount(){
        this.apiHook.close();
    }
    componentDidMount(){
        this.apiHook.open();
    }
    answerTheQuestion(answer){
        QuestionAPI.instance.initiate("answer-question",{html:"<div>Not Implmented Yet</div>",AnswerableID:this.props.AnswerableQuestion.AnswerableID,answer:answer});

    }
    render(){
        let Question=this.state.AnswerableQuestion || this.props.AnswerableQuestion;


        for(let key in QuestionTypes){
            if(!QuestionTypes.hasOwnProperty(key)){
                continue;
            }
            if(this.props.AnswerableQuestion.Question.QuestionTypeID==QuestionTypes[key].default.DatabaseId){
                let QuestionTypeFound=QuestionTypes[key]["default"];
                return <QuestionTypeFound Answer={Question.ChosenAnswer} onAnswered={this.answerTheQuestion.bind(this)} Parameters={Question.Question.JSONParameters}/>
            }
        }
        return <h1>Unkown Question Type</h1>;

    }
}
AnswerableQuestion.propTypes=
{
    onLoadStarted:React.PropTypes.func,
    onLoadFinished:React.PropTypes.func,
    onIsLocked:React.PropTypes.func,
    onIsUnAnswered:React.PropTypes.func,
    onAnswered:React.PropTypes.func,
    AnswerableQuestion:React.PropTypes.object.isRequired,
    Index:React.PropTypes.number.isRequired
};
AnswerableQuestion.defaultProps={
    onAnswered:function(answer){

    },
    onLoadStarted:function(answer){

    },
    onLoadFinished:function(answer){

    },
    onIsLocked:function(answer){

    },
    onIsUnAnswered:function(answer){

    },
};

export default AnswerableQuestion