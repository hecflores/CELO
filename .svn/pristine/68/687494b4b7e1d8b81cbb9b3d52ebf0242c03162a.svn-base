<?php
namespace Questions\Controller;
use Application\Info;
use Application\QuestionManager;
use Application\QuestionTypeManager;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;

/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 2/27/2017
 * Time: 5:40 AM
 */
class QuestionsController  extends AbstractActionController
{
    public function onDispatch(MvcEvent $e)
    {

        /*******************************************************************/
        /* User Check                                                      */
        /*******************************************************************/
        Info::LoginService()->Authorize(array("Administrator","Instructor","TA"));

        /*******************************************************************/
        $json=$e->getRouteMatch()->getParam("json");
        if(isset($json)){
            $e->getViewModel()->setTemplate("application/layout/empty");
        }


        $navigation=new ViewModel();
        $navigation->setTemplate("instructor/layout/navigation");


        /*******************************************************************/
        $e->getViewModel()->addChild($navigation,"navigation");

        //e->getViewModel()->setTemplate("visitors/layout");
        $parent=parent::onDispatch($e); // TODO: Change the autogenerated stub


        /*******************************************************************/




        /*******************************************************************/
        return $parent;
    }

    /***********************************************************************/
    /* Tools                                                               */
    /***********************************************************************/
    public function JsonView($object)
    {
        $view =new ViewModel();
        $view->setTemplate("application/tools/json");

        Info::getEvent()->getViewModel()->setTemplate("layout/empty");

        $view->setVariable("object",$object);
        return $view;
    }
    public function getQuestion(){
        $questionID=$this->params()->fromRoute("questionId");
        if(!isset($questionID)){
            QuestionManager::ExitWithError("Question ID was not found in the Route");
            return;
        }
        $returnedQuestion=new QuestionManager($questionID);
        if($questionID!=$returnedQuestion->getQuestion()->getQuestionID()){
            $this->redirect()->toRoute("questions/questionsIndividuals/editor",array("questionId" => $returnedQuestion->getQuestionType()->getQuestionTypeID()));

            return;
        }
        return $returnedQuestion;
    }

    /**
     * @return QuestionTypeManager
     */
    public function getQuestionType(){
        $questionID=$this->params()->fromRoute("questionTypeId");
        if(!isset($questionID)){
            QuestionTypeManager::ExitWithError("Question ID was not found in the Route");
            return;
        }
        $returnedQuestion=new QuestionTypeManager($questionID);
        if($questionID!=$returnedQuestion->getQuestionType()->getQuestionTypeID()){
            $this->redirect()->toRoute("questionsHome/questionTypes/questionTypeEditor",array("questionTypeId" => $returnedQuestion->getQuestionType()->getQuestionTypeID()));

            return;
        }
        return $returnedQuestion;
    }

    /***********************************************************************/
    /* Public Top Level Operations                                         */
    /***********************************************************************/
    public function indexAction(){
        $view =new ViewModel();
        $view->setTemplate("/questions/edit/question/index");
        $view->setVariable("questions",Info::QuestionsTable()->get());

        return $view;
    }

    public function detailsAction(){
        $view =new ViewModel();
        $view->setTemplate("/questions/edit/question/details");
        $view->addChild($this->runAction(),'viewable');
        $view->setVariable("question",$this->getQuestion());

        return $view;
    }

    public function createAction(){
        $view =new ViewModel();
        $question=QuestionManager::Create($this->getQuestionType()->getQuestionType()->getQuestionTypeID());

        $this->redirect()->toRoute("questions/questionsInd/questionsInd_editor",
            array(
                "questionId"=>$question->getQuestion()->getQuestionID()
            ));



        return $view;
    }


    /***********************************************************************/
    /***********************************************************************/
    /***********************************************************************/
    public function loadAction(){

        $question=$this->getQuestion();
        $mergedArray=$question->Config()->Json();
        $mergedArray=array_merge($mergedArray,array("answer"=>$question->getAnswer()));
        return $this->JsonView($mergedArray);


    }
    public function loadViewAction(){

        $question=$this->getQuestion();
        return $this->JsonView($question->getParameters());


    }
    /***********************************************************************/
    /***********************************************************************/
    /***********************************************************************/



    /***********************************************************************/
    /* Questions that are editable                                         */
    /***********************************************************************/
    public function saveAction(){

        $question=$this->getQuestion();
        $content=Info::getBodyJSON();

        if(isset($content["parameters"])){
            $question->setParameters($content["parameters"]);
        }
        if(isset($content["answer"])){
            $question->setAnswer($content["answer"]);
        }

        return $this->JsonView($question->getParameters());

    }
    public function editorAction(){
        $view =new ViewModel();
        $view->setTemplate("questions/edit/question/editor");
        $view->setVariable("question",$this->getQuestion());


        return $view;
    }

    /***********************************************************************/
    /* Questions that are runnable                                         */
    /***********************************************************************/
    public function testAction()
    {
        $content=Info::getBodyJSON();
        if(!isset($content["answer"])){
            return $this->JsonView(array("success" => false, "message" => "No Answer Found"));
        }

        $question=$this->getQuestion();
        if($question->getAnswer()!=$content["answer"]){
            return $this->JsonView(array("success" => false, "message" => "Incorrect answer"));
        }

        return $this->JsonView(array("success" => true));

    }
    public function runAction(){
        $view =new ViewModel();
        $view->setTemplate("questions/edit/question/view");
        $view->setVariable("question",$this->getQuestion());


        return $view;
    }

}