<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/27/2017
 * Time: 10:28 PM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\CourseContent;
use Application\Service\APIHelper;
use Application\Service\FileUploader;
use Exception;
use Zend\Db\Adapter\Adapter;

class CourseContentMeatEater
{

    public static function FindAvailableFileName($extension){
        $folder="data/Files";
        $files = glob($folder . "*.$extension");
        $index=count($files);
        while(file_exists("$folder/File$index.$extension")){
            $index++;
        }
        return "$folder/File$index.$extension";
    }
    public static function FindFiles_Copy_Update($data){

        if(isset($data["name"]) &&
            isset($data["type"]) &&
            isset($data["tmp_name"]) &&
            isset($data["error"]) &&
            isset($data["size"]))
        {
            $FileID=FileUploader::UploadFile($data);


            return array(
                "link"=>"/files/$FileID",
                "download"=>"/files/$FileID/download"
            );

        }

        $newData=array();
        foreach($data as $key => $value){
            if(!is_array($value)){
                $newData[$key]=$value;
                continue;
            }
            $newData[$key]=self::FindFiles_Copy_Update($value);
        }
        return $newData;
    }
    public static function ConvertJsonToStringJsonFirstPass($data){

        $newData=array();
        foreach($data as $key => $value){

            /***************************************************************/
            if(!is_array($value)){
                $newData[$key]=$value;
                continue;
            }
            /***************************************************************/
            if($key==='UUID'){

                foreach($data["UUID"] as $key2 => $value2){
                    $newData[$key2]=uniqid();
                }
                continue;
            }
            $newData[$key]=self::ConvertJsonToStringJsonFirstPass($value);
        }
        return $newData;
    }
    public static function ConvertJsonToStringJsonSecondPass($data){

        $newData=array();
        foreach($data as $key => $value){

            /***************************************************************/
            if(!is_array($value)){
                $newData[$key]=$value;
                continue;
            }

            /***************************************************************/
            if($key=='Json'){
                foreach($data["Json"] as $key2 => $value2){
                    $newData[$key2]=json_encode($value2);
                }
                continue;
            }
            $newData[$key]=self::ConvertJsonToStringJsonSecondPass($value);
        }
        return $newData;
    }

    public static function BasicTextReplacing($data, $search, $replace, &$bool){

        $newData=array();
        foreach($data as $key => $value){

            /***************************************************************/
            if(!is_array($value)){
                $newData[$key]=$value;
                $replaced=preg_replace($search,$replace,$newData[$key]);
                if($replaced!=$newData[$key]){
                    $bool=true;
                }
                $newData[$key]=$replaced;
                continue;
            }


            $newData[$key]=self::BasicTextReplacing($value,$search,$replace,$bool);
        }
        return $newData;
    }
    /***********************************************************************/
    public static function CreateNewCourseContent($parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
            "Name",
            "Description",
            "ParentFolderID",
            "Type"
        ),$output)){
            return false;
        }
        $parameters["CreatedBy"]=Info::getCurrentUser()->getUserID();

        /***************************************************************/
        /* Get the Root Content Id. Will Be Really Useful for finding  */
        /* the Beadcrums                                               */
        /***************************************************************/
        if(!CourseContentMeatEater::GetCourseContent($parameters["ParentFolderID"],array(),$temp)){
            $temp["errors"][]="Unable to get the parent folder";
            return false;
        }
        $parameters["SectionID"]=$temp["results"]["SectionID"];
        $parameters["ParentFolderID"]=$temp["results"]["CourseContentNumber"];
        $parameters["RootContentID"]=$temp["results"]["RootContentID"];
        $parameters["Depth"]=intval($temp["results"]["Depth"])+1;

        /***************************************************************/
        /* Change Data Insert Into The Database                        */
        /***************************************************************/
        $data=$parameters;
        $data=self::FindFiles_Copy_Update($data);
        $data=self::ConvertJsonToStringJsonFirstPass($data);
        $data=self::ConvertJsonToStringJsonSecondPass($data);


        /***************************************************************/
        /* Insert Into Database                                        */
        /***************************************************************/
        $id=Info::CourseContentTable()->Insert($data);

        /***************************************************************/
        /* If some Attributes Depended on the ID of the item, then fix */
        /* and Update                                                  */
        /***************************************************************/
        $didSomethingChange=false;
        $data=self::BasicTextReplacing($data, '/__ID__/',"".$id,$didSomethingChange);
        if($didSomethingChange){
            Info::CourseContentTable()->Update($id,$data);
        }

        /***************************************************************/
        $courseContent=Info::CourseContentTable()->getByID($id);

        /***************************************************************/
        /* Needed Setups                                               */
        /***************************************************************/
        $courseContentSetups=array(
            "assessment"=>function($data,$courseContent,$contentId,&$output){
                $courseContent=$courseContent->getData();
                AssessmentsMeatEater::CreateNewAssessment(array(
                    'CourseContentID'=>$contentId,
                    "Name"=>$courseContent["Name"],
                    "Type"=>"Normal Assessment",
                    "Properties"=>json_encode($courseContent["Properties"],JSON_FORCE_OBJECT),
                    "Description"=>$courseContent["Description"]
                ),$output);
                return true;
            },
            "magic-points"=>function($data,$courseContent,$contentId,&$output){
                $properties=$courseContent->getProperties();
                $rows=intval($properties["GridSize"]["Rows"]);
                $columns=intval($properties["GridSize"]["Columns"]);

                /************************************************************/
                /* Create the gradable item                                 */
                /************************************************************/
                if(!AnswerableQuestionsMeatEater::CreateGradableItem(array(
                    "CourseContentID"=>$contentId,
                    "Description"=>"magic-points: {$courseContent->getDescription()}"),$output)){
                    $output["errors"][]="Unable to create a gradable item";
                    return false;
                }
                $gradableGroup=$output["results"];

                $questions=array();
                for($row=0;$row<$rows;$row++) {
                    for ($column = 0; $column < $columns; $column++) {
                        $cell = $properties["Grid"][$row][$column];
                        if (isset($cell["QuestionID"])) {
                            if(!isset($questions[$cell["QuestionID"]])){
                                $questions[$cell["QuestionID"]]=true;
                            }
                        }
                    }
                }

                /***********************************************************/
                /* For Later Use                                           */
                /***********************************************************/
                $properties["AnswerGroup"]=array(
                    "AnswerGroupID"=>$gradableGroup["AnswerableGroupID"]
                );

                $answers=APIHelper::QuickFetch(
                    "Questions",
                    array(
                        "key"=>"QuestionID",
                        "filters"=>array(
                            "QuestionID"=>array(
                                "type"=>"IN",
                                "value"=>array_keys($questions))
                        )
                    ),
                    array("QuestionID"=>true),
                    function($item){
                        return $item["ExpectedAnswer"];
                    })["results"];

                for($row=0;$row<$rows;$row++){
                    for($column=0;$column<$columns;$column++)
                    {
                        $cell=$properties["Grid"][$row][$column];
                        if(isset($cell["QuestionID"]))
                        {
                            $answer=$answers[$cell["QuestionID"]][0];
                            /***********************************************/
                            if(!AnswerableQuestionsMeatEater::AddQuestionToGradableItem
                            (
                                array(
                                    "CorrectAnswer"=>$answer,
                                    "PointsWorth"=>$cell["Weight"],
                                    "Attempts"=>0,
                                    "AllowedAttempts"=>2,
                                    "AnswerableGroupID"=>$gradableGroup["AnswerableGroupID"],
                                    "QuestionID"=>$cell["QuestionID"]
                                ),
                                $output
                            )){
                                $output["errors"][]="Cell($row,$column) was was failed to be added as a gradable item for some reason";
                                continue;
                            }

                            /***********************************************/
                            $answeredInformation=$output["results"][0];

                            /***********************************************/
                            $properties["Grid"][$row][$column]["AnswerableID"]=$answeredInformation['AnswerableID'];

                        }
                    }
                }
                $properties=json_encode($properties,JSON_FORCE_OBJECT);

                Info::CourseContentTable()->Update($courseContent->getContentID(),array("Properties"=>$properties));
                return true;
            }
        );

        /***************************************************************/
        if(isset($courseContentSetups[$data["Type"]]))
        {
            if(!$courseContentSetups[$data["Type"]]($data,$courseContent,$id,$output)){
                $output["errors"][]="Unable to setup the content";
                return false;
            }
        }

        /***************************************************************/
        return self::GetCourseContent($id,array(),$output);
    }


    public static function UpdateCourseContent($id, $parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        $parametersAllowed=array(
            "Name"=>true,
            "Description"=>true,
            /* "ParentFolderID"=>true, */ //TODO Too Complicated to allow  Right now
            /* "Type"=>true, */           //TODO Too Complicated to allow Right now.
            "Properties"=>true,
            /* "Gradable"=>true, */       //TODO Unkown right now
            "RolesVisible"=>true
        );

        /*******************************************************************/
        $newParameters=array_intersect_key($parameters,$parametersAllowed);

        /*******************************************************************/
        /* Fix issue of replacing Properties with small changes            */
        /*******************************************************************/
        if(isset($newParameters["Properties"])){
            if(!self::GetCourseContent($id,array(),$temp)){ // final-fix Change to a Simple Table Fetch
                $output["errors"][]="Unable to find the corresponding Course Content ($id)";
                return false;
            }
            $oldCourseContent=$temp["results"];
            $oldProperties=$oldCourseContent["Properties"]==null?array():$oldCourseContent["Properties"];
            $newProperties=json_decode($newParameters["Properties"],true);
            $newProperties=array_merge($oldProperties,$newProperties);

            $newParameters["Properties"]=json_encode($newProperties,JSON_FORCE_OBJECT);

        }

        /*******************************************************************/
        if(count($newParameters)!=count($parameters)){
            $diff=array_diff_key($newParameters,$parameters);
            $diff=array_keys($diff);
            $diff=implode(",",$diff);
            $output["errors"][]="Columns not allowed to be updated. ($diff)";
            return false;
        }

        $extras=array(
            "assessment"=>function(&$data,$id){

                /***********************************************************/
                if(!AssessmentsMeatEater::getAssessmentFromCourseContent($id,$output)){ //final-fix Move insid of the if statment below
                    $output["errors"][]="Unable to find the assessment for the course content";
                }
                $assessment=$output["results"]["Assessment"];

                /***********************************************************/
                if(!isset($data["Assessment"])){
                    throw new \Exception("Unexpected Situation with Assessment");
                }

                /***********************************************************/
                $newAssessment=$data["Assessment"];
                $newAssessmentToUpdate=array_intersect_key($newAssessment,array(
                                    "AssessmentID"=>true,
                                    "Name"=>true,
                                    "URL"=>true,
                                    "Description"=>true,
                                    "Type"=>true,
                                    "Properties"=>true,
                                    "AssociatedCourseContentID"=>true,
                                    "AnswerableGroupID"=>true,
                                    "CreatedBy"=>true,
                                    "Timelimit"=>true,
                                ));

                /***********************************************************/
                if(isset($newAssessment["AssessmentID"])) {
                    if ($newAssessment["AssessmentID"] != $assessment["AssessmentID"]) {
                        throw new Exception("Not implemented yet... Delete old assessment that was once attached to course content");
                        //TODO Implment this feature
                    }
                }

                /***********************************************************/
                if(count($newAssessmentToUpdate)>0){
                    if(!Info::PerformUpdate("Assessments",array("AssessmentID"=>$assessment["AssessmentID"]),$newAssessmentToUpdate)){
                        throw new Exception("Unable to update the assessments table");
                    }
                }

                /***********************************************************/
                $oldQuestions=$assessment["questions"]=APIHelper::setNewKey(
                    $assessment["questions"],
                    "QuestionID",
                    true
                );

                /***********************************************************/
                if(isset($newAssessment["questions"])) {
                    $newQuestions = $newAssessment["questions"] = APIHelper::setNewKey(
                        $newAssessment["questions"],
                        "QuestionID",
                        true
                    );

                    /***********************************************************/
                    $intersection = array_intersect_key($oldQuestions, $newQuestions);
                    $difference = $newQuestions;
                    foreach ($intersection as $key => $value) {
                        unset($difference[$key]);
                    }

                    //final-fix need a better way to add them. This
                    foreach ($difference as $questionID => $question) {
                        AssessmentsMeatEater::AddQuestion(array("QuestionID" => $questionID, "AssessmentID" => $assessment["AssessmentID"]), $temp);
                    }
                }

                /***********************************************************/

                return true;
            },
            "magic-points"=>function(&$data){

                return true;

            }
        );


        if(!CourseContentMeatEater::GetCourseContent($id,array(),$temp)){
            $output["errors"][]="Unable to find course content {$newParameters["ContentID"]} for updating";
            return false;
        }

        /*******************************************************************/
        $courseContent=$temp["results"];
        if(isset($extras[$courseContent["Type"]])){
            $extras[$courseContent["Type"]]($newProperties,$id);
        }

        /*******************************************************************/
        Info::PerformUpdate(
            "CourseContent",
            array("ContentID"=>$id),
            $newParameters
        );

        /*******************************************************************/
        $output["results"]=array("success"=>true);
        return true;
    }
    /**
     * @param $id
     * @param $parameters
     * @param $output
     * @return bool
     * @throws \Exception
     */
    public static function DeleteCourseContent($id, $parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        if(!self::GetCourseContents(array("ContentID"=>$id),$output)){
            $output["errors"][]="Failed at getting the course content";
            return false;
        }

        /*******************************************************************/
        $courseContent=$output["results"];

        /** @var $adapter Adapter*/
        $adapter=Info::get('Zend\Db\Adapter\Adapter');
        $query=$adapter->query("DELETE FROM C1 USING CourseContent AS C1 JOIN CourseContentChildren AS C2 ON C1.ContentID=C2.ContentID OR C1.ContentID=C2.ChildContentID ".
                                "WHERE C1.ContentID = $id");
        $statement=$adapter->createStatement($query);

        if(!$statement->isPrepared()){
            $output["errors"][]=$query->getSql()."\nFailed...";
            return false;
        }

        /*******************************************************************/
        /* Delete Operation                                                */
        /*******************************************************************/
        $statement->execute();// Delete



    }

    public static function GetCourseContentFromAssessment($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("AssessmentID"),$output)){
            return false;
        }

        /*******************************************************************/
        $data=Info::PerformGet("Assessments",$parameters,null,function($data){
            return $data["AssociatedCourseContentID"];
        });

        /*******************************************************************/
        if(count($data)!=1){
            $output["errors"][]="Issue with getting the assessment {$parameters["AssessmentID"]}";
            return false;
        }

        /*******************************************************************/
        $courseContentID=$data[0];

        return self::GetCourseContent($courseContentID,array(),$output);



    }

    /**
     * @param $id
     * @param $parameters
     * @param $output
     * @return bool
     */
    public static function GetCourseContent($id, $parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        if(!self::GetCourseContents(array("ContentID"=>$id),$output)){
            $output["errors"][]="Failed at getting the course content";
            return false;
        }

        /*******************************************************************/
        $courseContent=$output["results"];
        if(count($courseContent)==0){
            $output["errors"][]="Course Content With ID $id does not exists";
            return false;
        }

        $extras=array(
            "assessment"=>function(&$data){
                if(!AssessmentsMeatEater::getAssessmentFromCourseContent($data["ContentID"],$output)){
                    $output["errors"][]="Unable to find the assessment for the course content";
                }

                $assessment=$output["results"]["Assessment"];
                $submittedAssessments=Info::AssessmentTable()->getFinishedAssessments();
                $runningAssessment=Info::AssessmentTable()->getRunningInstance($assessment["AssessmentID"],Info::getCurrentUser()->getUserID());

                if($runningAssessment!=null){
                    if(!RunningAssessmentsMeatEater::getAssessment($runningAssessment->getAnsweredID(),array(),$temp)){
                        throw new Exception("Unkown error(2)");
                    }
                    $data["Properties"]["RunningAssessment"]=$temp["results"]["ActiveAssessment"];
                }
                else if(isset($data["Properties"]["RunningAssessment"])){
                    unset($data["Properties"]["RunningAssessment"]);
                }

                $data["Properties"]["Assessment"]=$assessment;
                $data["Properties"]["SubmittedAssessments"]=$submittedAssessments;
                return true;
            },
            "magic-points"=>function(&$data){

                $properties=$data["Properties"];
                $rows=intval($properties["GridSize"]["Rows"]);
                $columns=intval($properties["GridSize"]["Columns"]);

                $answerQuestionsGroupID=$properties["AnswerGroup"]["AnswerGroupID"];

                /************************************************************/
                /* Get the Answer's Associated with the grid                */
                /************************************************************/


                /************************************************************/
                /* Fetch For the Answers                                    */
                /************************************************************/
                $answers=array();
                if(!AnswerableQuestionsMeatEater::GetGradableItem($answerQuestionsGroupID,array("UserID"=>Info::getCurrentUser()->getUserID()),$output)){
                    $output["errors"][]="Failed to get the answered questions for the Magic Points";
                    return false;
                }
                $answers=$output["results"];

                $answers=APIHelper::setNewKey($answers["Questions"],"AnswerableID",true);




                /************************************************************/
                /* Save the Answers Into the Magic Group                    */
                /************************************************************/
                for($row=0;$row<$rows;$row++)
                {
                    for ($column = 0; $column < $columns; $column++)
                    {
                        $cell=$properties["Grid"][$row][$column];
                        if(isset($cell["AnswerableID"]))
                        {
                            $answer=$answers[$cell["AnswerableID"]][0];
                            $answer["AnswerableID"]=$cell["AnswerableID"];
                            $properties["Grid"][$row][$column]["AnsweredInfo"]=$answer;
                        }
                    }
                }

                $data["Properties"]=$properties;
                return true;

            }
        );

        /*******************************************************************/
        $courseContent=$courseContent[0];

        if(isset($extras[$courseContent["Type"]])){
            $extras[$courseContent["Type"]]($courseContent);
        }

        /*******************************************************************/
        $output["results"]=$courseContent;
        return true;
    }
    public static function SaveCourseContentAsTemplate($parameters,&$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
            "ContentID"=>true,
            "SectionID"=>true,
            "TemplateName"=>true,
            "TemplateNotes"=>true
        ),$output)){
            return false;
        }


    }
    public static function GetCourseContentsGrading($id,$parameters,&$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
        ),$output)){
            return false;
        }

        $parameters["ContentID"]=$id;
        $parameters["UserID"]=Info::getCurrentUser()->getUserID();
        /*******************************************************************/
        $columns=array(
            "ContentID"=>true,
            "PreviousContentID"=>true,
            "CurrentContentID"=>true,
            "ChildContentID"=>true,
            "SectionID"=>true,
            "Name"=>true,
            "URL"=>true,
            "Description"=>true,
            "ParentFolderID"=>true,
            "RootContentID"=>true,
            "Depth"=>true,
            "Type"=>true,
            "Properties"=>true,
            "Gradable"=>true,
            "CreatedBy"=>true,
            "RolesVisible"=>true,
            "UserID"=>true,
            "Grade"=>true
        );

        $output["results"]=array(
            "Grades"=>APIHelper::QuickFetch(
            "GradeProgress_CourseContentTree",
            $parameters,
            $columns,
            function($item)
            {
                return json_decode(json_encode($item),TRUE);

            })["results"]);
        return true;




    }

    public static function GetCourseContents($parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }


        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "CourseContent",
            $parameters,
            array(
                "ContentID"=>true,
                "SectionID"=>true,
                "Name"=>true,
                "URL"=>true,
                "Description"=>true,
                "ParentFolderID"=>true,
                "RootContentID"=>true,
                "Depth"=>true,
                "Type"=>true,
                "Properties"=>true,
                "Gradable"=>true,
                "CreatedBy"=>true,
                "RolesVisible"=>true,
            ),
            function($item)
            {
                $courseContent=new CourseContent();
                $courseContent->exchangeArray($item);
                return $courseContent->getData();
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;


    }
}