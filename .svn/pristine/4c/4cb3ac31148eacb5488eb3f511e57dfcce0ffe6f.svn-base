<?php
/**
 * Zend Framework (http://framework.zend.com/)
 *
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2015 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Application\Controller;

use Application\Info;
use Application\Model\Assessment;
use Application\Model\SectionUsersTable;
use Application\Model\Tag;
use Application\Roles;
use Application\Service\LoginService;
use Application\Service\Meat\AnsweredQuestionsMeatEater;
use Application\Service\Meat\AssessmentsMeatEater;
use Application\Service\Meat\RunningAssessmentsMeatEater;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\JsonModel;
use Zend\View\Model\ViewModel;
use Zend\Mvc\MvcEvent;
use Zend\View\View;

class RepositoryController extends AbstractActionController
{
    public function onRender(MvcEvent $e)
    {
        $e->getViewModel()->setTemplate("application/tools/json");
    }

    protected $repositoryDetails=array();

    public function onDispach(MvcEvent $e)
    {
        $e->getTarget()->params()->fromQuery("_id_");

        $repositoryDetails=array(
            "assessments" => array(
                "columns"=>array(
                    "all"=>Assessment::getColumns()
                )

            )
        );

    }
    public function getAllParams(){
        return array(
            "post"=>$this->params()->fromPost(),
            "query"=>$this->params()->fromQuery(),
            "route"=>$this->params()->fromRoute());
    }
    public function indexAction()
    {
        return new JsonModel(array(
            "developer" => "Hector Flores",
            "where_everything_is"=>"true"
        ));
    }

    /***********************************************************************/
    /* Users                                                               */
    /***********************************************************************/
    public function UsersAction()
    {

        $query=$this->params()->fromQuery();

        if(!isset($query["filters"])){
            $query["filters"]=array();
        }
        if(!isset($query["request"])){
            $query["request"]=array();
        }
        $dumb=array(
            "data" =>  Info::UserTable()->search($query["filters"],true),
            "request"=>$query["request"],
            "success" => true
        );

        return new JsonModel($dumb);
    }

    /**
     *
     */
    public function SectionAddUserAction(){
        $id=$this->params()->fromRoute("id");
        $section=Info::SectionTable()->getFromID($id);
        if($this->getRequest()->isPost()){
            $userID=$this->params()->fromPost("UserID");
            $user=Info::UserTable()->getUserById($userID);
            Info::SectionUsersTable()->addUserToSection($user,$section);
        }
        $dumb=array(
            "success" => true
        );

        return new JsonModel($dumb);
    }
    public function UserAction()
    {
        $id=$this->params()->fromRoute("id");

        if($this->getRequest()->isPost()){

        }
        if($this->getRequest()->isGet()){

        }
        if($this->getRequest()->isDelete()){

        }
        if($this->getRequest()->isPatch()){

        }
        $dumb=array(
            "success" => true
        );

        return new JsonModel($dumb);
    }

    /***********************************************************************/
    /* Courses                                                             */
    /***********************************************************************/
    public function CoursesAction()
    {
        $query=$this->params()->fromQuery();

        $query["filters"]=json_decode($query["filters"]);
        var_dump($query);
        return new JsonModel(array(
            "data" =>  Info::CourseTable()->get($query["filters"],true),
            "request"=>$query,
            "success" => true
        ));
    }
    public function CourseAction()
    {

        $id=$this->params()->fromRoute("id");

        if($this->getRequest()->isPost()){

        }
        if($this->getRequest()->isGet()){

        }
        if($this->getRequest()->isDelete()){

        }
        if($this->getRequest()->isPatch()){

        }
        $dumb=array(
            "success" => true
        );

        return new JsonModel($dumb);
    }
    /***********************************************************************/
    /* Sections                                                            */
    /***********************************************************************/
    public function SectionsAction()
    {
        return new JsonModel(array(
            "data" =>  Info::SectionTable()->get($this->params()->fromQuery(),true),
            "request"=>$this->params()->fromQuery(),
            "success" => true
        ));
    }
    public function SectionAction()
    {
        $id=$this->params()->fromRoute("id");

        if($this->getRequest()->isPost()){

        }
        if($this->getRequest()->isGet()){

        }
        if($this->getRequest()->isDelete()){

        }
        if($this->getRequest()->isPatch()){

        }
        $dumb=array(
            "success" => true
        );

        return new JsonModel($dumb);
    }
    /***********************************************************************/
    /* Assessments                                                         */
    /***********************************************************************/
    public function AssessmentsAction()
    {
        $data=array();
        $output=array(
            "data" =>  "Unable able to issue request",
            "request"=>$this->getAllParams(),
            "success" => false
        );

        if($this->getRequest()->isGet()){
            $data= Info::AssessmentTable()->get($this->params()->fromQuery());
            $output["request"]= $this->params()->fromQuery();
            $output["success"]= true;

        }
        else if($this->getRequest()->isPost()){
            if(AssessmentsMeatEater::CreateNewAssessment($this->params()->fromPost(),$data)){
                $output["request"]= $this->params()->fromPost();
                $output["success"]= true;
            }
        }
        else if($this->getRequest()->isDelete()){

        }
        else if($this->getRequest()->isPatch()){

        }
        $output["data"]=$data;
        return new JsonModel($output);

    }


    public function AssessmentAction()
    {
        $data=array();
        $output=array(
            "data" =>  "Unable able to issue request",
            "request"=>$this->getAllParams(),
            "success" => false
        );


        $id=$this->params()->fromRoute("id");
        if($this->getRequest()->isPost()){
            $postArgs=$this->params()->fromPost();

            $postCommands=array(
                    "add-question"=>function($postArgs, &$output,&$data) {
                        if (AssessmentsMeatEater::AddQuestion($postArgs, $data)) {
                            $output["success"]= true;
                            $output["request"]= $postArgs;
                        }
                    },
                    "start-assessment"=>function($postArgs,&$output,&$data){
                        if (RunningAssessmentsMeatEater::StartAssessment($postArgs, $data)) {
                            $output["success"]= true;
                            $output["request"]= $postArgs;
                        }
                    },
                    "update"=>function($postArgs,&$output) {
                        $output["data"] = "Needs update";
                    }
                );


            /***************************************************************/
            if(!isset($postArgs["_action_"]))
            {
                $output["data"] = "Action Required";
                return new JsonModel($output);
            }


            /***************************************************************/
            if(!isset($postCommands[$postArgs["_action_"]])){
                $output["data"] = "Unkown Action {$postArgs["_action_"]}";
                return new JsonModel($output);
            }

            /***************************************************************/
            $postCommands[$postArgs["_action_"]]($postArgs,$output,$data);



        }
        if($this->getRequest()->isGet()){
            if(AssessmentsMeatEater::getAssessment($id,$data)){
                $output["success"]= true;
                $output["request"]= $this->params()->fromRoute();
            }
        }
        if($this->getRequest()->isDelete()){

        }
        if($this->getRequest()->isPatch()){

        }

        $output["data"]=$data;
        return new JsonModel($output);
    }
    /***********************************************************************/
    /* Assessments                                                         */
    /***********************************************************************/
    public function RunningAssessmentsAction()
    {
        $data=array();
        $output=array(
            "data" =>  "Unable able to issue request",
            "request"=>$this->getAllParams(),
            "success" => false
        );
        if($this->getRequest()->isGet()){
            if(RunningAssessmentsMeatEater::GetAllAssessments($this->params()->fromQuery(),$data)){
                $output["request"]= $this->params()->fromQuery();
                $output["success"]= true;
            }
        }
        else if($this->getRequest()->isPost()){
            if(AssessmentsMeatEater::CreateNewAssessment($this->params()->fromPost(),$data)){
                $output["request"]= $this->params()->fromPost();
                $output["success"]= true;
            }
        }
        else if($this->getRequest()->isDelete()){

        }
        else if($this->getRequest()->isPatch()){

        }
        $output["data"]=$data;
        return new JsonModel($output);

    }


    public function RunningAssessmentAction()
    {
        $data=array();
        $output=array(
            "data" =>  "Unable able to issue request",
            "request"=>$this->getAllParams(),
            "success" => false
        );


        $id=$this->params()->fromRoute("id");
        if($this->getRequest()->isPost()){
            $postArgs=$this->params()->fromPost();

            $postCommands=array(
                "answer-question"=>function($postArgs, &$output,&$data) {
//                    if (AssessmentsMeatEater::AddQuestion($postArgs, $data)) {
//                        $output["success"]= true;
//                        $output["request"]= $postArgs;
//                    }
                },
                "submit-assessment"=>function($postArgs,&$output,&$data){
                      if(RunningAssessmentsMeatEater::SubmitAssessment($postArgs,$data)){
                          $output["success"]= true;
                          $output["request"]= $postArgs;
                      }
//                    if (RunningAssessmentsMeatEater::StartAssessment($postArgs, $data)) {
//                        $output["success"]= true;
//                        $output["request"]= $postArgs;
//                    }
                }
            );


            /***************************************************************/
            if(!isset($postArgs["_action_"]))
            {
                $output["data"] = "Action Required";
                return new JsonModel($output);
            }


            /***************************************************************/
            if(!isset($postCommands[$postArgs["_action_"]])){
                $output["data"] = "Unkown Action {$postArgs["_action_"]}";
                return new JsonModel($output);
            }

            /***************************************************************/
            $postCommands[$postArgs["_action_"]]($postArgs,$output,$data);



        }
        if($this->getRequest()->isGet()){
            if(RunningAssessmentsMeatEater::getAssessment($id,$this->params()->fromQuery(),$data)){
                $output["success"]= true;
                $output["request"]= $this->params()->fromRoute();
            }
        }
        if($this->getRequest()->isDelete()){

        }
        if($this->getRequest()->isPatch()){

        }

        $output["data"]=$data;
        return new JsonModel($output);
    }
    /***********************************************************************/
    /* Questions                                                           */
    /***********************************************************************/
    public function QuestionsAction()
    {
        if($this->getRequest()->isPost()) {
            $copyFrom = $this->params()->fromPost("copyFrom");
            if (isset($copyFrom)) {

                $copyFrom = Info::QuestionsTable()->getFromById($copyFrom);
                if ($copyFrom == null) {
                    throwException(new \Exception("Copy From ID Doesnt Exists for Question "));
                }

                /***************************************************************/
                /* Copy Question                                               */
                /***************************************************************/
                $question = Info::QuestionsTable()->UpdateInsertData(null, $copyFrom->getData());

                /***************************************************************/
                /* Copy Tags                                                   */
                /***************************************************************/
                Info::TagTable()->copy(
                    array(
                        "ObjectID" => $copyFrom->getQuestionID(),
                        "Category" => "Question"
                    ),
                    array(
                        "ObjectID" => $question->getQuestionID(),
                    ));

                /***************************************************************/
                return new JsonModel(array(
                    "data" => $question->getData(),
                    "request" => $this->params()->fromQuery(),
                    "success" => true
                ));


            }

            $view = new ViewModel();
            $questionName = $this->params()->fromPost("name");
            if (!isset($questionName)) {
                /***************************************************************/
                return new JsonModel(array(
                    "data" => "Question Name Required",
                    "request" => $this->params()->fromQuery(),
                    "success" => false
                ));
            }

            /*******************************************************************/
            $question = Info::QuestionsTable()->UpdateInsertData(null,
                array(
                    "QuestionTypeID" => $this->params()->fromPost("QuestionTypeID"),
                    "Question" => $questionName,
                    "ExpectedAnswer" => null,
                    "CreatedBy" => Info::getCurrentUser()->getUserID()
                ));

            /***************************************************************/
            return new JsonModel(array(
                "data" => $question->getData(),
                "request" => $this->params()->fromQuery(),
                "success" => true
            ));
        }

        /********************************************************************/
        /* Gets                                                             */
        /********************************************************************/
        $query=$this->params()->fromQuery();
        unset($query["_"]);
        return new JsonModel(array(
            "data" =>  Info::QuestionsTable()->get($query),
            "request"=>$this->params()->fromQuery(),
            "success" => true
        ));
    }

    public function QuestionAction()
    {
        $id=$this->params()->fromRoute("id");

        if($this->getRequest()->isPost()){

        }
        if($this->getRequest()->isGet()){

        }
        if($this->getRequest()->isDelete()){

        }
        if($this->getRequest()->isPatch()){

        }
        $dumb=array(
            "success" => true
        );

        return new JsonModel($dumb);
    }




    /***********************************************************************/
    /* Question Answers                                                    */
    /***********************************************************************/
    public function AnsweredQuestionsAction(){

        $data=array();
        $output=array(
            "data" =>  "Unable able to issue request",
            "request"=>$this->getAllParams(),
            "success" => false
        );
        if($this->getRequest()->isGet()){
            $data= Info::ActiveQuestionsTable()->get($this->params()->fromQuery());
            $output["request"]= $this->params()->fromQuery();
            $output["success"]= true;

        }
        else if($this->getRequest()->isPost()){

        }
        else if($this->getRequest()->isDelete()){

        }
        else if($this->getRequest()->isPatch()){

        }
        $output["data"]=$data;
        return new JsonModel($output);

    }
    public function AnsweredQuestionAction(){

        $data=array();
        $output=array(
            "data" =>  "Unable able to issue request",
            "request"=>$this->getAllParams(),
            "success" => false
        );


        $id=$this->params()->fromRoute("id");
        if($this->getRequest()->isPost()){
            $postArgs=$this->params()->fromPost();

            $postCommands=array(
                "answer-question"=>function($postArgs, &$output,&$data) {
                    if (AnsweredQuestionsMeatEater::AnswerAQuestion($postArgs, $data)) {
                        $output["success"]= true;
                        $output["request"]= $postArgs;
                    }
                },
            );


            /***************************************************************/
            if(!isset($postArgs["_action_"]))
            {
                $output["data"] = "Action Required";
                return new JsonModel($output);
            }

            /***************************************************************/
            if(!isset($postCommands[$postArgs["_action_"]])){
                $output["data"] = "Unkown Action {$postArgs["_action_"]}";
                return new JsonModel($output);
            }

            /***************************************************************/
            $postCommands[$postArgs["_action_"]]($postArgs,$output,$data);



        }
        if($this->getRequest()->isGet()){
            if(AnsweredQuestionsMeatEater::getAnsweredQuestion($id,$this->params()->fromQuery(),$data)){
                $output["success"]= true;
                $output["request"]= $this->params()->fromRoute();
            }
        }
        if($this->getRequest()->isDelete()){

        }
        if($this->getRequest()->isPatch()){

        }

        $output["data"]=$data;
        return new JsonModel($output);

    }

    /***********************************************************************/
    /* Question Types                                                      */
    /***********************************************************************/
    public function QuestionTypesAction()
    {
        $query=$this->params()->fromQuery();
        return new JsonModel(array(
            "data" =>  Info::QuestionTypesTable()->get($query),
            "request"=>$query,
            "success" => true
        ));
    }
    public function QuestionTypeAction()
    {
        $id=$this->params()->fromRoute("id");

        if($this->getRequest()->isPost()){

        }
        if($this->getRequest()->isGet()){

        }
        if($this->getRequest()->isDelete()){

        }
        if($this->getRequest()->isPatch()){

        }
        $dumb=array(
            "success" => true
        );

        return new JsonModel($dumb);
    }
    public function tagsAction(){

        $data=array(
            "data"=>"Unkown Method",
            "request"=>$this->params()->fromQuery(), // TODO we want to eventually make a routine that gets all of them
            "success"=>false //Assume Everything will fail... Good practice lol
        );

        if($this->getRequest()->isGet()){
            $data["success"]=true;
            $data["data"]=Info::TagTable()->get($this->params()->fromQuery());
        }
        else if($this->getRequest()->isPost()){
            $input=array_intersect_key($this->params()->fromPost(),(new Tag())->getData());
            $data["data"]=array("results"=>Info::TagTable()->save($input));
            $data["success"]=true;
        }
        else if($this->getRequest()->isDelete()){

        }
        else if($this->getRequest()->isPatch()){

        }
        return new JsonModel($data);



    }


}
