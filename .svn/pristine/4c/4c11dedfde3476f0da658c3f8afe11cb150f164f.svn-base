import React from 'react';
import $ from 'jquery';
import APIComponent from '../../Containers/APIComponent.jsx';
import DataInput from '../../Containers/DataInput.jsx';
import CoursesAPI from "../../../libaries/APIs/CoursesAPI.jsx";
import {ButtonGroup,Button} from 'react-bootstrap';
import Loader from '../../Containers/Loader.jsx';


class AnswerableQuestion extends React.Component
{
    constructor(props) {
        super(props);
        this.Important=function(){
            return {Question:this.props.AnswerableQuestion,Index:this.props.Index};
        }.bind(this);
    }

    componentDidMount()
    {
        let question=this.props.AnswerableQuestion;
        let element=$(this.questionDOM);

        /***********************************************************/
        /* Handle the Refresh of the DOM(Similar to react)         */
        /***********************************************************/
        var domUsing=element.find("[answered-question='"+question["AnswerableID"]+"']");
        if(domUsing.length==0){
            domUsing=$("<div>").attr("answered-question",question["AnswerableID"]).appendTo(element);
        }
        domUsing.empty();

        /***********************************************************/
        /* If Locked, then we onyl have html to show... So show it */
        /***********************************************************/
        if(question["Locked"]){
            this.props.onIsLocked(this.Important());
            var blindElement=$(question["AnsweredHTML"]).appendTo(domUsing);
            blindElement.find(".btn").addClass("disabled").unbind("click"); // Make it look disabled
            return;
        }
        if(question["Attempts"]==0){
            this.props.onIsUnAnswered(this.Important());
        }
        else{
            this.props.onAnswered(this.Important());
        }


        /***********************************************************/
        /* Initilize the Displayer                                 */
        /***********************************************************/
        var displayer=new QuestionDisplayWidget.instances[question["Question"]["QuestionTypeID"]]();
        displayer.__data__=question;

        /***********************************************************/
        displayer.appendTo(domUsing);


        /***********************************************************/
        /* Whenever the Answer is being reevaluated.               */
        /***********************************************************/
        displayer.on("loading",function(e){
            this.props.onLoadStarted(this.Important());
        }.bind(this));

        displayer.on("loaded",function(e)
        {
            this.props.onLoadFinished($.extend({data:displayer.__data__},this.Important()));
        }.bind(this));

        /***********************************************************/
        /* Whenever its time to test if they got the answer right  */
        /***********************************************************/
        displayer.on("test",function(e){

            //$.isLoading();
            // fistTime=false;
            displayer._element.find('.loading-spinner').remove();
            var html=displayer._element.html();

            displayer._element.find(".btn").addClass("disabled").unbind("click");
            //


            Api.AnswerableQuestions.action('answer-question',null,{
                id: displayer.__data__["AnswerableID"],
                html: html,
                answer: e.answer
            },function(){
                this.props.onAnswered(this.Important());
                displayer.refresh();
            }.bind(this));

        }.bind(this));

        displayer.setData(displayer.__data__["AnswerableID"],{
            "parameters": question["Question"]["JSONParameters"],
            "answer":question["ChosenAnswer"]
        });

    }
    render(){
        return (
            <div ref={(input) => { this.questionDOM = input; }}></div>
        )
    }
}
AnswerableQuestion.propTypes=
{
    onLoadStarted:React.PropTypes.func,
    onLoadFinished:React.PropTypes.func,
    onIsLocked:React.PropTypes.func,
    onIsUnAnswered:React.PropTypes.func,
    onAnswered:React.PropTypes.func,
    AnswerableQuestion:React.PropTypes.object.isRequired,
    Index:React.PropTypes.number.isRequired
};
AnswerableQuestion.defaultProps={
    onAnswered:function(answer){

    },
    onLoadStarted:function(answer){

    },
    onLoadFinished:function(answer){

    },
    onIsLocked:function(answer){

    },
    onIsUnAnswered:function(answer){

    },
};

export default AnswerableQuestion