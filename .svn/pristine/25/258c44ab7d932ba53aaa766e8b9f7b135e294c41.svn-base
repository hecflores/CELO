<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/27/2017
 * Time: 10:28 PM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\CourseContent;
use Application\Service\APIHelper;

class CourseContentMeatEater
{

    /**
     * @param array $parameters
     * @param array $expected
     * @param array $output
     * @return bool
     */
    protected static function CheckParameters($parameters, $expected, &$output){
        self::InitializeOutput($output);
        foreach($expected as $expectName){
            if(!isset($parameters[$expectName])){
                $output["errors"][]="$expectName Was not found(Was expected)";
            }
        }
        return count($output["errors"])==0;
    }

    protected static function InitializeOutput(&$output){
        $output["errors"]=isset($output["errors"])?$output["errors"]:array();
    }

    /**
     * @param $id
     * @param $parameters
     * @param $output
     * @return bool
     */
    public static function GetCourseContent($id, $parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        self::InitializeOutput($output);
        if(!self::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        if(!self::GetCourseContents(array("ContentID"=>$id),$output)){
            $output["errors"][]="Failed at getting the course content";
            return false;
        }

        /*******************************************************************/
        $courseContent=$output["results"];
        if(count($courseContent)==0){

        }

        /*******************************************************************/
        $output["results"]=$courseContent[0];
        return true;
    }
    public static function GetCourseContents($parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        self::InitializeOutput($output);
        if(!self::CheckParameters($parameters,array(),$output)){
            return false;
        }

        $columns=array_map(function() {
            return true;
        },(new CourseContent())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "CourseContent",
            $parameters,
            $columns,
            function($item)
            {
                $courseContent=new CourseContent();
                $courseContent->exchangeArray($item);
                return $courseContent->getData();
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;


    }
}