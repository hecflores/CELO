<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/9/2017
 * Time: 6:03 AM
 */

namespace Assessments\Controller;


use Application\Info;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;

class IndexController extends AbstractActionController
{
    public function onDispatch(MvcEvent $e)
    {
        $navigation=new ViewModel();
        $navigation->setTemplate("layout/staff/navigation");


        $e->getViewModel()->addChild($navigation,"navigation");
        //e->getViewModel()->setTemplate("visitors/layout");
        $parent=parent::onDispatch($e); // TODO: Change the autogenerated stub
        /*******************************************************************/


        /*******************************************************************/
        return $parent;
    }
    protected function errorAction($message){
        $view=new ViewModel();
        $view->setTemplate("assessments/error");
        $view->setVariable("message",$message);
        return $view;
    }
    public function createAction()
    {
        $CourseContentID=$this->params()->fromQuery("CourseContentID");
        if(!isset($CourseContentID)){
            return $this->errorAction("Required Course Content ID. Did Not Found");
        }

        /*******************************************************************/
        $CourseContent=Info::CourseContentTable()->getByID($CourseContentID);

        /*******************************************************************/
        $AssessmentFound=Info::AssessmentTable()->GetAssessmentForCourseContent($CourseContent);
        if($AssessmentFound!=null){
            return $this->errorAction("Assessment is already attatched to that course content");
        }

        $AssessmentID=Info::AssessmentTable()->CreateNewAssessment(array(),$CourseContent->getContentID());
        $this->redirect()->toUrl("/assessments/$AssessmentID/edit");
        return;

    }
    public function editAction()
    {
        $assessmentID=$this->params()->fromRoute("assessmentID");
        if(!isset($assessmentID)){
            return $this->errorAction("Required Assessment ID. Did Not Found");
        }

        /*******************************************************************/
        $Assessment=Info::AssessmentTable()->GetAssessmentFromID($assessmentID);
        if($Assessment==null){
            return $this->errorAction("Assessment Not Found");
        }

        /*******************************************************************/


        $view=new ViewModel();
        $view->setTemplate("assessments/edit");
        $view->setVariable("Assessment",$Assessment);
        return $view;



    }
    public function addQuestionAction()
    {
        $QuestionID=$this->params()->fromQuery("QuestionID");
        if(!isset($QuestionID)){
            return $this->errorAction("No Question ID Found");
        }

        /*******************************************************************/
        $assessmentID=$this->params()->fromRoute("assessmentID");
        if(!isset($assessmentID)){
            return $this->errorAction("Required Assessment ID. Did Not Found");
        }


        /*******************************************************************/
        $Assessment=Info::AssessmentTable()->GetAssessmentFromID($assessmentID);
        if($Assessment==null){
            return $this->errorAction("Assessment Not Found");
        }

        Info::AssessmentTable()->AddQuestion($assessmentID,$QuestionID,2);
        $this->redirect()->toUrl("/assessments/$assessmentID/edit");
        return;



    }
    public function runAction(){
        $assessmentID=$this->params()->fromRoute("assessmentID");
        if(!isset($assessmentID)){
            return $this->errorAction("Required Assessment ID. Did Not Found");
        }

        /*******************************************************************/
        $Assessment=Info::AssessmentTable()->GetAssessmentFromID($assessmentID);
        if($Assessment==null){
            return $this->errorAction("Assessment Not Found");
        }

        $ViewingID=$this->params()->fromQuery("QuestionNum");


        $view=new ViewModel();
        $view->setTemplate("assessments/run");
        $view->setVariable("QuestionViewing",$ViewingID);
        $view->setVariable("Assessment",$Assessment);
        return $view;


    }
    public function startAction(){
        $assessmentID=$this->params()->fromRoute("assessmentID");
        if(!isset($assessmentID)){
            return $this->errorAction("Required Assessment ID. Did Not Found");
        }

        /*******************************************************************/
        $Assessment=Info::AssessmentTable()->GetAssessmentFromID($assessmentID);
        if($Assessment==null){
            return $this->errorAction("Assessment Not Found");
        }

        /*******************************************************************/
        if(Info::AssessmentTable()->getRunningInstance($Assessment,Info::getCurrentUser())==null){
            Info::AssessmentTable()->StartAssessment($Assessment);
        }
        $this->redirect()->toUrl("/assessments/{$Assessment->getAssessmentID()}/run");

        return;
    }

    public function viewAction()
    {
        $CourseContentID=$this->params()->fromQuery("CourseContentID");
        if(!isset($CourseContentID)){
            return $this->errorAction("Required Course Content ID. Did Not Found");
        }

        /*******************************************************************/
        $CourseContent=Info::CourseContentTable()->getByID($CourseContentID);

        /*******************************************************************/
        $AssessmentFound=Info::AssessmentTable()->GetAssessmentForCourseContent($CourseContent);
        if($AssessmentFound==null){
            return $this->errorAction("Assessment Not Found");
        }

        $AssessmentID=Info::AssessmentTable()->CreateNewAssessment(array(),$CourseContent->getContentID());
        $this->redirect()->toUrl("/assessments/$AssessmentID/edit");
        return;

    }

}