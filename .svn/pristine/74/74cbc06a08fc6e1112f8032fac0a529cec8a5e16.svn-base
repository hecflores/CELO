<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/27/2017
 * Time: 6:37 AM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\AnsweredQuestion;
use Application\Model\AnsweredQuestionsGroup;
use Application\Model\Question;
use Application\Service\APIHelper;

class AnsweredQuestionsMeatEater
{
    public static function AddQuestionToGradableItem($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
            "PointsWorth",
            "CorrectAnswer",
            "QuestionID",
            "AnsweredGroupID"),$output)){
            return false;
        }

        /*******************************************************************/
        $id=Info::PerformInsert("AnsweredQuestions",
            $parameters);

        /*******************************************************************/
        /* Grab the info we just inserted                                  */
        /*******************************************************************/
        $answer=APIHelper::QuickFetch(
            "AnsweredQuestions",
            array( "AnsweredID"=>$id ),
            array( "AnsweredID"=>true ),
            function($item){
                return $item;
            })["results"];

        /*******************************************************************/
        if(count($answer)==0){
            $output["errors"][]="Insert into the Answered Question failed.";
            return false;
        }

        /*******************************************************************/
        $output["results"]=$answer;
        return true;
    }
    public static function CreateGradableItem($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("CourseContentID"),$output)){
            return false;
        }
        $parameters["CreatedBy"]=Info::getCurrentUser()->getUserID();
        $parameters["CreatedOn"]=date('Y-m-d H:i:s');


        /*******************************************************************/
        $answeredGroupID=Info::PerformInsert("AnsweredQuestionsGroups",$parameters);

        /*******************************************************************/
        return self::GetGradableItem($answeredGroupID,array(),$output);
    }

    public static function GetGradableItem($id, $parameters, &$output)
    {
        /*******************************************************************/
        $gradableGroup=APIHelper::QuickFetch(
            "AnsweredQuestionsGroups",
            array( "AnsweredGroupID"=>$id ),
            array( "AnsweredGroupID"=>true ),
            function($item){
                $group=new AnsweredQuestionsGroup();
                $group->exchangeArray($item);
                return $group->getData();
            })["results"];

        /*******************************************************************/
        if(count($gradableGroup)==0){
            $output["errors"][]="No Gradable Items with id $id";
            return false;
        }
        $gradableGroup=$gradableGroup[0];



        /********************************************************************/
        /* Get the Answered Questions                                       */
        /********************************************************************/
        $finalAssessment["answers"]=
            APIHelper::QuickFetch(
                "AnsweredQuestionsReport",
                array( "AnsweredGroupID"=>$id ),
                array( "AnsweredGroupID"=>true ),
                function($item){

                    $question=new Question();
                    $answerQuestion=new AnsweredQuestion();
                    $answerQuestion->exchangeArray($item);
                    $question->exchangeArray($item);

                    return array(
                        "AnsweredQuestion"=>$answerQuestion->getData(),
                        "Question"=>$question->getData()
                    );
                })["results"];




        $newAnswers=array();

        /********************************************************************/
        /* We will move things around since we have all the data...This make*/
        /* The front end way easier to deal with.                           */
        /********************************************************************/
        foreach($finalAssessment["answers"] as $answer){


            $newAnswer=$answer["AnsweredQuestion"];
            $questionID=$answer["Question"]["QuestionID"];

            //Grab the Question corresponding to this answer(Question)
            $newAnswer["Question"]=$answer["Question"]; //$finalAssessment["Assessment"]["questions"][$questionID][0];

            /***************************************************************/
            /* Modify the Answer To Allow certain features to work         */
            /***************************************************************/
            if($newAnswer["Attempts"]>=$newAnswer["AllowedAttempts"]){
                //unset($newAnswer["Question"]);//We dont want them to be able to render the question again...
                //To answer it
                $newAnswer["Locked"]=true;
            }
            else{
                $newAnswer["Locked"]=false;
            }

            /***************************************************************/
            $newAnswer["IsCorrect"]=$newAnswer["CorrectAnswer"]==$newAnswer["ChosenAnswer"];

            $newAnswers[]=$newAnswer;
        }
        $answerStatus=array();

        /*******************************************************************/
        /* Build the status question                                       */
        /*******************************************************************/
        foreach($newAnswers as $index=>$newAnswer){
            if($newAnswer["Locked"])
            {
                $answerStatus[]="LOCKED";
                continue;
            }
            if($newAnswer["Attempts"]==0)
            {
                $answerStatus[]="UNSEEN";
                continue;
            }
            $answerStatus[]="SEEN";
        }

        /*******************************************************************/
        $gradableGroup["TotalQuestions"]=count($newAnswers);
        $gradableGroup["QuestionStatus"]=$answerStatus;
        $gradableGroup["Questions"]=$newAnswers;

        /*******************************************************************/
        $output["results"]=$gradableGroup;
        return true;
    }
    /**
     * @param $parameters
     * @param $output
     * @return bool
     */
    public static function AnswerAQuestion($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("AnsweredID","html","answer"),$output)){
            return false;
        }

        /*******************************************************************/
        $AnsweredID=$parameters["AnsweredID"];
        $html=$parameters["html"];
        $answer=$parameters["answer"];

        /*******************************************************************/
        Info::ActiveQuestionsTable()->AnswerQuestion($AnsweredID,$answer,$html);


        return self::getAnsweredQuestion($AnsweredID,array(),$output);
    }
    public static function getAnsweredQuestions($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        $columns=array_map(function() {
            return true;
        },(new AnsweredQuestion())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnsweredQuestionsReport",
            $parameters,
            $columns,
            function($item){
                $answeredData=new AnsweredQuestion();
                $answeredData->exchangeArray($item);
                return $answeredData->getData();
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }

    public static function getAnsweredQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);

        /*******************************************************************/
        $columns=array_map(function() {
            return true;
        },(new AnsweredQuestion())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnsweredQuestionsReport",
            array( "AnsweredID"=>$id ),
            $columns,
            function($item){
                $answeredData=new AnsweredQuestion();
                $answeredData->exchangeArray($item);
                return $answeredData->getData();
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
}