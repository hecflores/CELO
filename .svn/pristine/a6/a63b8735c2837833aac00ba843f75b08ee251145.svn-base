<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/27/2017
 * Time: 6:37 AM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\AnsweredQuestion;
use Application\Service\APIHelper;

class AnsweredQuestionsMeatEater
{
    /**
     * @param array $parameters
     * @param array $expected
     * @param array $output
     * @return bool
     */
    protected static function CheckParameters($parameters, $expected, &$output){
        self::InitializeOutput($output);
        foreach($expected as $expectName){
            if(!isset($parameters[$expectName])){
                $output["errors"][]="$expectName Was not found(Was expected)";
            }
        }
        return count($output["errors"])==0;
    }

    protected static function InitializeOutput(&$output){
        $output["errors"]=isset($output["errors"])?$output["errors"]:array();
    }

    /**
     * @param $parameters
     * @param $output
     * @return bool
     */
    public static function AnswerAQuestion($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        self::InitializeOutput($output);
        if(!self::CheckParameters($parameters,array("AnsweredID","html","answer"),$output)){
            return false;
        }

        /*******************************************************************/
        $AnsweredID=$parameters["AnsweredID"];
        $html=$parameters["html"];
        $answer=$parameters["answer"];

        /*******************************************************************/
        Info::ActiveQuestionsTable()->AnswerQuestion($AnsweredID,$answer,$html);


        return self::getAnsweredQuestion($AnsweredID,array(),$output);
    }


    public static function getAnsweredQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        self::InitializeOutput($output);

        /*******************************************************************/
        $columns=array_map(function() {
            return true;
        },(new AnsweredQuestion())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnsweredQuestionsReport",
            array( "AnsweredID"=>$id ),
            $columns,
            function($item){
                $answeredData=new AnsweredQuestion();
                $answeredData->exchangeArray($item);
                return $answeredData->getData();
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
}