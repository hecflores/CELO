<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/11/2017
 * Time: 10:45 PM
 *
 */

use Application\Info;
$htmlEditor=
     '<div class="questionEditor">'
    .'    <div class="">'
    .'        <span style="display:none" class="loadingSpinner spinner"></span>'
    .'        <a class="quickStatus text-success"></a>'
    .'    </div>'
    .'    <div class="mainContent"></div>'
    .'</div>';


$htmlDisplay=
     '<div class="questionDisplayer">'
    .'    <div class=" mainContent"></div>'
    .'    <div class="">'
    .'        <span style="display:none" class="loadingSpinner spinner"></span>'
    .'        <div class="quickStatus "></div>'
    .'    </div>'
    .'</div>';

echo /** @lang JavaScript */
'
    
    function QuestionWidget(){
    
    }
    QuestionWidget.popup={
        display:function(questionID,callback){
            var element=$("<div>");
            MessageBox.ShowPopup({
                title:"Question",
                content:element
            });
            QuestionWidget.display(element,questionID,callback);
            
         },
         run:function(answerQuestionID,callback){
            var element=$("<div>");
            MessageBox.ShowPopup({
                title:"Question",
                content:element
            });
            QuestionWidget.run(element,answerQuestionID,callback);
         },
         edit:function(questionID,callback){
            var element=$("<div>");
            MessageBox.ShowPopup({
                title:"Question",
                content:element
            });
            QuestionWidget.edit(element,questionID,callback);
         }
    };
    
    
    QuestionWidget.display=function(element,questionID,callback){
        //element.html("<div style=\'position:relative;transform:none;width:30px;height:30px\' class=\'spinner\'>");
        Api.Questions.getByID(questionID,function(question){
            element.empty();
            var questionTypeID=question.QuestionTypeID;
            var displayer=new QuestionDisplayWidget.instances[questionTypeID]();
            callback?callback(displayer):true;//Modify the Displayer
            displayer.open(element,questionID);
        },function(errorMessage){
            element.html("<h1 class=\"text-danger\">"+errorMessage+"</h1>");
        });
        
    };
    QuestionWidget.run=function(element,answeredAQuestionID,callback){
        $.get("/api/questions/answered?AnsweredID="+answeredAQuestionID,function(data){
            data=data.data[0];
            QuestionWidget.display(element,data["QuestionID"],function(displayer){
                callback?callback(displayer):true;
                var fistTime=true;
                var AnswerQuestionElementStatus=$("<div class=\'answer-question-info\'><div class=\'attempts\'></div></div>");
                displayer._container.prepend(AnswerQuestionElementStatus);
                displayer.preload(function(callback){
                    if(fistTime){
                        callback();
                    }
                    $.get("/api/questions/answered?AnsweredID="+answeredAQuestionID,function(data2){
                        
                        /***************************************************/
                       data2=data2.data[0];
                       data=data2;
                       
                       /***************************************************/
                       if(parseInt(data["Attempts"])>0)
                       {
                           displayer.trigger("answered");
                           element.trigger("answered");    
                       }
                        
                       /***************************************************/
                       AnswerQuestionElementStatus.find(".attempts").html("<h2>"+data["Attempts"]+" attempts Out of "+data["AllowedAttempts"]);
                       
                    });
                    callback();
                });
                displayer.on("test",function(e){
                    fistTime=false;
                    var html=displayer._element.html();
                    displayer._element.append($("<div style=\'width:30px;height:30px\' class=\'loadingSpinner spinner\'>"));
                    $.ajax({
                        url:"/questions/answer/"+data["AnsweredID"],
                        method:"POST",
                        data:JSON.stringify({answer:e.answer,html:html}),
                        success:function(){
                            data["ChosenAnswer"]=e.answer;
                            displayer.refresh();
                        }
                    });
                });
                displayer.on("loaded",function(){
                     displayer._managed_data["answer"]=data["ChosenAnswer"];
                });
                displayer.on("render","before",function(e){
                     
                });
                displayer.on("render","after",function(e){
                     if(parseInt(data["Attempts"])>=parseInt(data["AllowedAttempts"])){
                         displayer._element.find(".btn").addClass("disabled").unbind("click");
                     }
                });
            });
            
        });
    };
    QuestionWidget.edit=function(element,questionID){
        $.get("/api/questions?QuestionID="+questionID,function(data){
            data=data.data[0];
            var questionTypeID=data.QuestionTypeID;
            var editor=new QuestionCreatorWidget.instances[questionTypeID]();
            callback?callback(editor):true;//Modify the Displayer
            editor.open(element,questionID);
        });
    };
    /***********************************************************************/
    /* Original Question Creator Code                                      */
    /***********************************************************************/
    function QuestionCreatorWidget(){
        this.$_cleanedData={};
        this._managed_data={};
        this._container=$(\''.$htmlEditor.'\');
        this._element=this._container.find(".mainContent");
    }
    Tools.inheritsFrom(QuestionCreatorWidget,EventHandler);
    QuestionCreatorWidget.start=function(element,questionID){
    
        QuestionWidget.edit(element,questionID);
    };
    
    QuestionCreatorWidget.instances={};
    $.extend(QuestionCreatorWidget.prototype, {
        open:function(element,questionID){
            this.baseURL="/questions/questions/"+questionID+"/editor";
            element.append(this._container);
            this.refresh();
        },
        setData:function(data){
            var $this=this;
            
            $this._managed_data=data;
            $this.$_cleanedData=$this.setup($this._managed_data["parameters"]);
            $this.trigger("render","before");
            var ElementReplacing=$("<div>");
            $this.render(ElementReplacing);
            $this.trigger("render","after");
            
        },
        appendTo:function(element){
              element.append(this._container);
        },
        load:function(callback)
        {
            var $this=this;
            $.get(this.baseURL+"/load",function(data){
                $this._managed_data=data;
                $this.trigger("loaded");
                callback?callback():true;
            });
        },
        setAnswer:function(answer){
            this._managed_data["answer"]=answer;
            $_events.trigger("save");
        },
        getAnswer:function(){
            return this._managed_data["answer"];
        },
        save:function(callback)
        {
            var $this=this;
            //this.beforeSubmitingChanges(this.$_cleanedData["parameters"]);
            $.ajax({
                url:$baseUrl+"/save",
                method:"POST",
                data: JSON.stringify({ "parameters": $this.$_cleanedData,
                                       "answer":$this._managed_data["answer"]}),
                success:function(data) {
                    //$this.afterSubmitingChanges(data);
                    callback?callback():true;
                }
            });

        },
        refresh:function(callback)
        {

            var $this=this;
            $this._element.empty();
            this.load(function(){
                
                $this.$_cleanedData=$this.setup($this._managed_data["parameters"]);
                $this.render($this._element);

                callback?callback():true;
            });
        }
    });
    
    
    
    
    
    /***********************************************************************/
    /* Internet Code                                                       */
    /***********************************************************************/
    function QuestionDisplayWidget(){
        this.$_cleanedData={};
        this._managed_data={};
        this._container=$(\''.$htmlDisplay.'\');
        this._element=this._container.find(".mainContent");
        this._preload=function(callback){
            callback();
        };
    }
    Tools.inheritsFrom(QuestionDisplayWidget,EventHandler);
    QuestionDisplayWidget.start=function(element,questionID){
        QuestionWidget.display(element,questionID);
    };
    QuestionDisplayWidget.instances={};
    $.extend(QuestionDisplayWidget.prototype, {
       
        open:function(element,questionID){
            this.questionID=questionID;
            element.append(this._container);
            this.refresh();
        },
        appendTo:function(element){
              element.append(this._container);
        },
        preload:function(callback){
            this._preload=callback;
        },
        load:function(callback)
        {
            var $this=this;
            this._preload(function()
            {
                Api.AnsweredQuestions.get($this.questionID,function(data){
                    $this.__data__=data;
                    $this._managed_data={parameters:data["Question"]["JSONParameters"]};
                    $this.trigger("loaded");
                    callback?callback():true;
                });    
            });
            
        },
        setAnswer:function(answer){
            this._managed_data["answer"]=answer;
            //$_events.trigger("test");
            this.test();
        },
        test:function(callback)
        {
            var $this=this;
            
            $this.trigger("test",{answer:this._managed_data["answer"]});
            
            //this.beforeSubmitingChanges(this.$_cleanedData["parameters"]);
            //alert("test");

        },
        refresh:function(callback)
        {
            var $this=this;
            //$this._element.append($("<div style=\'width:30px;height:30px\' class=\'loadingSpinner spinner\'>"));
            this.load(function(){
                
                $this.$_cleanedData=$this.setup($this._managed_data["parameters"]);
                $this.trigger("render","before");
                var ElementReplacing=$("<div>");
                $this.render(ElementReplacing);
                $this._element.replaceWith(ElementReplacing);
                $this._element=ElementReplacing;
                $this.trigger("render","after");
                callback?callback():true;
            });
        },
        setData:function(questionID,data){
            var $this=this;
            this.questionID=questionID;
            $this._managed_data=data;
            $this.$_cleanedData=$this.setup($this._managed_data["parameters"]);
            $this.trigger("render","before");
            var ElementReplacing=$("<div>");
            $this.render(ElementReplacing);
            $this._element.replaceWith(ElementReplacing);
            $this._element=ElementReplacing;
            $this.trigger("render","after");
            
        }
    });
    
    
';

$QuestionTypes=Info::QuestionTypesTable()->get();

echo '
/****************************************************************************/
/*                  U s e r   D e v e l o p e d   C o d e                   */
/****************************************************************************/
';

/** @var \Application\Model\QuestionType[] $QuestionTypes */
foreach($QuestionTypes["results"] as $questionType){
    $QuestionManager=new \Application\QuestionTypeManager($questionType["QuestionTypeID"]);
    $QuestionCreator=Info::getCurrentUser();

    $editorClassName=$questionType["QuestionTypeID"];
    $displayerClassName=$questionType["QuestionTypeID"];

    $editorJavascript   =$QuestionManager->getDevelopmentCode();
    $displayerJavascript=$QuestionManager->getDeploymentCode();

    $editorJavascript   =str_replace('QuestionWidget',"QuestionCreatorWidget.instances['$editorClassName']",$editorJavascript);
    $displayerJavascript=str_replace('QuestionWidget',"QuestionDisplayWidget.instances['$displayerClassName']",$displayerJavascript);

    $editorJavascript   =str_replace('col-',"",$editorJavascript);
    $displayerJavascript=str_replace('col-',"",$displayerJavascript);

echo <<<JS
/****************************************************************************/
/* {$questionType["Name"]} */
/****************************************************************************/
/**  
* @author {$QuestionCreator->getFirstName()} {$QuestionCreator->getFirstName()} Email:{$QuestionCreator->getEmail()} PhoneNumber:{$QuestionCreator->getPhoneNumber()}
* @constructor
*/
QuestionCreatorWidget.instances["$editorClassName"]=function(){
    QuestionCreatorWidget.apply(this,arguments);
};
Tools.inheritsFrom(QuestionCreatorWidget.instances["$editorClassName"],QuestionCreatorWidget);
$.extend(QuestionCreatorWidget.instances["$editorClassName"].prototype,{
    getName:function(){
        return "{$questionType["Name"]}";
    } 
});
/****************************************************************************/
$editorJavascript

/**  
* @author {$QuestionCreator->getFirstName()} {$QuestionCreator->getFirstName()} Email:{$QuestionCreator->getEmail()} PhoneNumber:{$QuestionCreator->getPhoneNumber()}
* @constructor
*/
QuestionDisplayWidget.instances["$displayerClassName"]=function(){
    QuestionDisplayWidget.apply(this,arguments);
};
Tools.inheritsFrom(QuestionDisplayWidget.instances["$displayerClassName"],QuestionDisplayWidget);
$.extend(QuestionDisplayWidget.instances["$editorClassName"].prototype,{
    getName:function(){
        return "{$questionType["Name"]}";
    } 
});
/****************************************************************************/
$displayerJavascript

/****************************************************************************/
/****************************************************************************/
/****************************************************************************/
$(document).on("created","div,body",function(){
    $(this).find(".graded-question:not([loaded])").attr("loaded",true).each(function(){
         var ID=$(this).attr("answeredID");
        QuestionWidget.run($(this),ID);         
    });
});
JS;



}
