<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/27/2017
 * Time: 6:37 AM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\AnsweredQuestion;
use Application\Service\APIHelper;

class AnsweredQuestionsMeatEater
{
    public static function AddQuestionToGradableItem($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
            "PointsWorth",
            "CorrectAnswer",
            "QuestionID",
            "AnsweredGroupID"),$output)){
            return false;
        }

        /*******************************************************************/
        $id=Info::PerformInsert("AnsweredQuestion",
            $parameters);

        /*******************************************************************/
        /* Grab the info we just inserted                                  */
        /*******************************************************************/
        $answer=APIHelper::QuickFetch(
            "AnsweredQuestions",
            array( "AnsweredID"=>$id ),
            array( "AnsweredID"=>true ),
            function($item){
                return $item;
            })["results"];

        /*******************************************************************/
        if(count($answer)==0){
            $output["errors"][]="Insert into the Answered Question failed.";
            return false;
        }

        /*******************************************************************/
        $output["results"]=$answer;
        return true;
    }
    public static function CreateGradableItem($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("CourseContentID"),$output)){
            return false;
        }
        $parameters["CreatedBy"]=Info::getCurrentUser()->getUserID();
        $parameters["CreatedOn"]=date('Y-m-d H:i:s');


        /*******************************************************************/
        $answeredGroupID=Info::PerformInsert("AnsweredQuestionsGroups",$parameters);

        /*******************************************************************/
        return self::GetGradableItem($answeredGroupID,array(),$output);
    }
    public static function GetGradableItem($id, $parameters, &$output)
    {

        /*******************************************************************/
        $gradableGroup=APIHelper::QuickFetch(
            "AnsweredQuestions",
            array( "AnsweredGroupID"=>$id ),
            array( "AnsweredGroupID"=>true ),
            function($item){
                return $item;
            })["results"];

        /*******************************************************************/
        if(count($gradableGroup)==0){
            $output["errors"][]="No Gradable Items with id $id";
            return false;
        }
        $gradableGroup=$gradableGroup[0];

        /*******************************************************************/
        $grades=APIHelper::QuickFetch(
            "AnsweredQuestions",
            array( "AnsweredGroupID"=>$id),
            array( "AnsweredGroupID"=>true ),
            function($item){

                return $item;
            })["results"];

        /*******************************************************************/
        $gradableGroup["Questions"]=$grades;

        /*******************************************************************/
        $output["results"]=$gradableGroup;
        return true;
    }
    /**
     * @param $parameters
     * @param $output
     * @return bool
     */
    public static function AnswerAQuestion($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("AnsweredID","html","answer"),$output)){
            return false;
        }

        /*******************************************************************/
        $AnsweredID=$parameters["AnsweredID"];
        $html=$parameters["html"];
        $answer=$parameters["answer"];

        /*******************************************************************/
        Info::ActiveQuestionsTable()->AnswerQuestion($AnsweredID,$answer,$html);


        return self::getAnsweredQuestion($AnsweredID,array(),$output);
    }


    public static function getAnsweredQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);

        /*******************************************************************/
        $columns=array_map(function() {
            return true;
        },(new AnsweredQuestion())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnsweredQuestionsReport",
            array( "AnsweredID"=>$id ),
            $columns,
            function($item){
                $answeredData=new AnsweredQuestion();
                $answeredData->exchangeArray($item);
                return $answeredData->getData();
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
}