<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/27/2017
 * Time: 6:37 AM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\AnswerableQuestion;
use Application\Model\AnswerableQuestionsGroup;
use Application\Model\AnsweredQuestion;
use Application\Model\AnsweringQuestionsGroup;
use Application\Model\Course;
use Application\Model\CourseContent;
use Application\Model\Question;
use Application\Model\Section;
use Application\Model\SectionUsers;
use Application\Model\User;
use Application\Roles;
use Application\Service\APIHelper;
use Application\Service\LoginService;
use ArrayObject;

class AnswerableQuestionsMeatEater
{
    public static function AddQuestionToGradableItem($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
            "PointsWorth",
            "CorrectAnswer",
            "QuestionID",
            "AnswerableGroupID"),$output)){
            return false;
        }

        $parameters=array_intersect_key($parameters,array(
            "AnswerableGroupID"=>true,
            "QuestionID"=>true,
            "AllowedAttempts"=>true,
            "PointsWorth"=>true,
            "CorrectAnswer"=>true
        ));

        //final-fix Need to ensure that AllowedAttempts is being added...
        //final-fix Need to ensure that PointsWorth is being added...
        //final-fix Need to ensure that CorrectAnswer is being added...
        /*******************************************************************/
        $id=Info::PerformInsert("AnswerableQuestions",
            $parameters);

        /*******************************************************************/
        /* Grab the info we just inserted                                  */
        /*******************************************************************/
        $answer=APIHelper::QuickFetch(
            "AnswerableQuestions",
            array( "AnswerableID"=>$id ),
            array( "AnswerableID"=>true ),
            function($item){
                return $item;
            })["results"];

        /*******************************************************************/
        if(count($answer)==0){
            $output["errors"][]="Insert into the Answered Question failed.";
            return false;
        }

        /*******************************************************************/
        $output["results"]=$answer;
        return true;
    }
    public static function CreateGradableItem($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("CourseContentID"),$output)){
            return false;
        }
        $parameters["CreatedBy"]=Info::getCurrentUser()->getUserID();
        $parameters["CreatedOn"]=date('Y-m-d H:i:s');

        $parameters=array_intersect_key($parameters,array(
            "AnswerableGroupID"=>true,
            "CreatedOn"=>true,
            "CreatedBy"=>true,
            "Description"=>true,
            "CourseContentID"=>true
        ));
        /*******************************************************************/
        $AnswerableGroupID=Info::PerformInsert("AnswerableQuestionsGroups",$parameters);

        /*******************************************************************/
        return self::GetGradableItem($AnswerableGroupID,array(),$output);
    }
    public static function UpdateAnswerableQuestionGroup($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array('AnswerableGroupID'),$output)){
            return false;
        }

        $updating=array_intersect_key($parameters,array(
            /* "AnswerableGroupID"=>true, */
            /* "CreatedOn"=>true, */
            /* "CreatedBy"=>true, */
            /* "UserID"=>true, */
            "Category"=>true
            /* "CourseContentID"=>true, */
            /* "SetGrade"=>true */ //TODO Wanted this to work, but database is not set to handle it
            /* "Grade"=>true, */
            /* "PointsEarned"=>true */,
            /* "PointsWorth"=>true */));

        $where=array_intersect_key($parameters,array(
            "AnswerableGroupID"=>true
            /* "CreatedOn"=>true, */
            /* "CreatedBy"=>true, */
            /* "UserID"=>true */
            /* "Category"=>true, */
            /* "CourseContentID"=>true, */
            /* "SetGrade"=>true */
            /* "Grade"=>true, */
            /* "PointsEarned"=>true */,
            /* "PointsWorth"=>true */));

        Info::PerformUpdate("AnswerableQuestionsGroups",$where,$updating);
        $output["results"]=array("status"=>true);
        return true;

    }

    public static function GetAllAnswerableQuestionGroups($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        if(Info::LoginService()->IsAuthorized(Roles::$STUDENT)){
            $parameters["UHID"]=Info::getCurrentUser()->getUHID();
        }

        $SectionUsers_params= array_intersect_key($parameters,SectionUsers::getColumns());
        $User_params = array_intersect_key($parameters,User::getColumns());
        $Section_params=array_intersect_key($parameters,Section::getColumns());
        $Course_params=array_intersect_key($parameters,Course::getColumns());
        $CourseContent_params=array_intersect_key($parameters,CourseContent::getColumns());
        $AnsweringQuestionGroups_params=array_intersect_key($parameters,AnsweringQuestionsGroup::getColumns());
        $AnswerableQuestionGroups_params=array_intersect_key($parameters,AnswerableQuestionsGroup::getColumns());
        $AnsweredQuestions_params=array_intersect_key($parameters,AnsweredQuestion::getColumns());
        $AnswerableQuestions_params=array_intersect_key($parameters,AnswerableQuestion::getColumns());




        /*******************************************************************/
        /* Users                                                           */
        /*******************************************************************/
        Info::FancyFetch("Users",$User_params,Course::getColumns(),"UserID",$Users,$Users_WithKey,$UsersIDs);

        /*******************************************************************/
        /* Users                                                           */
        /*******************************************************************/
        /* $SectionUsers_params["UserID"]=array( "type"=>"IN",  "value"=>$UsersIDs ); */
        Info::FancyFetch("SectionUsers",$SectionUsers_params,SectionUsers::getColumns(),"SectionID",$SectionUsers,$SectionUsers_WithKey,$SectionUsersIDs);

        /*******************************************************************/
        /* Sections                                                        */
        /*******************************************************************/
        $Section_params["SectionID"]=array( "type"=>"IN",  "value"=>$SectionUsersIDs );
        Info::FancyFetch("Sections",$Section_params,Section::getColumns(),array("SectionID", "CourseUniqueID"),$Sections,$Sections_WithKey,$SectionIDs);
        $CourseUniqueIDs=$SectionIDs["CourseUniqueID"];

        $Sections_WithKey=$Sections_WithKey["SectionID"];
        $SectionIDs=$SectionIDs["SectionID"];

        /*******************************************************************/
        /* Courses                                                         */
        /*******************************************************************/
        $Course_params["CourseUniqueID"]=array( "type"=>"IN",  "value"=>$CourseUniqueIDs );
        Info::FancyFetch("Courses",$Course_params,Course::getColumns(),"CourseUniqueID",$Courses,$Courses_WithKey,$CourseIDs);

        /*******************************************************************/
        /* Course Content                                                  */
        /*******************************************************************/
        $CourseContent_params["SectionID"]=array( "type"=>"IN", "value"=>$SectionIDs );
        Info::FancyFetch("CourseContent",$CourseContent_params,CourseContent::getColumns(),array("ContentID","ParentFolderID"),$CourseContents,$CourseContents_WithKey,$CourseContentIDs);

        $CourseContentParents_WithKey=$CourseContents_WithKey["ParentFolderID"];
        $CourseContentParentsIDs=$CourseContentIDs["ParentFolderID"];

        $CourseContents_WithKey=$CourseContents_WithKey["ContentID"];
        $CourseContentIDs=$CourseContentIDs["ContentID"];

        /*******************************************************************/
        /* Parent Course Content                                           */
        /*******************************************************************/
        $CourseContent_params["ContentID"]=array( "type"=>"IN", "value"=>$CourseContentParentsIDs );
        Info::FancyFetch("CourseContent",$CourseContent_params,CourseContent::getColumns(),"ContentID",$ParentCourseContents,$ParentCourseContents_WithKey,$ParentCourseContentIDs);

        /*******************************************************************/
        /* Answerable Question Groups                                      */
        /*******************************************************************/
        $AnswerableQuestionGroups_params["CourseContentID"]=array( "type"=>"IN", "value"=>$CourseContentIDs );
        Info::FancyFetch("AnswerableQuestionsGroups",$AnswerableQuestionGroups_params,AnswerableQuestionsGroup::getColumns(),"AnswerableGroupID",$AnswerableQuestionGroups,$AnswerableQuestionGroups_WithKey,$AnswerableQuestionGroupsIDs);

        /*******************************************************************/
        /* Answering Question Groups                                       */
        /*******************************************************************/
        $AnsweringQuestionGroups_params["AnswerableGroupID"]=array( "type"=>"IN", "value"=>$AnswerableQuestionGroupsIDs );
        Info::FancyFetch("AnsweringQuestionsGroup",$AnswerableQuestions_params,AnsweringQuestionsGroup::getColumns(),"AnsweringGroupID",$AnsweringQuestionGroups,$AnsweringQuestionGroups_WithKey,$AnsweringQuestionGroupsIDs);



        /*******************************************************************/
        /* Answerable Questions                                            */
        /*******************************************************************/
        $AnswerableQuestions_params["AnswerableGroupID"]=$AnswerableQuestionGroupsIDs;
        Info::FancyFetch("AnswerableQuestions",$AnsweringQuestionGroups_params,AnswerableQuestion::getColumns(),array("AnswerableGroupID","AnswerableID"),$AnswerableQuestions,$AnswerableQuestions_WithKey,$AnswerableQuestionsIDs,false,true);

        /*******************************************************************/
        /* Answered Questions                                              */
        /*******************************************************************/
        $AnsweredQuestions_params["AnswerableID"]=$AnswerableQuestionsIDs;
        $AnsweredQuestions_params["AnsweringGroupID"]=$AnsweringQuestionGroupsIDs;
        Info::FancyFetch("AnsweredQuestions",$AnsweredQuestions_params,AnsweredQuestion::getColumns(),array("AnsweringGroupID","AnswerableID"),$AnsweredQuestions,$AnsweredQuestions_WithKey,$AnsweredQuestionsIDs,false,true);

        $_=function($data,$key,$defaultData=null){

            if(!is_array($data)){
                return $defaultData;
            }


            if(!isset($data[$key])){
                return $defaultData;
            }
            return $data[$key];
        };

        /*******************************************************************/
        /* Calculate the Grades                                            */
        /*******************************************************************/
        foreach($AnsweringQuestionGroups_WithKey as $AnsweringGroupID => $AnsweringQuestionGroup)
        {
            $TotalQuestions=0;
            $FinishedQuestions=0;
            $EarnedPoints=0;
            $TotalPoints=0;

            /***************************************************************/
            foreach($_($AnswerableQuestions_WithKey,$AnsweringQuestionGroup["AnswerableGroupID"],array()) as $AnswerableID=>$AnswerableQuestion)
            {
                $AnswerableQuestion=$AnswerableQuestion[0];

                /***********************************************************/
                $AnsweredQuestion=$_($_($_($AnsweredQuestions_WithKey,$AnsweringGroupID),$AnswerableID),0);

                /***********************************************************/
                $CorrectAnswer=$_($AnswerableQuestion,"CorrectAnswer");
                $ChosenAnswer=$_($AnsweredQuestion,"ChosenAnswer");

                /***********************************************************/
                $IsCorrect=$ChosenAnswer==$CorrectAnswer;

                /***********************************************************/
                $TotalPoints+=$_($AnswerableQuestion,"PointsWorth",null);
                $EarnedPoints+=$IsCorrect?$_($AnswerableQuestion,"PointsWorth",null):0;
                $TotalQuestions++;
                $FinishedQuestions+=$AnsweredQuestion==null?0:1;
            }
            $PercentDone=$TotalQuestions==0?0:($FinishedQuestions/$TotalQuestions)*100.0;
            $Grade      =$TotalPoints==0?0:($EarnedPoints/$TotalPoints)*100.0;

            /***************************************************************/
            $AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["TotalQuestions"]=$TotalQuestions;
            $AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["FinishedQuestions"]=$FinishedQuestions;
            $AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["EarnedPoints"]=$EarnedPoints;
            $AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["TotalPoints"]=$TotalPoints;
            $AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["PercentDone"]=$PercentDone;
            $AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["Grade"]=$Grade;
            $AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["StartedBy"]=$_($Users_WithKey,$AnsweringQuestionGroup["StartedBy"]);
            $AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["UserID"]=$AnsweringQuestionGroup["StartedBy"];

            /***************************************************************/
            /* Remove Unauthorized Entries                                 */
            /***************************************************************/
            if($AnsweringQuestionGroups_WithKey[$AnsweringGroupID]["StartedBy"]==null){
                unset($AnsweringQuestionGroups_WithKey[$AnsweringGroupID]);
            }

        }

        // Do this when finished...
        $AnsweringQuestions_AnswerableGroupIDAsKey=APIHelper::setNewKey(array_values($AnsweringQuestionGroups_WithKey),"AnswerableGroupID",true,false);


        $Final=[];

        //Loop Through AnswerableQuestionsGroups
        foreach($AnswerableQuestionGroups_WithKey as $AnswerableGroupID => $AnswerableQuestionGroup)
        {
            $CourseContent=false;
            $Section = false;
            $Course = false;
            if(isset($CourseContents_WithKey[$AnswerableQuestionGroup["CourseContentID"]])){
                $CourseContent=$CourseContents_WithKey[$AnswerableQuestionGroup["CourseContentID"]];
            }

            if($CourseContent && isset($Sections_WithKey[$CourseContent["SectionID"]])){
                $Section=$Sections_WithKey[$CourseContent["SectionID"]];
            }

            if($Section && isset($Courses_WithKey[$Section["CourseUniqueID"]])){
                $Course=$Courses_WithKey[$Section["CourseUniqueID"]];
            }

            $GradesRelativeToGradeID=$_($AnsweringQuestions_AnswerableGroupIDAsKey,$AnswerableGroupID,array());
            $AnswerableQuestionGroup["Grade"]=0;
            foreach($GradesRelativeToGradeID as $key => $submission){
                $AnswerableQuestionGroup["Grade"]=max($submission["Grade"],$AnswerableQuestionGroup["Grade"]);
            }

            /***************************************************************/

            $GradesRelativeToUser=APIHelper::setNewKey($GradesRelativeToGradeID,"UserID",false);
            foreach($GradesRelativeToUser as $userID => $items){

                $finalItem=array(
                    "User"=>$Users_WithKey[$userID],
                    "Submissions"=>$items
                );
                $finalItem["Grade"]=0;
                foreach($items as $key => $item){
                    $finalItem["Grade"]=max($item["Grade"],$finalItem["Grade"]);
                }
                $GradesRelativeToUser[$userID]=$finalItem;
            }


            foreach($Users_WithKey as $UserID => $User){
                if($User["Role"]!="Student"){
                    continue;
                }
                if(!isset($GradesRelativeToUser[$UserID])){
                    $GradesRelativeToUser[$UserID]=array(
                        "User"=>$User,
                        "Submissions"=>array()
                    );
                }
            }


            $Object=$AnswerableQuestionGroup;
            $Object["CourseContent"]=$CourseContent;
            $Object["Section"]=$Section;
            $Object["Course"]=$Course;
            $Object["Submissions"]=$GradesRelativeToGradeID;
            if(Info::LoginService()->IsAuthorized(Roles::$STAFF)){
                $Object["UserSubmissions"]=$GradesRelativeToUser;
            }


            $Final[]=$Object;
        }

        $output["results"]=$Final;
        return true;

        /*******************************************************************/
        /* Course Content                                                  */
        /*******************************************************************/
        $CourseContent_params["SectionID"]=array(
            "type"=>"IN",
            "value"=>$SectionIDs
        );
        $CourseContents=APIHelper::QuickFetch(
            "CourseContent",
            $CourseContent_params,
            CourseContent::getColumns(),
            function($data){
                return $data->getArrayCopy();
            }
        )["results"];
        $CourseContents_WithKey=APIHelper::setNewKey($CourseContents,"ContentID",true,true);
        $CourseContents=array_keys($CourseContents_WithKey);






        $final=
            array(
                "AnswerableGroupID"=>true,
                "CreatedOn"=>true,
                "CreatedBy"=>true,
                "SectionID"=>true,
                "UserID"=>true,
                "Category"=>true,
                "CourseContentID"=>true,
                "Description"=>true,
                "SetGrade"=>true,
                "Grade"=>true,
                "PointsEarned"=>true,
                "PointsWort"=>true,
                "Course_CourseUniqueID"=>true,
                "Course_CourseName"=>true,
                "Course_CourseCategory"=>true,
                "Course_Setup"=>true,
                "Course_CourseID"=>true,
                "Course_Description"=>true,
                "Course_CourseStatus"=>true,
                "Section_SectionID"=>true,
                "Section_SectionNumber"=>true,
                "Section_StartDate"=>true,
                "Section_EndDate"=>true,
                "Section_Location"=>true,
                "Section_TextBookInformation"=>true,
                "Section_MainCourseContentID"=>true,
                "Section_CreatedBy"=>true,
                "SectionUsers_AssignedBy"=>true,
                "User_UserID"=>true,
                "User_FirstName"=>true,
                "User_LastName"=>true,
                "User_Email"=>true,
                "User_PhoneNumber"=>true,
                "User_UserName"=>true,
                "CUser_Role"=>true,
                "User_UHID"=>true,
                "User_isActive"=>true,
                "CourseContent_ContentID"=>true,
                "CourseContent_CourseContentNumber"=>true,
                "CourseContent_SectionID"=>true,
                "CourseContent_Name"=>true,
                "CourseContent_URL"=>true,
                "CourseContent_Description"=>true,
                "CourseContent_ParentFolderID"=>true,
                "CourseContent_RootContentID"=>true,
                "CourseContent_Depth"=>true,
                "CourseContent_Type"=>true,
                "CourseContent_Properties"=>true,
                "CourseContent_Gradable"=>true,
                "CourseContent_CreatedBy"=>true,
                "CourseContent_RolesVisible"=>true);





        return true;



    }
    public static function GetAnsweringItem($id, $parameters, &$output)
    {
        $answerableGroupID=Info::PerformGet("AnsweringQuestionsGroup",array(
            "AnsweringGroupID"=>$id
        ),null,function($data){
           return $data["AnswerableGroupID"];
        });

        if(count($answerableGroupID)==0){
            return null;
        }
        $parameters["AnsweringGroupID"]=$id;
        return self::GetGradableItem($answerableGroupID[0],$parameters ,$output);
    }
    public static function GetGradableItem($id, $parameters, &$output)
    {
        /*******************************************************************/
        $gradableGroup=APIHelper::QuickFetch(
            "AnswerableQuestionsGroups",
            array( "AnswerableGroupID"=>$id ),
            array( "AnswerableGroupID"=>true ),
            function($item){
                $group=new AnswerableQuestionsGroup();
                $group->exchangeArray($item);
                return $group->getData();
            })["results"];

        /*******************************************************************/
        if(count($gradableGroup)==0){
            $output["errors"][]="No Gradable Items with id $id";
            return false;
        }
        $gradableGroup=$gradableGroup[0];



        /********************************************************************/
        /* Get the Answered Questions                                       */
        /********************************************************************/

        $filtersForAnswers=array();
        $filtersForAnswers["AnswerableGroupID"]=$id;
        $filtersForAnswers=array_merge($filtersForAnswers,$parameters);
        if(isset($parameters["UserID"])){
            $filtersForAnswers["UserID"]=$parameters["UserID"];
        }
        if(!self::getAnsweredQuestions($filtersForAnswers,$output)){
            $output["errors"][]="Getting Answered Qustions failed";
            return false;
        }
        $finalAssessment["answers"]=$output["results"];


        $newAnswers=$finalAssessment["answers"];

        $answerStatus=array();

        /*******************************************************************/
        /* Build the status question                                       */
        /*******************************************************************/
        $ifAnsweredAllRight=0;
        $numFinished=0;
        $numNotFinished=0;
        $totalPoints=0;
        $earnedPoints=0;
        foreach($newAnswers as $index=>$newAnswer){
            $totalPoints+=($newAnswer["PointsWorth"]);

            if($newAnswer["Locked"])
            {
                $answerStatus[]="LOCKED";
                $numFinished++;
                if($newAnswer["IsCorrect"]) {
                    $earnedPoints += ($newAnswer["PointsWorth"]);
                }
                continue;
            }


            if($newAnswer["Attempts"]==0)
            {
                $numNotFinished++;
                $answerStatus[]="UNSEEN";
                $ifAnsweredAllRight+=$newAnswer["PointsWorth"];
                continue;
            }
            $numFinished++;
            $answerStatus[]="SEEN";
        }

        if($numFinished+$numNotFinished==0){
            $gradableGroup["Finished"]=0;
            $gradableGroup["RelativeGrade"]=0;
            $gradableGroup["MaxPossibleScore"]=0;
            $gradableGroup["AveragePossibleScore"]=0;
            $gradableGroup["MinPossibleScore"]=0;
        }
        else {
            $gradableGroup["Finished"] = ($numFinished / ($numFinished + $numNotFinished)) * 100;
            $gradableGroup["RelativeGrade"] = ((($earnedPoints) + $ifAnsweredAllRight) / ($totalPoints)) * 100;

            $gradableGroup["MaxPossibleScore"] = ((($earnedPoints) + $ifAnsweredAllRight) / ($totalPoints)) * 100;
            $gradableGroup["AveragePossibleScore"] = ((($earnedPoints) + ($ifAnsweredAllRight * .5)) / ($totalPoints)) * 100;
            $gradableGroup["MinPossibleScore"] = ((($earnedPoints) + ($ifAnsweredAllRight * 0)) / ($totalPoints)) * 100;
        }


        /*******************************************************************/
        $gradableGroup["TotalQuestions"]=count($newAnswers);
        $gradableGroup["QuestionStatus"]=$answerStatus;
        $gradableGroup["Questions"]=$newAnswers;

        /*******************************************************************/
        $output["results"]=$gradableGroup;
        return true;
    }

    /**
     * @param $id
     * @param $parameters
     * @param $output
     * @return bool
     */
    public static function AnswerAQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("html","answer","AnsweringGroupID","AnswerableID"),$output)){
            return false;
        }

        /*******************************************************************/
        $AnsweredHTML=$parameters["html"];
        $Answer=$parameters["answer"];
        $AnswerableID=$id;

        /*******************************************************************/
        $AnswerQuestion_or_ID=$AnswerableID;

        /*******************************************************************/
        if(!self::getAnsweredQuestions($parameters,$temp)){
            $output["errors"][]="Unable to find Answered Question $AnswerQuestion_or_ID";
            return false;
        }
        $AnsweredObject=$temp["results"];
        if(count($AnsweredObject)==0){
            $output["errors"][]="Cant Answer, unable to find the question";
            return false;
        }
        $AnsweredObject=$AnsweredObject[0];
        /*******************************************************************/
        if(!$AnsweredObject["Answerable"]){
            $output["soft-errors"][]="Unable to answer question: its Unanswerable";
            return false;
        }


        if($AnsweredObject["Attempts"]==0){
            Info::PerformInsert("AnsweredQuestions",
                array(
                    "AnswerableID"=>$AnswerQuestion_or_ID,
                    "AnsweredHTML"=>$AnsweredHTML,
                    "ChosenAnswer"=>$Answer,
                    "AnsweringGroupID"=>$parameters["AnsweringGroupID"],
                    "Attempts"=>intval($AnsweredObject["Attempts"])+1
                ));

        }
        else{

            Info::PerformUpdate("AnsweredQuestions",
                array("AnswerableID"=>$AnswerQuestion_or_ID,
                      "AnsweringID" => $parameters["AnsweringID"]),
                array(
                    "AnsweredHTML"=>$AnsweredHTML,
                    "ChosenAnswer"=>$Answer,
                    "Attempts"=>intval($AnsweredObject["Attempts"])+1
                ));
        }


        /*******************************************************************/


        /*******************************************************************/
        return self::getAnsweredQuestion($AnswerableID,array(),$output);
    }

    public static function getAnswerableQuestions($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        $columns=array_map(function() {
            return true;
        },(new AnswerableQuestion())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnswerableQuestions",
            $parameters,
            $columns,
            function($item){
                return $item;
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
    public static function getAnsweredQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        $parameters["AnswerableID"]=$id;
        if(!self::getAnsweredQuestions($parameters,$output)){
            $output["errors"][]="Unable to get the Answered Question $id";
            return false;
        }

        /*******************************************************************/
        if(count($output["results"])==0){
            $output["errors"][]="No Answered Question with id $id";
            return false;
        }

        /*******************************************************************/
        $output["results"]=$output["results"][0];
        return true;

    }
    public static function getAnsweredQuestions($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        $parameters["UserID"]=Info::getCurrentUser()->getUserID();

        /*******************************************************************/
        /* Get Answered Questions                                          */
        /*******************************************************************/
        $answeredQuestionsFilters=array_intersect_key($parameters,array(
            "AnswerableID"=>true,
            "AnsweringGroupID"=>true));
        $answerableQuestionsFilters=array_intersect_key($parameters,array(
            "AnswerableID"=>true,"AnswerableGroupID"=>true));

        if(isset($answeredQuestionsFilters["AnsweringGroupID"])){
            $AnsweringGroupID=$answeredQuestionsFilters["AnsweringGroupID"];
        }

        $AnsweredQuestions=Info::PerformGet("AnsweredQuestions",
            $answeredQuestionsFilters);
        $AnsweredQuestions_WithKey= APIHelper::setNewKey($AnsweredQuestions,"AnswerableID",true,true);
        $AnsweredQuestions_WithAnsweringGroupAsKey= APIHelper::setNewKey($AnsweredQuestions,"AnsweringGroupID",true,true);
        $AnswerableQuestionAnswerableIDs=array_keys($AnsweredQuestions_WithKey);
        $AnsweringGroupIDs=array_keys($AnsweredQuestions_WithAnsweringGroupAsKey);


        /*******************************************************************/
        /* Get Answerable Questions                                        */
        /*******************************************************************/
        $AnswerableQuestions=APIHelper::QuickFetch(
            "AnswerableQuestions",
            $answerableQuestionsFilters,
            array(
                "AnswerableID"=>true,
                "AnswerableGroupID"=>true,
                "QuestionID"=>true,
                "AllowedAttempts"=>true,
                "PointsWorth"=>true,
                "CorrectAnswer"=>true),
            function($data){
                return $data->getArrayCopy();
            }
            )["results"];
        $moveTheKey= APIHelper::setNewKey($AnswerableQuestions,"QuestionID",true,true);
        $QuestionIDs=array_keys($moveTheKey);
        $AnswerableQuestions_WithKey= APIHelper::setNewKey($AnswerableQuestions,"AnswerableID",true,true);


        /*******************************************************************/
        /* Get Answering Group                                             */
        /*******************************************************************/
        $AnsweringQuestionGroup=APIHelper::QuickFetch(
            "AnsweringQuestionsGroup",
            array('filters'=>array("AnsweringGroupID"=>
                array("type"=>"IN",
                    "value"=>$AnsweringGroupIDs)
            )
            ),
            array(
                "AnsweringGroupID"=>true,
                "AnswerableGroupID"=>true,
                "StartOn"=>true,
                "StartedBy"=>true),
            function($data){
                return $data->getArrayCopy();
            })["results"];
        $AnsweringQuestionGroups_WithKey= APIHelper::setNewKey($AnsweringQuestionGroup,"AnsweringGroupID",true,true);

        /*******************************************************************/
        /* Get Answerable Group                                            */
        /*******************************************************************/
        $AnswerableQuestionGroups=APIHelper::QuickFetch(
            "AnswerableQuestionsGroups",
            array('filters'=>array( "AnswerableGroupID"=>
                array("type"=>"IN",
                    "value"=>$AnsweringGroupIDs)
            )
            ),
            array(
                "AnswerableGroupID"=>true,
                "CreatedOn"=>true,
                "CreatedBy"=>true,
                "Category"=>true,
                "CourseContentID"=>true,
                "SetGrade"=>true),
            function($data){
                return $data->getArrayCopy();
            }
        )["results"];
        $AnswerableQuestionGroups_WithKey= APIHelper::setNewKey($AnswerableQuestionGroups,"AnswerableGroupID",true,true);

        /*******************************************************************/
        /* Questions                                                       */
        /*******************************************************************/
        $Questions=APIHelper::QuickFetch(
            "Questions",
            array('filters'=>array("QuestionID"=>
                array("type"=>"IN",
                    "value"=>$QuestionIDs)
            )
            ),
            array(
                "QuestionID"=>true,
                "QuestionTypeID"=>true,
                "SrcDirectory"=>true,
                "Question"=>true,
                "ExpectedAnswer"=>true,
                "CreatedBy"=>true,
                "JSONParameters"=>true
            ),function($data){
                $question=new Question();
                $question->exchangeArray($data);
                return $question->getData();
        })["results"];
        $moveTheKey= APIHelper::setNewKey($Questions,"QuestionID",true,true);
        $QuestionIDs=array_keys($moveTheKey);
        $Questions_WithKey= APIHelper::setNewKey($Questions,"QuestionID",true,true);

        /*******************************************************************/
        /* Get Users                                                       */
        /*******************************************************************/
        $Users=$Questions=APIHelper::QuickFetch(
            "Users",
            array(),
            array(
                "UserID"=>true,
                "FirstName"=>true,
                "LastName"=>true,
                "Email"=>true,
                "PhoneNumber"=>true,
                "UserName"=>true,
                "Password"=>true,
                "Role"=>true,
                "UHID"=>true,
            ),function($data){
            $user=new User();
            $user->exchangeArray($data);
            return $user->getData();
        })["results"];
        $Users_WithKey=APIHelper::setNewKey($Users,"UserID",true,true);

        $_=function($data,$key){
            if(!$data){
                return null;
            }
            if($data==null){
                return null;
            }
            return isset($data[$key])?$data[$key]:null;
        };

        $Final=array();
        $CanSeeAnswer=Info::LoginService()->IsAuthorized(array(Roles::$INSTRUCTOR,Roles::$ADMIN,Roles::$TA));
        foreach($AnswerableQuestions_WithKey as $AnswerableID => $_AnswerableQuestion){
            $AnswerableID=$_AnswerableQuestion["AnswerableID"];
            $AnswerableGroupID=$_AnswerableQuestion["AnswerableGroupID"];

            /***************************************************************/
            $AnsweredQuestion=$_($AnsweredQuestions_WithKey,$AnswerableID);
            $HasAnswer=$AnsweredQuestion!=null;

            $AnswerableQuestionGroup=$_($AnswerableQuestionGroups_WithKey,$AnswerableGroupID);
            $AnsweringQuestionGroup=$HasAnswer && $_($AnsweringQuestionGroups_WithKey,$AnswerableGroupID);
            if(isset($AnsweringGroupID)){
                $AnsweringQuestionGroup=$AnsweringQuestionGroups_WithKey[$AnsweringGroupID];
            }

            $Question=$_($Questions_WithKey,$_AnswerableQuestion["QuestionID"]);
            $User=$_($Users_WithKey,$AnsweringQuestionGroup["StartedBy"]);



            $AnsweringGroupID=isset($AnsweringGroupID)?$AnsweringGroupID:$_($AnsweringQuestionGroup,"AnsweringGroupID");
            /***************************************************************/
            $HasUser=$User!=null;
            $RemainingAttempts=$HasAnswer?$AnsweredQuestion["Attempts"]-$_AnswerableQuestion["AllowedAttempts"]:$_AnswerableQuestion["AllowedAttempts"];
            if($RemainingAttempts==null){
                $RemainingAttempts=1;
            }

            /***************************************************************/
            $test=array(
                "AnswerableID"=>$_($_AnswerableQuestion,"AnswerableID"),
                "AnsweringGroupID"=>$AnsweringGroupID,
                "AnswerableGroupID"=>$_($_AnswerableQuestion,"AnswerableGroupID"),
                "AnsweredHTML"=>$_($AnsweredQuestion,"AnsweredHTML"),
                "AnsweredBy"=>$_($AnsweredQuestion,"AnsweredHTML"),
                "AllowedAttempts"=>$_($_AnswerableQuestion,"AllowedAttempts"),
                "Attempts"=>$_($AnsweredQuestion,"Attempts"),
                "StartedOn"=>$_($AnsweringQuestionGroup,"StartOn"),
                "StartedBy"=>$_($AnsweringQuestionGroup,"StartedBy"),
                "PointsWorth"=>$_($_AnswerableQuestion,"PointsWorth"),
                "CorrectAnswer"=>$_($_AnswerableQuestion,"CorrectAnswer"),
                "HasCorrectAnswer"=>isset($_AnswerableQuestion["CorrectAnswer"]),
                "HasAnswer"=>$HasAnswer,
                "IsCorrect"=>$HasAnswer && ($AnsweredQuestion["ChosenAnswer"]==$_AnswerableQuestion["CorrectAnswer"]),
                "RemainingAttempts"=>$RemainingAttempts,
                "Answerable"=>$RemainingAttempts>0,
                "Locked"=>$RemainingAttempts==0,
                "CreatedOn"=>$_($AnswerableQuestionGroup,"CreatedOn"),
                "CreatedBy"=>$_($AnswerableQuestionGroup,"CreatedBy"),

                "Question"=>array(
                    "QuestionID"=>$_($_AnswerableQuestion,"QuestionID"),
                    "QuestionTypeID"=>$_($Question,"QuestionTypeID"),
                    "Question"=>$_($Question,"Question"),
                    "ExpectedAnswer"=>$CanSeeAnswer && $_($Question,"ExpectedAnswer"),
                    "ChosenAnswer"=>$_($AnsweredQuestion,"ChosenAnswer"),
                    "JSONParameters"=>$_($Question,"JSONParameters")
                ),
                "User"=>array(
                    "FirstName"=>$_($User,"FirstName"),
                    "LastName"=>$_($User,"LastName"),
                    "Email"=>$_($User,"Email"),
                    "PhoneNumber"=>$_($User,"PhoneNumber"),
                    "UserName"=>$_($User,"UserName"),
                    "Role"=>$_($User,"Role"),
                    "UHID"=>$_($User,"UHID")
                )
            );

            $Final[]=$test;

        }

        $output["results"]=$Final;
        return true;

        $data=APIHelper::QuickFetch(
            "AnsweredQuestionsReport",
            $parameters,
            array(
                "AnswerableID"=>true,
                "AnswerableGroupID"=>true,
                "QuestionID"=>true,
                "AnsweredHTML"=>true,
                "AnsweredBy"=>true,
                "AllowedAttempts"=>true,
                "Attempts"=>true,
                "PointsWorth"=>true,
                "CorrectAnswer"=>true,
                "HasCorrectAnswer"=>true,
                "HasAnswer"=>true,
                "IsCorrect"=>true,
                "RemainingAttempts"=>true,
                "Answerable"=>true,
                "CreatedOn"=>true,
                "CreatedBy"=>true,
                "Description"=>true,
                "QuestionTypeID"=>true,
                "SrcDirectory"=>true,
                "Question"=>true,
                "ExpectedAnswer"=>true,
                "JSONParameters"=>true,
                "FirstName"=>true,
                "LastName"=>true,
                "Email"=>true,
                "PhoneNumber"=>true,
                "UserName"=>true,
                "Password"=>true,
                "Role"=>true,
                "UHID"=>true
            ),
            function($item)
            {
                $item = json_decode(json_encode($item),TRUE);

                $item= array_replace_recursive(array_intersect_key(
                            $item,
                            array(
                                "AnswerableID"=>true,
                                "AnswerableGroupID"=>true,
                                "AnsweredHTML"=>true,
                                "AnsweredBy"=>true,
                                "AllowedAttempts"=>true,
                                "Attempts"=>true,
                                "PointsWorth"=>true,
                                "CorrectAnswer"=>true,
                                "ChosenAnswer"=>true,
                                "HasCorrectAnswer"=>true,
                                "HasAnswer"=>true,
                                "IsCorrect"=>true,
                                "RemainingAttempts"=>true,
                                "Answerable"=>true,
                                "CreatedOn"=>true,
                                "CreatedBy"=>true,
                                "Description"=>true,
                                "Locked"=>true,
                                "ExpectedAnswer"=>true
                            )
                        ),array(
                    "Question"=>
                        array_intersect_key(
                            $item,array(
                                "QuestionID"=>true,
                                "QuestionTypeID"=>true,
                                "SrcDirectory"=>true,
                                "Question"=>true,
                                "CreatedBy"=>true,
                                "JSONParameters"=>true)
                        )),
                        array(
                            "Question"=>array(
                                "JSONParameters"=>json_decode($item["JSONParameters"],true))
                        ),
                    array(
                        "Locked"=>$item["Locked"]=="1",
                        "IsCorrect"=>$item["IsCorrect"]=="1",
                        "HasCorrectAnswer"=>$item["HasCorrectAnswer"]=="1",
                        "HasAnswer"=>$item["HasAnswer"]=="1",
                        "Answerable"=>$item["Answerable"]=="1"));
                    if(!Info::LoginService()->IsAuthorized(Roles::$INSTRUCTOR,Roles::$ADMIN,Roles::$TA)){
                        unset($item["CorrectAnswer"]);
                    }
                    return $item;


            },"AnswerableID")["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
    public static function getAnswerableQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);

        /*******************************************************************/
        $columns=array_map(function() {
            return true;
        },(new AnswerableQuestion())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnswerableQuestions",
            array( "AnswerableID"=>$id ),
            $columns,
            function($item){
                return $item;
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
}