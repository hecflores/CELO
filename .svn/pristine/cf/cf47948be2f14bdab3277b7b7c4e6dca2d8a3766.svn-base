<?php
namespace Application\Service;
use Application\Info;
use Application\Roles;
use Zend\Permissions\Rbac\Role;
use Zend\ServiceManager\ServiceManager;

/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 2/21/2017
 * Time: 10:25 AM
 */
class LoginService
{
    protected $sm;
    /***********************************************************************/
    /* User Table
    /***********************************************************************/
    protected $userTable;


    public function getUserTable()
    {
        return Info::UserTable();
    }


    /***********************************************************************/
    /* User SessionTable
    /***********************************************************************/
    protected $userSessionTable;


    public function getUserSessionTable()
    {
        return Info::UserSessionTable();
    }


    /***********************************************************************/


    public function __construct(ServiceManager $sm)
    {
        $this->sm = $sm;
    }



    public function GetCurrentUser()
    {
        $role=Roles::GetRole();
        if(!$this->IsAuthorized($role))
        {
            header( 'Location: /login' ) ;
            exit();
        }
        $SessionID=$_COOKIE["SessionID"];
        $userSession=$this->getUserSessionTable()->getUserBySessionID($SessionID);

        $user=$this->getUserTable()->getUserById($userSession->getUserID());


        return $user;

    }
    public function GetUserID()
    {
        return $_COOKIE["SessionID"];
    }
    public function SignOut()
    {
        if(!$this->IsAlreadySignedIn()){
            return;
        }

        setcookie("SessionID",null,-1);
        $this->getUserSessionTable()->deleteUserSession($this->GetUserID());

    }

    public function SignIn($UserName, $Password, $Role)
    {
        /*******************************************************************/
        if(($user=$this->getUserTable()->validateUser($UserName,$Password,$Role))!=null)
        {
            $userSesson=$this->getUserSessionTable()->saveNewUserSession($user);
            setcookie("SessionID",$userSesson->getSessionID(),1000000*1000000,"/"); // Set the Cookie to remember you
            return $userSesson;
        }

        /*******************************************************************/
        return null;
    }
    public function IsAlreadySignedIn($role=null)
    {

        /*******************************************************************/
        if(!isset($_COOKIE["SessionID"]))
        {
            return false;
        }

        /*******************************************************************/
        $SessionID=$_COOKIE["SessionID"];
        $session=$this->getUserSessionTable()->getUserBySessionID($SessionID);

        if($session==null){
            return false;
        }
        /*******************************************************************/
        if($role==null){
            return true;
        }
        /*******************************************************************/
        if(is_array($role)){
            foreach($role as $role1){
                 if($session->getRole()==$role1){
                     return true;
                 }
            }
            return false;
        }
        if($session->getRole()!=$role){
            return false;
        }


        return true;
    }
    public function Authorize($role)
    {
        /*******************************************************************/
        if(!isset($_COOKIE["SessionID"]))
        {
            return false;
        }

        /*******************************************************************/
        $SessionID=$_COOKIE["SessionID"];
        $session=$this->getUserSessionTable()->getUserBySessionID($SessionID);

        if($session==null){
            return false;
        }
        /*******************************************************************/
        $isAuthorized=false;
        if($role==null){
            $isAuthorized=true;
        }
        /*******************************************************************/
        else if(is_array($role)){
            foreach($role as $role1){
                if($session->getRole()==$role1){
                    $isAuthorized=true;
                }
            }
        }
        if($session->getRole()==$role){

            $isAuthorized= true;
        }

        if($isAuthorized){
            Roles::SetRole($session->getRole());
            return true;
        }
        header( 'Location: /login' ) ;
        exit();

    }
    public function IsAuthorized($roles)
    {

        return $this->Authorize($roles);


    }
}