<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/27/2017
 * Time: 10:28 PM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\CourseContent;
use Application\Service\APIHelper;

class CourseContentMeatEater
{

    public static function FindAvailableFileName($extension){
        $folder="data/Files";
        $files = glob($folder . "*.$extension");
        $index=count($files);
        while(file_exists("$folder/File$index.$extension")){
            $index++;
        }
        return "$folder/File$index.$extension";
    }
    public static function FindFiles_Copy_Update($data){

        if(isset($data["name"]) &&
            isset($data["type"]) &&
            isset($data["tmp_name"]) &&
            isset($data["error"]) &&
            isset($data["size"]))
        {
            $fileInfo=pathinfo($data["name"]);
            $fileCopingTo=self::FindAvailableFileName($fileInfo["extension"]);
            copy($data["tmp_name"],$fileCopingTo);
            return array("Path"=>$fileCopingTo,"Type"=>$data["type"]);

        }

        $newData=array();
        foreach($data as $key => $value){
            if(!is_array($value)){
                $newData[$key]=$value;
                continue;
            }
            $newData[$key]=self::FindFiles_Copy_Update($value);
        }
        return $newData;
    }
    public static function ConvertJsonToStringJsonFirstPass($data){

        $newData=array();
        foreach($data as $key => $value){

            /***************************************************************/
            if(!is_array($value)){
                $newData[$key]=$value;
                continue;
            }
            /***************************************************************/
            if($key==='UUID'){

                foreach($data["UUID"] as $key2 => $value2){
                    $newData[$key2]=uniqid();
                }
                continue;
            }
            $newData[$key]=self::ConvertJsonToStringJsonFirstPass($value);
        }
        return $newData;
    }
    public static function ConvertJsonToStringJsonSecondPass($data){

        $newData=array();
        foreach($data as $key => $value){

            /***************************************************************/
            if(!is_array($value)){
                $newData[$key]=$value;
                continue;
            }

            /***************************************************************/
            if($key=='Json'){
                foreach($data["Json"] as $key2 => $value2){
                    $newData[$key2]=json_encode($value2);
                }
                continue;
            }
            $newData[$key]=self::ConvertJsonToStringJsonSecondPass($value);
        }
        return $newData;
    }

    public static function BasicTextReplacing($data, $search, $replace, &$bool){

        $newData=array();
        foreach($data as $key => $value){

            /***************************************************************/
            if(!is_array($value)){
                $newData[$key]=$value;
                $replaced=preg_replace($search,$replace,$newData[$key]);
                if($replaced!=$newData[$key]){
                    $bool=true;
                }
                $newData[$key]=$replaced;
                continue;
            }


            $newData[$key]=self::BasicTextReplacing($value,$search,$replace,$bool);
        }
        return $newData;
    }
    /***********************************************************************/
    public static function CreateNewCourseContent($parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
            "Name",
            "Description",
            "ParentFolderID",
            "CreatedBy",
            "SectionID",
            "Type"
        ),$output)){
            return false;
        }

        /***************************************************************/
        /* Change Data Insert Into The Database                        */
        /***************************************************************/
        $data=$parameters;
        $data=self::FindFiles_Copy_Update($data);
        $data=self::ConvertJsonToStringJsonFirstPass($data);
        $data=self::ConvertJsonToStringJsonSecondPass($data);


        /***************************************************************/
        /* Insert Into Database                                        */
        /***************************************************************/
        $id=Info::CourseContentTable()->Insert($data);

        /***************************************************************/
        /* If some Attributes Depended on the ID of the item, then fix */
        /* and Update                                                  */
        /***************************************************************/
        $didSomethingChange=false;
        $data=self::BasicTextReplacing($data, '/__ID__/',"".$id,$didSomethingChange);
        if($didSomethingChange){
            Info::CourseContentTable()->Update($id,$data);
        }

        /***************************************************************/
        $courseContent=Info::CourseContentTable()->getByID($id);

        /***************************************************************/
        /* Needed Setups                                               */
        /***************************************************************/
        $courseContentSetups=array(
            "assessment"=>function($data,$courseContent,$contentId){
                $courseContent=$courseContent->getData();
                Info::AssessmentTable()->CreateNewAssessment(array(

                    "Name"=>$courseContent["Name"],
                    "Type"=>"Normal Assessment",
                    "Properties"=>json_encode($courseContent["Properties"],JSON_FORCE_OBJECT),
                    "Description"=>$courseContent["Description"]
                ),$contentId);
            },
            "magic-points"=>function($data,$courseContent,$contentId){
                $properties=$courseContent->getProperties();
                $rows=intval($properties["GridSize"]["Rows"]);
                $columns=intval($properties["GridSize"]["Columns"]);

                /************************************************************/
                /* Create the gradable item                                 */
                /************************************************************/
                if(!AnsweredQuestionsMeatEater::CreateGradableItem(array(
                    "CourseContentID"=>$contentId,
                    "Description"=>"magic-points: {$courseContent->getDescription()}"),$output)){
                    $output["errors"][]="Unable to create a gradable item";
                    return false;
                }
                $gradableGroup=$output["results"];



                for($row=0;$row<$rows;$row++){
                    for($column=0;$column<$columns;$column++)
                    {
                        $cell=$properties["Grid"][$row][$column];
                        if(isset($cell["QuestionID"]))
                        {
                            /***********************************************/
                            if(!AnsweredQuestionsMeatEater::AddQuestionToGradableItem
                            (
                                array(
                                    "PointsWorth"=>$cell["Weight"],
                                    "Attempts"=>0,
                                    "AllowedAttempts"=>2,
                                    "AnsweredGroupID"=>$gradableGroup["AnsweredGroupID"],
                                    "QuestionID"=>$cell["QuestionID"]
                                ),
                                $output
                            )){
                                $output["errors"][]="Cell($row,$column) was was failed to be added as a gradable item for some reason";
                                continue;
                            }

                            /***********************************************/
                            $answeredInformation=$output["results"];

                            /***********************************************/
                            $properties["Grid"][$row][$column]["AnsweredID"]=$answeredInformation;

                        }
                    }
                }
                $properties=json_encode($properties,JSON_FORCE_OBJECT);

                Info::CourseContentTable()->Update($courseContent->getContentID(),array("Properties"=>$properties));
            }
        );

        /***************************************************************/
        if(isset($courseContentSetups[$data["Type"]])){
            $courseContentSetups[$data["Type"]]($data,$courseContent,$id);
        }

        /***************************************************************/
        return self::GetCourseContent($id,array(),$output);
    }
    /**
     * @param $id
     * @param $parameters
     * @param $output
     * @return bool
     * @throws \Exception
     */
    public static function DeleteCourseContent($id, $parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        if(!self::GetCourseContents(array("ContentID"=>$id),$output)){
            $output["errors"][]="Failed at getting the course content";
            return false;
        }

        /*******************************************************************/
        $courseContent=$output["results"];

        //TODO Add a way to retern a Question to the user
        //TODO this will require the addition of code in the API.js file
        if($courseContent["Type"] == "folder"){

        }

        //TODO Leave for later
        throw new \Exception("Not Implemented yet");

    }

    /**
     * @param $id
     * @param $parameters
     * @param $output
     * @return bool
     */
    public static function GetCourseContent($id, $parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        if(!self::GetCourseContents(array("ContentID"=>$id),$output)){
            $output["errors"][]="Failed at getting the course content";
            return false;
        }

        /*******************************************************************/
        $courseContent=$output["results"];
        if(count($courseContent)==0){

        }

        /*******************************************************************/
        $output["results"]=$courseContent[0];
        return true;
    }
    public static function GetCourseContents($parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        $columns=array_map(function() {
            return true;
        },(new CourseContent())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "CourseContent",
            $parameters,
            $columns,
            function($item)
            {
                $courseContent=new CourseContent();
                $courseContent->exchangeArray($item);
                return $courseContent->getData();
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;


    }
}