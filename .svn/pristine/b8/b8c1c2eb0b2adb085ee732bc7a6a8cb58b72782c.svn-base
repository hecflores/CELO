<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/31/2017
 * Time: 2:38 AM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\Course;
use Application\Model\Section;
use Application\Model\SectionUsers;
use Application\Roles;
use Application\Service\APIHelper;

class CoursesMeatEater
{



    public static function addSectionToCourse($parameters, &$output)
    {
        MeatEater::InitializeOutput($output);
        if (!MeatEater::CheckParameters($parameters, array(
            "CourseUniqueID",
            "SectionNumber"
        ), $output)) {
            return false;
        }

        /*******************************************************************/
        /* First make the Section                                          */
        /*******************************************************************/
        $parameters["CreatedBy"]=Info::getCurrentUser()->getUserID();
        $id=Info::PerformInsert("Sections",$parameters);

        /*******************************************************************/
        /* Get the Course                                                  */
        /*******************************************************************/
        if(!self::getCourse($parameters["CourseUniqueID"],array(),$temp)){
            $output["errors"][]="This makes no sense, no course found";
            return false;
        }
        $course=$temp["results"];

        /*******************************************************************/
        /* Add the Current User to the Section                             */
        /*******************************************************************/
        Info::PerformInsert("SectionUsers",array(
            "SectionID"=>$id,
            "AddedOn"=>date('Y-m-d H:i:s'),
            "AssignedBy"=>Info::getCurrentUser()->getUserID(),
            "UserID"=>Info::getCurrentUser()->getUserID()
        ));

        /*******************************************************************/
        /* Creating Course Content For Section                             */
        /*******************************************************************/
        $courseContentID=Info::PerformInsert("CourseContent",array(
            "SectionID"=>$id,
            "Name"=>$course["CourseCategory"]." ".$course["CourseID"]."(".$parameters["SectionNumber"].")",
            "Description"=>$course["Description"],
            "Type"=>"course",
            "Properties"=>"{'SectionID':'$id'}",
            "Gradable"=>true,
            "Depth"=>0,
            "CreatedBy"=>Info::getCurrentUser()->getUserID()
        ));

        /*******************************************************************/
        /* Needed for traversal                                            */
        /*******************************************************************/
        Info::PerformUpdate("CourseContent",
            array(
                "CourseContentID"=>$courseContentID),
            array(
                "RootContentID"=>$courseContentID
            ));

        /*******************************************************************/
        /* Update the Sections                                             */
        /*******************************************************************/
        Info::PerformUpdate("Sections",
            array(
                "SectionID"=>$id
            ),
             array("MainCourseContentID"=>$courseContentID));

        return self::getCourse($course["CourseUniqueID"],array(),$output);

    }
    public static function createCourse($parameters, &$output)
    {
        MeatEater::InitializeOutput($output);
        if (!MeatEater::CheckParameters($parameters, array(
            "CourseName",
            "CourseCategory",
            "CourseID",
            "Description"
        ), $output)) {
            return false;
        }

        /********************************************************************/
        $parameters["CreatedBy"]=Info::getCurrentUser()->getUserID();
        $parameters["CourseStatus"]="Online";


        /********************************************************************/
        $id=Info::PerformInsert("Courses",$parameters);


        /********************************************************************/
        if(!self::getCourses(array("CourseUniqueID"=>$id),$temp)){
            $output["errors"][]="Unable to get created course";
            return false;
        }

        /********************************************************************/
        $output["results"]=$temp["results"][0];
        return true;


    }
    public static function getCourse($id,$parameters, &$output){
        MeatEater::InitializeOutput($output);
        if (!MeatEater::CheckParameters($parameters, array(), $output)) {
            return false;
        }


        if(!self::getCourses(array("CourseUniqueID"=>$id),$temp)){
            $output["errors"][]="Unable to get created course";
            return false;
        }
        $output["results"]=$temp["results"][0];
        return true;

    }
    public static function getSection($SectionID, $parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        $section=APIHelper::QuickFetch(
            "Sections",
            array("SectionID"=>$SectionID),
            Section::getColumns(),
            function($item)
            {
                $course=new Section();
                $course->exchangeArray($item);
                $data=$course->getData();
                return $data;
            }
        )["results"][0];

        /********************************************************************/
        /* Get the Course                                                   */
        /********************************************************************/
        $course=APIHelper::QuickFetch(
            "Courses",
            array("CourseUniqueID"=>$section["CourseUniqueID"]),
            array("CourseUniqueID"=>true),
            function($item)
            {
                $course=new Course();
                $course->exchangeArray($item);
                return $course->getData();
            }
        )["results"][0];

        /********************************************************************/
        /* Get the Course Content                                           */
        /********************************************************************/
        if(!CourseContentMeatEater::GetCourseContent($section["MainCourseContentID"],array(),$output)){
            $output["errors"][]="Unable to get the Course Content";
            return false;
        }
        $courseContent=$output["results"];

        /********************************************************************/
        /* Build What is needed to get the users                            */
        /********************************************************************/
        $sectionUSers=APIHelper::QuickFetch(
            "SectionUsers",
            array("SectionID"=>$SectionID),
            array("SectionID"=>true),
            function($item)
            {
                $course=new SectionUsers();
                $course->exchangeArray($item);
                $data=$course->getData();
                return $data;
            }
        )["results"];

        /********************************************************************/
        $usersOnSection=array_map(function($item){
            return $item["UserID"];
        },$sectionUSers);

        $users=Info::UserTable()->get(array(
            "filters"=>array(
                "UserID"=>array(
                    "type"=>"IN",
                    "value"=>$usersOnSection
                )
            ),
            "key"=>"Role"
        ))["results"];

        /********************************************************************/
        $section["FullDescription"]=$section["SectionNumber"]."-".$course["CourseCategory"]."".$course["CourseID"]."-".$course["CourseName"];
        $section["Course"]=$course;
        $section["CourseContent"]=$courseContent;
        $section["Users"]=$users;



        $output["results"]=$section;
        return true;



    }

    public static function getCourses($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }
        $parameters["filters"]=isset($parameters["filters"])?$parameters["filters"]:array();

        $parametersForCourses=$parameters;
        $parametersForSections=$parameters;
        if(isset($parameters["filters"])){
            $parametersForCourses["filters"]=array();
            foreach(Course::getColumns() as $course){
                if(isset($parameters["filters"][$course])){
                    $parametersForCourses["filters"][$course]=$parameters["filters"][$course];
                }
            }
            $parametersForSections["filters"]=array();
            foreach(Section::getColumns() as $section){
                if(isset($parameters["filters"][$section])){
                    $parametersForSections["filters"][$section]=$parameters["filters"][$section];
                }
            }
        }


        $courses=APIHelper::QuickFetch(
            "CourseSectionsReport",
            $parameters,
            Course::getColumns(),
            function($item)
            {
                $course=new Course();
                $section=new Section();
                $course->exchangeArray($item);
                $section->exchangeArray($item);
                $data=array(
                    "Course"=>$course->getData(),
                    "Section"=>$section->getData());
                $data["Section"]["urls"]=array
                (
                    "home"=>Roles::GetRoleUrl("section/".$data["Section"]["SectionID"])
                );
                return $data;
            }

        )["results"];
        $sections=array_map(function($item){
            return $item["Section"];
        },$courses);

        $newCourses=array();
        $coursesIndexer=array();

        /********************************************************************/
        foreach($courses as $course) {
            $coursesIndexer[$course["Course"]["CourseUniqueID"]] = $course["Course"];
            $coursesIndexer[$course["Course"]["CourseUniqueID"]]["Sections"]=array();
        }

        /********************************************************************/
        foreach($sections as $section)
        {
            $coursesIndexer[$section["CourseUniqueID"]]["Sections"][]=$section;
        }


        /********************************************************************/
//        foreach($coursesIndexer as $courseIdentifier=>$course) {
//            if(!isset($course[$course["CourseCategory"]])){
//                $newCourses[$course["CourseCategory"]]=array();
//            }
//            if(!isset($course[$course["CourseCategory"]][$course["CourseID"]])){
//                $newCourses[$course["CourseCategory"]][$course["CourseID"]]=array();
//
//                continue;
//            }
//            $settingCourse=$course;
//            $newCourses[$course["CourseCategory"]][$course["CourseID"]][]=$settingCourse;
//
//        }
        foreach($coursesIndexer as $courseIdentifier=>$course) {
            $newCourses[] = $course;
        }


        /********************************************************************/
        $output["results"]=$newCourses;
        return true;


    }
}