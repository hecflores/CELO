<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 4/1/2017
 * Time: 10:10 PM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\AssessmentQuestion;
use Application\Model\Question;
use Application\Model\QuestionType;
use Application\Service\APIHelper;
use QuestionUploader\PublisherQuestionUploader;

class QuestionsMeatEater
{
    public static function UploadQuestions($parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("File"),$output)){
            return false;
        }

        $fileInfo=$parameters["File"]["tmp_name"];
        $uploader=new PublisherQuestionUploader();
        $uploader->Upload($fileInfo);
        $results=$uploader->getResults();

        $questionType=Info::QuestionTypesTable()->get(array("Name"=>"Multiple Choice"))["results"][0];
        $userID=Info::getCurrentUser()->getUserID();
        foreach($results as $question ){
            $saveInfo=array(
                "answers"=>$question["answers"],
                "question"=>$question["display"]
            );

            $saveInfo=array(
                "QuestionTypeID"=>$questionType["QuestionTypeID"],
                "Question"=>$question["question"],
                "ExpectedAnswer"=>$question["answer"],
                "CreatedBy"=>$userID,
                "JSONParameters"=>json_encode($saveInfo,JSON_FORCE_OBJECT),
                "_quick_"=>true
            );


            QuestionsMeatEater::InsertQuestion($saveInfo,$output);
        }
        return true;
    }


    public static function UpdateQuestion($parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("QuestionID"),$output)){
            return false;
        }

        /*******************************************************************/
        $id=$parameters["QuestionID"];
        unset($parameters["QuestionID"]);

        /*******************************************************************/
        if(!self::getQuestion($id,array(),$output)){
            $output["errors"][]="Unable to update $id";
            return false;
        }


        if(isset($parameters["JSONParameters"])){
            if(!is_array($parameters["JSONParameters"])){
                $parameters["JSONParameters"]=json_encode($parameters["JSONParameters"],JSON_FORCE_OBJECT);
            }
        }

        /*******************************************************************/
        if(!Info::PerformUpdate("Questions",array("QuestionID"=>$id),$parameters,$output)){
            $output["errors"][]="Unable to update $id";
            return false;
        }

        /********************************************************************/
        return self::getQuestion($id,array(),$output);
    }
    public static function InsertQuestion($parameters, &$output)
    {
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
            'QuestionTypeID',
            'Question',)
        ,$output)){
            return false;
        }
        $quick=$parameters["_quick_"];
        $parameters=array_intersect_key($parameters, array(
            'QuestionID'=>true,
            'QuestionTypeID'=>true,
            'SrcDirectory'=>true,
            'Question'=>true,
            'ExpectedAnswer'=>true,
            'CreatedBy'=>true,
            'JSONParameters'=>true,
        ));

        /********************************************************************/
        if(isset($parameters["QuestionID"])){
            $parameters["errors"][]="QuestionID is not allowed for adding a question";
            return false;
        }

        /********************************************************************/
        /* For Inserting                                                    */
        /********************************************************************/
        $parameters["CreatedBy"]=Info::getCurrentUser()->getUserID();
        $parameters["JSONParameters"]=isset($parameters["JSONParameters"])?$parameters["JSONParameters"]:"{\"question\":\"{$parameters["Question"]}\"}";
        $questionID=Info::PerformInsert("Questions",$parameters);


        /********************************************************************/
        if($quick){
            $output["results"]="success";
            return true;
        }
        return self::getQuestion($questionID,array(),$output);
    }

    public static function getQuestion($id,$parameters, &$output)
    {
        /*******************************************************************/
        if(!self::getQuestions(array("QuestionID"=>$id),$output)){
            $output["errors"][]="Unable to get the question $id";
            return false;
        }

        /*******************************************************************/
        if(count($output["results"])==0){
            $output["errors"][]="No Question found with $id";
            return false;
        }

        $output["results"]=$output["results"][0];
        return true;

    }
    public static function getQuestions($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        $questions=APIHelper::QuickFetch(
            "QuestionsReport",
            $parameters,
            Question::getColumns(),
            function($item){
                $question=new Question();
                $assessmentQuestion=new AssessmentQuestion();

                $question->exchangeArray($item);
                $assessmentQuestion->exchangeArray($item);
                $data=array_merge($question->getData(),$assessmentQuestion->getData());
                $data["Edit"]="/questions/questions/".$question->getQuestionID();
                return $data;

            })["results"];

        $output["results"]=$questions;
        return true;
    }
}