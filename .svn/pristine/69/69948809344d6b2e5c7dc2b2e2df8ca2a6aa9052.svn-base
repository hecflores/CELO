<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/27/2017
 * Time: 6:37 AM
 */

namespace Application\Service\Meat;


use Application\Info;
use Application\Model\AnswerableQuestion;
use Application\Model\AnswerableQuestionsGroup;
use Application\Model\Question;
use Application\Roles;
use Application\Service\APIHelper;

class AnswerableQuestionsMeatEater
{
    public static function AddQuestionToGradableItem($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(
            "PointsWorth",
            "CorrectAnswer",
            "QuestionID",
            "AnsweredGroupID"),$output)){
            return false;
        }

        $parameters=array_intersect_key($parameters,array(
            "AnsweredGroupID"=>true,
            "QuestionID"=>true,
            "AllowedAttempts"=>true,
            "PointsWorth"=>true,
            "CorrectAnswer"=>true
        ));

        /*******************************************************************/
        $id=Info::PerformInsert("AnswerableQuestions",
            $parameters);

        /*******************************************************************/
        /* Grab the info we just inserted                                  */
        /*******************************************************************/
        $answer=APIHelper::QuickFetch(
            "AnswerableQuestions",
            array( "AnswerableID"=>$id ),
            array( "AnswerableID"=>true ),
            function($item){
                return $item;
            })["results"];

        /*******************************************************************/
        if(count($answer)==0){
            $output["errors"][]="Insert into the Answered Question failed.";
            return false;
        }

        /*******************************************************************/
        $output["results"]=$answer;
        return true;
    }
    public static function CreateGradableItem($parameters, &$output){
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("CourseContentID"),$output)){
            return false;
        }
        $parameters["CreatedBy"]=Info::getCurrentUser()->getUserID();
        $parameters["CreatedOn"]=date('Y-m-d H:i:s');

        $parameters=array_intersect_key($parameters,array(
            "AnsweredGroupID"=>true,
            "CreatedOn"=>true,
            "CreatedBy"=>true,
            "Description"=>true,
            "CourseContentID"=>true
        ));
        /*******************************************************************/
        $answeredGroupID=Info::PerformInsert("AnswerableQuestionsGroups",$parameters);

        /*******************************************************************/
        return self::GetGradableItem($answeredGroupID,array(),$output);
    }

    public static function GetGradableItem($id, $parameters, &$output)
    {
        /*******************************************************************/
        $gradableGroup=APIHelper::QuickFetch(
            "AnswerableQuestionsGroups",
            array( "AnsweredGroupID"=>$id ),
            array( "AnsweredGroupID"=>true ),
            function($item){
                $group=new AnswerableQuestionsGroup();
                $group->exchangeArray($item);
                return $group->getData();
            })["results"];

        /*******************************************************************/
        if(count($gradableGroup)==0){
            $output["errors"][]="No Gradable Items with id $id";
            return false;
        }
        $gradableGroup=$gradableGroup[0];



        /********************************************************************/
        /* Get the Answered Questions                                       */
        /********************************************************************/

        $filtersForAnswers=array();
        $filtersForAnswers["AnsweredGroupID"]=$id;
        if(isset($parameters["UserID"])){
            $filtersForAnswers["UserID"]=$parameters["UserID"];
        }
        if(!self::getAnsweredQuestions($filtersForAnswers,$output)){
            $output["errprs"][]="Getting Answered Qustions failed";
            return false;
        }
        $finalAssessment["answers"]=$output["results"];


        $newAnswers=$finalAssessment["answers"];

        $answerStatus=array();

        /*******************************************************************/
        /* Build the status question                                       */
        /*******************************************************************/
        foreach($newAnswers as $index=>$newAnswer){
            if($newAnswer["Locked"])
            {
                $answerStatus[]="LOCKED";
                continue;
            }
            if($newAnswer["Attempts"]==0)
            {
                $answerStatus[]="UNSEEN";
                continue;
            }
            $answerStatus[]="SEEN";
        }

        /*******************************************************************/
        $gradableGroup["TotalQuestions"]=count($newAnswers);
        $gradableGroup["QuestionStatus"]=$answerStatus;
        $gradableGroup["Questions"]=$newAnswers;

        /*******************************************************************/
        $output["results"]=$gradableGroup;
        return true;
    }

    /**
     * @param $id
     * @param $parameters
     * @param $output
     * @return bool
     */
    public static function AnswerAQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array("html","answer"),$output)){
            return false;
        }

        /*******************************************************************/
        $AnsweredHTML=$parameters["html"];
        $Answer=$parameters["answer"];
        $AnswerableID=$id;

        /*******************************************************************/
        $AnswerQuestion_or_ID=$AnswerableID;

        /*******************************************************************/
        if(!self::getAnsweredQuestion($AnswerQuestion_or_ID,array(
            "UserID"=>Info::getCurrentUser()->getUserID()
        ),$temp)){
            $output["errors"][]="Unable to find Answered Question $AnswerQuestion_or_ID";
            return false;
        }
        $AnsweredObject=$temp["results"];

        /*******************************************************************/
        if(!$AnsweredObject["Answerable"]){
            $output["soft-errors"][]="Unable to answer question: its Unanswerable";
            return false;
        }


        if($AnsweredObject["Attempts"]==0){
            Info::PerformInsert("AnsweredQuestions",
                array(
                    "AnswerableID"=>$AnswerQuestion_or_ID,
                    "AnsweredHTML"=>$AnsweredHTML,
                    "ChosenAnswer"=>$Answer,
                    "Attempts"=>intval($AnsweredObject["Attempts"])+1,
                    "AnsweredBy"=>Info::getCurrentUser()->getUserID(),
                ));

        }
        else{

            Info::PerformUpdate("AnsweredQuestions",
                array("AnswerableID"=>$AnswerQuestion_or_ID,
                      "AnsweredBy" => Info::getCurrentUser()->getUserID()),
                array(
                    "AnsweredHTML"=>$AnsweredHTML,
                    "ChosenAnswer"=>$Answer,
                    "Attempts"=>intval($AnsweredObject["Attempts"])+1
                ));
        }


        /*******************************************************************/


        /*******************************************************************/
        return self::getAnsweredQuestion($AnswerableID,array(),$output);
    }
    public static function getAnswerableQuestions($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        $columns=array_map(function() {
            return true;
        },(new AnswerableQuestion())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnswerableQuestions",
            $parameters,
            $columns,
            function($item){
                return $item;
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
    public static function getAnsweredQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        /*******************************************************************/
        $parameters["AnswerableID"]=$id;
        if(!self::getAnsweredQuestions($parameters,$output)){
            $output["errors"][]="Unable to get the Answered Question $id";
            return false;
        }

        /*******************************************************************/
        if(count($output["results"])==0){
            $output["errors"][]="No Answered Question with id $id";
            return false;
        }

        /*******************************************************************/
        $output["results"]=$output["results"][0];
        return true;

    }
    public static function getAnsweredQuestions($parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);
        if(!MeatEater::CheckParameters($parameters,array(),$output)){
            return false;
        }

        $parameters["UserID"]=Info::getCurrentUser()->getUserID();
        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnsweredQuestionsReport",
            $parameters,
            array(
                "AnswerableID"=>true,
                "AnsweredGroupID"=>true,
                "QuestionID"=>true,
                "AnsweredHTML"=>true,
                "AnsweredBy"=>true,
                "AllowedAttempts"=>true,
                "Attempts"=>true,
                "PointsWorth"=>true,
                "CorrectAnswer"=>true,
                "HasCorrectAnswer"=>true,
                "HasAnswer"=>true,
                "IsCorrect"=>true,
                "RemainingAttempts"=>true,
                "Answerable"=>true,
                "CreatedOn"=>true,
                "CreatedBy"=>true,
                "Description"=>true,
                "QuestionTypeID"=>true,
                "SrcDirectory"=>true,
                "Question"=>true,
                "ExpectedAnswer"=>true,
                "JSONParameters"=>true,
                "FirstName"=>true,
                "LastName"=>true,
                "Email"=>true,
                "PhoneNumber"=>true,
                "UserName"=>true,
                "Password"=>true,
                "Role"=>true,
                "UHID"=>true
            ),
            function($item)
            {
                $item = json_decode(json_encode($item),TRUE);

                $item= array_replace_recursive(array_intersect_key(
                            $item,
                            array(
                                "AnswerableID"=>true,
                                "AnsweredGroupID"=>true,
                                "AnsweredHTML"=>true,
                                "AnsweredBy"=>true,
                                "AllowedAttempts"=>true,
                                "Attempts"=>true,
                                "PointsWorth"=>true,
                                "CorrectAnswer"=>true,
                                "ChosenAnswer"=>true,
                                "HasCorrectAnswer"=>true,
                                "HasAnswer"=>true,
                                "IsCorrect"=>true,
                                "RemainingAttempts"=>true,
                                "Answerable"=>true,
                                "CreatedOn"=>true,
                                "CreatedBy"=>true,
                                "Description"=>true,
                                "Locked"=>true,
                                "ExpectedAnswer"=>true
                            )
                        ),array(
                    "Question"=>
                        array_intersect_key(
                            $item,array(
                                "QuestionID"=>true,
                                "QuestionTypeID"=>true,
                                "SrcDirectory"=>true,
                                "Question"=>true,
                                "CreatedBy"=>true,
                                "JSONParameters"=>true)
                        )),
                        array(
                            "Question"=>array(
                                "JSONParameters"=>json_decode($item["JSONParameters"],true))
                        ),
                    array(
                        "Locked"=>$item["Locked"]=="1",
                        "IsCorrect"=>$item["IsCorrect"]=="1",
                        "HasCorrectAnswer"=>$item["HasCorrectAnswer"]=="1",
                        "HasAnswer"=>$item["HasAnswer"]=="1",
                        "Answerable"=>$item["Answerable"]=="1"));
                    if(!Info::LoginService()->IsAuthorized(Roles::$INSTRUCTOR,Roles::$ADMIN,Roles::$TA)){
                        unset($item["CorrectAnswer"]);
                    }
                    return $item;


            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
    public static function getAnswerableQuestion($id,$parameters, &$output){
        /*******************************************************************/
        /* Check Variables                                                 */
        /*******************************************************************/
        MeatEater::InitializeOutput($output);

        /*******************************************************************/
        $columns=array_map(function() {
            return true;
        },(new AnswerableQuestion())->getData());

        /*******************************************************************/
        $data=APIHelper::QuickFetch(
            "AnswerableQuestions",
            array( "AnswerableID"=>$id ),
            $columns,
            function($item){
                return $item;
            })["results"];


        /*******************************************************************/
        $output["results"]=$data;
        return true;

    }
}