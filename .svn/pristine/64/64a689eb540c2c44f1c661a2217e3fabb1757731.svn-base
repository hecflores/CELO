<?php echo $this->doctype(); ?>

<html lang="en">
<head>
    <meta charset="utf-8">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <?php echo $this->headTitle()->setSeparator(' - ')->setAutoEscape(false) ?>


    <?php echo $this->headMeta()
        ->appendName('viewport', 'width=device-width, initial-scale=1.0')
        ->appendName("description","Team3oars is a place where young developers from University of Houston express there abilities, ".
            "imaginations and creativity to create a website for a apartment complex. With the direction of Professor Victoria Hilford students ".
            "are directed to create website like this one with the use of HTML, CSS, XML, Javascript, and Server Side Code like ".
            "PHP and MySql database. Come check it out and you will be amazed")
        ->appendName("keywords","University,Houston,developers,Team3oars,HTML,CSS,XML,JavaScript,PHP,MySql,database,Victoria,Hilford,students,apartment,complex,young")
        ->appendName("author","Hector Flores, William Nguyen, Elizabeth Pham, Ryan Long, Narciso Diaz, David Jimenez")
        ->appendHttpEquiv('X-UA-Compatible', 'IE=edge')
    ?>

    <!-- Le styles -->
    <?php echo $this->headLink(array('rel' => 'shortcut icon', 'type' => 'image/vnd.microsoft.icon', 'href' => $this->basePath() . '/img/favicon.ico'))

        ->prependStylesheet($this->basePath('css/style.css'))
        ->prependStylesheet($this->basePath('css/bootstrap-from-site.css'))
        ->prependStylesheet($this->basePath('css/bootstrap.css'))
        ->prependStylesheet($this->basePath('css/bootstrap-glyphicons-master/css/bootstrap.icon-large.min.css'))
        //->prependStylesheet($this->basePath('vendor/foundation-6/css/foundation.css'))
        //->appendStylesheet($this->basePath('css/SpacialFormats.css'))
        //->appendStylesheet($this->basePath('css/CustomFormatings.css'))
        ->appendStylesheet($this->basePath('css/loader-master/loaders.css'))
        ->appendStylesheet('https://fonts.googleapis.com/css?family=Poiret+One')
        ->appendStylesheet('https://fonts.googleapis.com/css?family=Poiret+One')
        ->appendStylesheet('https://fonts.googleapis.com/css?family=Poiret+One')
        ->appendStylesheet($this->basePath('vendor/codemirror-5.24.2/lib/codemirror.css'))
        ->appendStylesheet($this->basePath('vendor/CodeFlask.js/test/lib/prism.min.css'))
        ->appendStylesheet($this->basePath('vendor/CodeFlask.js/src/codeflask.css'))
        ->appendStylesheet($this->basePath('css/celo-uh-theme.css'))
        ->appendStylesheet($this->basePath('css/slack/slack-fonts.css'))
        ->appendStylesheet($this->basePath("vendor/highligt/styles/agate.css"))

    //->appendStylesheet($this->basePath('client/themes/default/jquery.phpfreechat.min.css'));
    //->appendStylesheet("http://chapulinhouston.com/css/Team3oars.css")?>

    <!-- Scripts -->
    <?php $this->headScript()
        ->prependFile($this->basePath('js/bootstrap.min.js'))
        ->prependFile($this->basePath('js/jquery.min.js'))
        ->prependFile($this->basePath('js/respond.min.js'), 'text/javascript', array('conditional' => 'lt IE 9',))
        ->prependFile($this->basePath('js/html5shiv.min.js'),   'text/javascript', array('conditional' => 'lt IE 9',))
        ->appendFile($this->basePath('js/ajaxForm.min.js'),   'text/javascript')
        ->appendFile($this->basePath('js/jquery.waypoints.min.js'),   'text/javascript')
        ->appendFile($this->basePath('js/Snap.svg-0.4.1/dist/snap.svg.js'),   'text/javascript')
        ->appendFile($this->basePath('vendor/codemirror-5.24.2/lib/codemirror.js'),   'text/javascript')
        ->appendFile($this->basePath('vendor/codemirror-5.24.2/addon/edit/matchbrackets.js'))
        ->appendFile($this->basePath('vendor/codemirror-5.24.2/addon/comment/continuecomment.js'))
        ->appendFile($this->basePath('vendor/codemirror-5.24.2/addon/comment/comment.js'))
        ->appendFile($this->basePath('vendor/codemirror-5.24.2/mode/javascript/javascript.js'))
        ->appendFile($this->basePath('vendor/CodeFlask.js/test/lib/prism.min.js'))
        ->appendFile($this->basePath('vendor/CodeFlask.js/src/codeflask.js'))
        ->appendFile($this->basePath('js/jquery.bubble.text.js'));

        $this->headScript()->appendFile($this->basePath("js/MyLibaries/Libaries.js"));
        $this->headScript()->appendFile($this->basePath("js/MyLibaries/EventHandler.js"));
    $this->headScript()->appendFile($this->basePath("vendor/highligt/highlight.pack.js"));


    foreach(glob(__DIR__.'/../../../../public/js/MyLibaries/*.js') as $file)
    {

        $fileName=basename($file);
        if($fileName=="Libaries.js" || $fileName=='EventHandler.js'){
            continue;
        }
        $this->headScript()->appendFile($this->basePath("js/MyLibaries/$fileName"));
    }
    $this->headScript()->appendFile($this->basePath('questions/library'));
    ?>



    <?php echo $this->headScript();
    ?> <script>hljs.initHighlightingOnLoad();</script> <?php
        //->appendFile(js/MyPlugins.js'),   'text/javascript')
        //->appendFile("../client/jquery.phpfreechat.min.js");
    ; ?>
    <script>

     $.fn.enterkey=function(callback){
         $(this).keyup(function(e){
             if(e.keyCode == 13)
             {
                 $(this).trigger("enterkey",e);
             }
         });
         $(this).on("enterkey",callback);
     };

    var eventManager=new EventHandler();
    </script>
    <script>

        $(document).ready(function(){
            //RefreshMyPlugIns(true);
        });
    </script>
</head>
<body class="">

<!-- Start Google Analytics -->
<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-71909957-5', 'auto');
    ga('send', 'pageview');

</script>
<!-- End Google Analytics -->

<?php echo isset($this->navigation)?$this->navigation:""; ?>

<div class="container ">
    <?php echo $this->content; ?>


</div> <!-- /container -->
<hr>
<footer class="">
    <p>&copy; 2016 - <?php echo date('Y') ?> by CELO. <?php echo $this->translate('All rights reserved.') ?></p>
</footer>
<script>


    //        $(document).ready(function(){
    //            $('[data-toggle="tooltip"]').tooltip();
    //        });




    $(document).ready(function(){



        /*******************************************************************/
        var $ajaxDoneFunction;
        $ajaxDoneFunction=function(){
            var url=$(this).attr("load");
            if(typeof url =="undefined"){
                return;
            }

            var $element=$(this);
            $element.html("<div class='spinner' style='width:50px;height:50px'></div>");
            $.get(url,{ajax:"true"}).done(function(data){
                $element.html(data);

                $element.trigger("created");
                //$element.find(".ajax-call").click($ajaxFunction);
                //$element.find(".ajax-load").each($ajaxDoneFunction);
            });

        };

        /*******************************************************************/
        var $ajaxFunction;
        $ajaxFunction=function($item){

            var url=$(this).attr("src");
            var dropOnto=$(this).attr("drop-onto");
            dropOnto=$(dropOnto);
            dropOnto.attr("loading",url);
            if(!$(this).attr("overlay")){
                $(dropOnto).html("<div class='spinner' style='width:50px;height:50px'></div>");
            }
            else
            {
                $(dropOnto).html($(dropOnto).html()+"<div class='spinner' style='width:50px;height:50px'></div>");
            }

            $.get(url,{ajax:"true"}).done(function(data){
                if(dropOnto.attr("loading")!=url)
                    return;

                $(dropOnto).html(data);

                $(dropOnto).trigger("created");
                //$(dropOnto).find(".ajax-call").click($ajaxFunction);
                //$(dropOnto).find(".ajax-load").each($ajaxDoneFunction);
            });
        };

        /*******************************************************************/
        function $updateTagActions($element){
            var Category=$element.attr("tag-category");
            var ObjectID=$element.attr("tag-refid");
            Api.Tag.get(ObjectID,Category,function(data){

                /***********************************************************/
                /* Build Html of Data                                      */
                /***********************************************************/
                var html="";
                data.forEach(function(item){
                    html+="<span style='' class='tag-action-item'>"+item.TagID+
                            "<span style='' class='deleteTag glyphicon glyphicon-remove'></span>"+
                        "</span>";
                });

                /***********************************************************/
                /* Setup Trigger Element                                   */
                /***********************************************************/
                var $elementTriggeringNew;
                if(data.length==0){
                    html="<h4 style='padding:10px;box-shadow:0px 1px 1px rgba(0,0,0,.7),inset 0px 1px rgba(255,255,255,.9);cursor:pointer;border-radius:10px'>No Tags. Click to add</h4>";
                    $element.html(html);
                    $elementTriggeringNew=$element.find("h4");
                }
                else
                {
                    html="<span style='' class='tag-action-item-new'>New Tag</span>"+html;
                    $element.html(html);
                    $elementTriggeringNew=$element.find(".tag-action-item-new");
                }




                /***********************************************************/
                $elementTriggeringNew.click(function(){
                    var textbox=$("<input class='form-control' style='display:initial;width:auto'>");
                    textbox.enterkey(function(e){
                        var tag=$(this).val();
                        var spinnerElement=$("<span style='position:relative;left:0px;top:0px' class='spinner'>");
                        $(this).replaceWith(spinnerElement);

                        Api.Tag.add(tag,ObjectID,Category,data.length,function(){
                            $updateTagActions($element);
                        });
                    });
                    $(this).replaceWith(textbox);
                    textbox.focus();
                    textbox.blur(function(){
                        $updateTagActions($element);
                    });
                });
            });


        }
        /*******************************************************************/
        function $updateMagicPoints($element){
            var data=JSON.parse($element.attr("data"));
            var answered=JSON.parse($element.attr("answered"));
            var Columns=function(){
                return data.GridSize.Columns;
            };
            var Rows=function(){
                return data.GridSize.Rows;
            };
            var gridContainer=$("<div class='magic-points-board'>").appendTo($element);

            var gap = 20;
            var size = 60;

            gridContainer.empty();
            gridContainer.css({
                width: (Columns() * size) + (Columns() * gap),
                height: (Rows() * size) + (Rows() * gap)
            });
            var SessionID=data["SessionID"];
            var i=0;
            for (var row = 0; row < Rows(); row++) {
                for (var column = 0; column < Columns(); column++) {
                    var isAnswered=false;
                    var indexOfItem=-1;
                    if(answered.find(function(item){
                        indexOfItem++;

                        if(item["AnswerID"]==i){
                            return true;
                        }

                        return false;}))
                    {
                        isAnswered=true;
                    }
                    else
                    {
                        indexOfItem=-1;
                    }

                    var x = (column * size) + (gap * column);
                    var y = (row * size) + (gap * row);
                    var QuestionID=data.Grid[row][column]["ActiveQuestionID"];
                    var Correct=indexOfItem>=0?answered[indexOfItem]["Correct"]:false;

                    var Weight=data.Grid[row][column]["Weight"];
                    var url='/questions/answer/'+SessionID+'/'+i+'/'+QuestionID+'/MagicPoints?PointsWorth='+Weight;
                    var cell=$("<a answered="+isAnswered+" correct="+Correct+"  questionid='"+QuestionID+"' weight='"+data.Grid[row][column]["Weight"]+"' row=" + row + " column=" + column + " class='magic-points-grid-cell' style='width:" + size + "px;height:" + size + "px;top:" + y + "px;left:" + x + "px'>").appendTo(gridContainer);



                    i++;

                }
            }
            $element.on("click",".magic-points-grid-cell",function(){
                var $this=$(this);
                var activeQuestionID=$(this).attr("questionid");
                QuestionWidget.popup.run(activeQuestionID,function(displayer){
                    displayer.on("answered",function(){
                        $this.attr("answered");
                    });
                });
            })

        };

        /*******************************************************************/
        function $dataFormComponents(assessentComponent){

            assessentComponent.ajaxForm(
                {
                    beforeSubmit:function(arr,$form,options)
                    {

                    },
                    success:function(data,statusText,xhr,element)
                    {
                        var api=new GenericAPI();
                        if(api.checkData(data)){
                            if(typeof assessentComponent.attr('api-onsubmited') == 'undefined'){
                                assessentComponent
                                    .find("[api-onsubmited]")
                                    .not(
                                        assessentComponent.find("[api-component]").find('[api-onsubmited'))
                                    .each(function() {
                                        eval($(this).attr("api-onsubmited"));
                                    });
                            }
                            else
                            {
                                eval(assessentComponent.attr("api-onsubmited"));
                            }

                        }


                    }
                }
            );
        }
        function $dataComponents(assessentComponent){

            var allAttributes=assessentComponent.find("[api-attribute]").filter(function()
            {
                return ($(this).children().length)==0;
            });
            allAttributes.$loading_small(true);


            var module=Api[assessentComponent.attr("api-component")];
            var parameters;



            assessentComponent.data("module",module);





            var updatePara=function(data){
                if(typeof data=='undefined'){
                    return;
                }
                var parameters=(typeof assessentComponent.data("parameters")!="undefined")?assessentComponent.data("parameters"):{};
                parameters=$.extend(parameters,data);//assessentComponent.attrRegex(/api-parameter-(.*)/,"$1"));
                assessentComponent.data("parameters",parameters);
            };
            var getPara=function(){
                var parameters=(typeof assessentComponent.data("parameters")!="undefined")?assessentComponent.data("parameters"):{};
                return parameters;
            };

            var updateFunction=function(assessentComponent)
            {


                var fetcher=assessentComponent.attr('api-fetcher');
                updatePara(assessentComponent.attrRegex(/api-parameter-(.*)/,"$1"));
                updatePara(assessentComponent.data('data-parameters'));



                module.fetch(fetcher,getPara(),function(data){
                    allAttributes.$notloading();



                    var globals=function(element, inScope)
                    {

                        if (inScope)
                        {
                            element = element.not('[api-scope]');
                        }

                        /***********************************************************/
                        /* Trigger an Update                                       */
                        /***********************************************************/
                        element
                            .find("[api-trigger-update]")
                            .not(
                                element.find("[api-component]").find('[api-trigger-update]')
                            ).not('[used]').attr('used', true).each(function () {
                            $(this).click(function () {
                                module.update();
                            });

                        });


                        /***********************************************************/
                        /* Special Attributes                                      */
                        /***********************************************************/
                        element
                            .find("[api-render]")
                            .not(
                                element.find("[api-component]").find('[api-render]')
                            ).each(function () {
                            module.render($(this).attr("api-render"), data, $(this));
                        });


                        /***********************************************************/
                        /* Action Links                                            */
                        /***********************************************************/
                        element
                            .find("[api-action]")
                            .not(
                                element.find("[api-component]").find('[api-action]')
                            ).not('[used]').attr('used', true).click(function () {
                            var action = $(this).attr('api-action');
                            module.action(action, $(this), getPara(), function () {
                                console.log(action + ' Finished');
                            });
                        });

                        /***********************************************************/
                        /* Api Filter                                              */
                        /***********************************************************/
                        element
                            .find("[api-filter]")
                            .not(
                                element.find("[api-component]").find('[api-filter]')
                            ).not('[used]').attr('used', true).keyup(function () {
                            var parameters = {};
                            parameters["filters"] = {};
                            parameters["filters"][$(this).attr("api-filter")] = {
                                value: $(this).val(),
                                type: $(this).attrOrDefault('api-filter-type', "")
                            };
                            updatePara(parameters);
                            module.update();
                        });

                        /***********************************************************/
                        /* Property                                                */
                        /***********************************************************/
                        element
                            .find("[api-property]")
                            .not(
                                element.find("[api-component]").find('[api-property]')
                            ).not('[used]').attr('used', true).each(function () {
                            var element = $(this);
                            var live = typeof element.attr('api-property-live') != 'undefined';
                            var property = element.attr("api-property");
                            if (live) {
                                element.keyup(function () {
                                    var parameters = {};
                                    parameters[property] = element.val();
                                    updatePara(parameters);
                                    module.update();
                                });
                            }
                            else {
                                element.keyup(function () {
                                    var parameters = {};
                                    parameters[property] = element.val();
                                    updatePara(parameters);
                                });
                            }

                        });
                    };

                    globals(assessentComponent); // Get it done

                    assessentComponent.fillData("",data,{
                        component:assessentComponent,
                        attributeSelectors:
                            {
                            "[api-data-export='{ID}']":function(element,key,data){
                                if(Array.isArray(data)){
                                    return;
                                }
                                if(typeof data != 'object'){
                                    return;
                                }
                                for(var key in data){
                                    if(typeof data[key] != 'object'){

                                        element.attr('api-data-'+key,data[key]);
                                    }
                                }
                            },
                            "[api-data-export]":function(element,key,data){
                                if(Array.isArray(data)){
                                    return;
                                }
                                if(typeof data != 'object'){
                                    return;
                                }
                                for(var key in data){
                                    if(typeof data[key] != 'object'){

                                        element.attr('api-data-'+key,data[key]);
                                    }
                                }
                            },
                            "[api-target-update='{ID}']":function(element,key,data){
                                var target=element.attr("api-target");
                                var attributeName=element.attr("api-target-update-to");
                                var updateWhen=element.attr("api-target-update-on");

                                if(typeof updateWhen == "undefined"){
                                    updateWhen="now";
                                }
                                if(typeof target == "undefined" || typeof attributeName == "undefined"){
                                    throw new Error("Expected both api-target and api-target-update-to to exists. They didnt")
                                }

                                /*******************************************/
                                if(updateWhen=="now"){
                                    $(target).attr(attributeName,data);
                                }
                                else
                                {
                                    if (typeof element.data('target-update') != "undefined") {
                                        return;

                                    }
                                    element.data('target-update',true);
                                    element[updateWhen](function(){
                                        var finalData=$(target).data("data-parameters");
                                        if(typeof finalData=='undefined'){
                                            finalData={};
                                        }

                                        finalData[attributeName]=data;
                                        $(target).data("data-parameters",finalData);

                                        module.update();
                                    });
                                }


                            },
                            "[api-property='{ID}']":function(element,key,data){
                                var live=typeof element.attr('api-property-live');
                                var property=element.attr("api-property");
                                if(live){
                                    element.keyup(function(){
                                        var parameters={};
                                        parameters[property]=element.val();
                                        updatePara(parameters);
                                        module.update();
                                    });
                                }
                                else
                                {
                                    element.keyup(function(){
                                        var parameters={};
                                        parameters[property]=element.val();
                                        updatePara(parameters);
                                    });
                                }

                            },
                            "[api-scope='{ID}']":function (elements, key, data)
                            {
                                globals(elements,true);
                            },
                            "[api-attribute='{ID}']": function (elements, key, data)
                            {


                                if(typeof elements.attr('api-render-with')!='undefined'){
                                    module.render(elements.attr('api-render-with'),data,elements);
                                    return;
                                }
                                else
                                {
                                    elements.html(data);
                                }

                                /*******************************************/
                                /* Event Based Actions                     */
                                /*******************************************/
                                if (elements.data('parameters')['seen']) {
                                    return;
                                }

                                /*******************************************/
                                elements.click(function(){
                                    module.action(elements.attr('api-action-with'),elements,
                                        $.extend(getPara(),{data:data}),function(){

                                    });
                                });


                            },
                            "[api-attribute-save='{ID}']": function (elements, key, data) {
                                var saveAs = elements.attr("api-attribute-saveas");
                                if (typeof saveAs == 'undefined') {
                                    saveAs = key.replace(/->/, "_");
                                }
                                elements.attr(saveAs, data);

                            },
                            "[api-attribute-link='{ID}']": function (elements, key, data) {
                                if (elements.data('parameters')['seen']) {
                                    return;
                                }

                                if (typeof elements.attr('api-link-new-window') == 'undefined') {
                                    elements.click(function () {
                                        window.location = data;
                                    });
                                }
                                else {
                                    elements.click(function () {
                                        window.open(data);
                                    });
                                }
                            }

                        }
                    });




                });
            };
            module.update(function(){
                updateFunction(assessentComponent);
            });
            updateFunction(assessentComponent);
        }

        /*******************************************************************/
        /* Will go through all elements inside of data to fill in the      */
        /* pieces inside of the element.                                   */
        /*******************************************************************/
        $.fn.fillData=function($attr, data, options){
            if(arguments.length==1){
                return $(this).fillData("",$attr); //$attr = data
            }

            if(typeof options['realID']=="undefined"){

                options['realID']=0;
            }
            options['realID']++;

            var $element=$(this);

            var root=(typeof options["component"]!='undefined')?options["component"]:$element.parents("[action-component]:first");


            var module=root.data("module");
            if($attr=='Children'){
                console.log("ehed");
            }
            if($attr=="Children->Name"){
                console.log("ehed");
            }

            /******************************************************/




            /***************************************************************/
            /* Requires the cloning of elements. Its a list of             */
            /* Items                                                       */
            /***************************************************************/
            if(Array.isArray(data)){

                var $template;
                if($attr.length==0) {
                }
                else if($element.is("[api-attribute='"+$attr+"']")){

                }
                else if($element.find("[api-attribute='"+$attr+"']").length==0){
                    return $element;
                }
                else
                {
                    $temp=$element.find("[api-attribute='"+$attr+"']");
                    if($temp.length>1){
                        $temp=$temp.not($temp.find("[api-attribute='"+$attr+"']"));
                    }
                    var $oldElement=$element;
                    $element=$temp;
                    if($element.length>1){
                        var original=options["realID"];
                        $element.each(function(){
                            options["realID"]=original;
                            $(this).fillData($attr,data,options);
                        });
                        return $oldElement;
                    }
                }

                /*******************************************************/
                /* Newly Visited Element                               */
                /*******************************************************/
                var firstTime=false;
                if(typeof $element.data("template") == "undefined")
                {
                    if(($template=$element.find("[api-array-template]:first")).length!=1){

                        $template=$element.clone(true,true);
                        $template.removeAttr('api-attribute');//We just want that...
                    }
                    else
                    {
                        $template.removeAttr("api-array-template");
                    }

                    $element.data("template",$template); //Save it
                    firstTime=true;
                }
                /*******************************************************/
                else
                {
                    $template=$element.data("template");
                    $element.attr("visited",true);
                }

                var $dropInto=$element.find("[api-drop-here='"+$attr+"']");
                if($dropInto.length==0){
                    $dropInto=$element.find("[api-drop-here='"+root.attr("api-component")+"']");
                    if($dropInto.length==0) {
                        $dropInto = $element;
                    }
                }

                if($dropInto.children("[api-attr-array-index][api-attr-array-for='"+$attr+"']").length!=data.length ){
                    $dropInto.empty();
                }

                /***************************************************/
                /* Clone. Fill. Repeat                             */
                /***************************************************/
                data.forEach(function(item,index){
                    var itemElement;
                    if((itemElement=$dropInto.find("[api-main-id='"+options['realID']+"'][api-attr-array-index='"+index+"'][api-attr-array-for='"+$attr+"']:first")).length==0){
                        itemElement=$template.clone(true);
                        itemElement.attr("api-attr-array-index",index);
                        itemElement.attr("api-attr-array-for",$attr);
                        itemElement.attr('api-main-id',options['realID']);
                        if(typeof itemElement.attr("tabindex") == "undefined"){
                            itemElement.attr("tabindex",index+1);
                        }

                        var valueFoundForData;
                        if((valueFoundForData=itemElement.attrGrabAndLeave('api-save-data-as'))){
                            itemElement.data(valueFoundForData,item)
                        }
                        $dropInto.append(itemElement);
                    }

                    itemElement.fillData($attr,item,options);//Fill Each Item

                });
//                if(firstTime){
//                    $element.fillData($attr,data,options);//Fill Each Item
//                }
                return $element;

            }
            /**************************************************************/
            /* Deal with recursive issues                                 */
            /**************************************************************/
            else if(typeof data == "object")
            {

                /**********************************************************/
                for(var sectorUsed in options.attributeSelectors){
                    if(!options.attributeSelectors.hasOwnProperty(sectorUsed)){
                        continue;
                    }

                    if($element.is(sectorUsed)) {

                        if ($element.length != 0) {
                            if (typeof $element.data('parameters') == 'undefined') {
                                $element.data('parameters', {seen: false, data: data});
                            }
                            options.attributeSelectors[sectorUsed]($element, $attr, data);

                            $element.data('parameters', {seen: true, data: data});

                        }
                    }
                }

                /**********************************************************/
                /* Fill Each Attributes Position                          */
                /**********************************************************/
                for(var key in data)
                {
                    /******************************************************/
                    if (!data.hasOwnProperty(key)) {
                        continue;
                    }

                    /******************************************************/
                    value=data[key]==null?"":data[key];
                    var keyUsed=$attr.length==0?key:$attr+"->"+key;



                    /******************************************************/
                    /* Recursion                                          */
                    /******************************************************/
                    if(typeof value == "object" || Array.isArray(value)){

                        if(typeof $element.attr('api-data-export') !='undefined'){

                        }
                        else
                        {
                            var elementsWithNested=$element.find("[api-attribute='"+keyUsed+"']");
                            if($element.attr('api-render-with')!='undefined'){

                            }
                            if((typeof elementsWithNested.attr('api-render-with') != 'undefined') ||
                                (typeof elementsWithNested.attr('api-data-export') != 'undefined') ){

                            }
                            else
                            {
                                $element.fillData(keyUsed,value,options)
                                continue;
                            }
                        }


                    }

                    /******************************************************/

                    for(var selector in options.attributeSelectors){
                        var realSelector=selector.replace(/\{ID\}/,keyUsed);
                        var elementFound=$element.find(realSelector).andSelf().filter(realSelector);
                        elementFound.not($element.find('[api-component]').find(realSelector));

                        if(elementFound.length!=0){
                            if(typeof elementFound.data('parameters') == 'undefined'){
                                elementFound.data('parameters',{seen:false,data:value});
                            }
                            options.attributeSelectors[selector](elementFound,keyUsed,value);

                            elementFound.data('parameters',{seen:true,data:value});

                        }
                    }

//                    var elementFound=$element.find("[action-attribute='"+keyUsed+"']").html(value)
//                        .attr("action-visited",true);
//
//
//                    /******************************************************/
//                    /* Event Link. If a Attribute has a Url to click      */
//                    /******************************************************/
//                    $element.find("[action-event-attribute='"+keyUsed+"']")
//                        .data('linkUrl',value)
//                        .click(function()
//                        {
//                            window.location=$(this).data("linkUrl");
//                        });
//                    /***********************************************************/
//                    /* Change ID Action                                        */
//                    /***********************************************************/
//                    $element.find("[action-save-value='"+keyUsed+"']").attr(keyUsed.replace(/\-\>/,"_"),value);
//
//
//                    /***********************************************************/
//                    /* Change ID Action                                        */
//                    /***********************************************************/
//                    $element.find("[action-change-id='"+keyUsed+"']").unbind("click").click(function(){
//                        root.attr("action-id",$(this).data("change-id-to"));
//                        module.EventHandler.trigger("updates");
//                    }).data("change-id-to",value);
//
//                    /***********************************************************/
//                    /* Conditional Rendering                                   */
//                    /***********************************************************/
//                    if($element.is("[action-conditional-key='"+keyUsed+"']")){
//                        $element.attr("value-found",value);
//                        $element.children("[action-conditional-value]").each(function(){
//                            if($(this).attr("action-conditional-value")==value){
//                                $(this).css({display:""});
//                            }
//                            else
//                            {
//                                $(this).css({display:"none"});
//                            }
//                        });
//                        //$element.css({display:($element.attr("action-conditional-value")==value)?"":"none"});
//                    }
//                    $element.find("[action-conditional-key='"+keyUsed+"']").each(function(){
//                        $(this).attr("value-found",value);
//                        $(this).children("[action-conditional-value]").each(function(){
//                            if($(this).attr("action-conditional-value")==value){
//                                $(this).css({display:""});
//                            }
//                            else
//                            {
//                                $(this).css({display:"none"});
//                            }
//                        });
//                    });
                }

                return $element;
            }



            throw new Error("Expecting some form of object or array, received string...$.fn.fillData");
        };
        function $dataComponentArray(assessentComponent){

            /***************************************************************/
            /* Template for the items                                      */
            /***************************************************************/
            var template=assessentComponent.find("[action-template]");
            var templateHtml=template.html();
            template.remove();

            /***************************************************************/

            var module=Api[assessentComponent.attr("action-component-array")];

            /***************************************************************/
            var updateFunction=function(assessentComponent){
                module.getAll(function(data){
                    assessentComponent.$notloading();

                    assessentComponent.fillData(data);
//                    /*******************************************************/
//                    /* Go through the data items and build it              */
//                    /*******************************************************/
//                    var index=-1; // The index of the item
//
//                    /*******************************************************/
//                    data.forEach(function(dataItem)
//                    {
//                        index+=1;
//
//                        /***************************************************/
//                        var item=assessentComponent.find("[action-component-array-item='"+index+"']");
//                        if(item.length==0){
//                            item=$("<div>").attr("action-component-array-item",index).html(templateHtml);
//                            assessentComponent.append(item);
//                        }
//
//
//
//                        /***************************************************/
//                        /* Data Attributes                                 */
//                        /***************************************************/
//                        var scanner;
//                        scanner=function($attr,input){
//                            for(var key in input)
//                            {
//                                value=input[key];
//                                if(value==null){
//                                    value="";
//                                }
//
//                                key=$attr.length==0?key:$attr+"->"+key;
//                                if(typeof value == "object"){
//                                    scanner(key,value);
//                                }
//                                else if(typeof value == "array"){
//
//                                }
//
//
//
//                            }
//                        };
//                        scanner("",dataItem);
//
//
//
//                        /***************************************************/
//                        /* Special Attributes                              */
//                        /***************************************************/
//                        item.find("[action-special-attribute]").each(function(){
//                            //$(this).empty();
//                            module.specialAtt[$(this).attr("action-special-attribute")]($(this),data,id);
//                        });
//
//                        /***************************************************/
//                        /* Action Links                                    */
//                        /***************************************************/
//                        item.find("[action-event]").unbind("click").click(function(){
//                            module.events[$(this).attr("action-event")](id);
//                        });
//                    });
                });
            };
            module.EventHandler.on("updates",function(){
                updateFunction(assessentComponent);
            });
            updateFunction(assessentComponent);

        }


        /*******************************************************************/
        $(document).on("created","div,body",function(){
            $(this).find(".ajax-call:not([loaded])").attr("loaded",true).click($ajaxFunction);
            $(this).find(".ajax-load:not([loaded])").attr("loaded",true).each($ajaxDoneFunction);
            $(this).find(".tag-action:not([loaded])").attr("loaded",true)
                .each(function(){$updateTagActions($(this));});
            $(this).find(".magic-points-action:not([loaded])").attr("loaded",true)
                .each(function(){$updateMagicPoints($(this));});

            $(this).find("[api-component]:not([loaded])").attr("loaded",true)
                .each(function(){$dataComponents($(this));});

            $(this).find("[api-form]:not([loaded])").attr("loaded",true)
                .each(function(){$dataFormComponents($(this));});

            $(this).find("[action-component-array]:not([loaded])").attr("loaded",true)
                .each(function(){$dataComponentArray($(this));});



        });

        /*******************************************************************/
        $("body").trigger("created");
    })
</script>
<?php echo $this->inlineScript() ?>
<div role="<?php  echo isset($Role)?$Role:""; ?>" class="background-image"></div>
</body>

</html>
