<?php
/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 2/21/2017
 * Time: 9:47 AM
 */
use Application\Info;
use Application\Roles;

$user=Info::getCurrentUser();
//$sectionsEnrolled=Info::SectionUsersTable()->getSectionsForUser($user);


?>

<?php  if(Info::LoginService()->IsAuthorized(array(Roles::$INSTRUCTOR,Roles::$ADMIN))) { ?>
    <div api-component="Courses" api-fetcher="dumby" class="modal fade" id="create-new-course-modal" tabindex="-1" role="dialog" aria-labelledby="create-new-course-modal-label" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="create-new-course-modal-label">Create New Course</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="courseCategory">Course Category</label>
                        <input api-property="CourseCategory"  name="CourseCategory" type="text" class="form-control" id="courseCategory" aria-describedby="courseCategoryHelp" placeholder="Course Subject">
                        <small id="courseCategoryHelp" class="form-text text-muted">Example COSC, GEOL... Ect</small>
                    </div>
                    <div class="form-group">
                        <label for="courseID">Course ID</label>
                        <input api-property="CourseID"  name="CourseID" type="text" class="form-control" id="courseID" aria-describedby="courseIDHelp" placeholder="Course ID">
                        <small id="courseIDHelp" class="form-text text-muted">Example 1234, 1232... Ect</small>
                    </div>
                    <div class="form-group">
                        <label for="courseName">Course Name</label>
                        <textarea api-property="CourseName"  name="CourseName" class="form-control" id="courseName" aria-describedby="courseNameHelp" placeholder="Course Name"></textarea>
                        <small id="courseNameHelp" class="form-text text-muted">Course Name...</small>
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea api-property="Description"  name="Description" class="form-control" id="description" aria-describedby="descriptionHelp" placeholder="Description"></textarea>
                        <small id="descriptionHelp" class="form-text text-muted">Example 1234, 1232... Ect</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" api-action="create-new-course"  class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </div>

    <div api-component="Courses" api-fetcher="dumby" class="modal fade" id="create-new-section-modal" tabindex="-1" role="dialog" aria-labelledby="create-new-section-modal-label" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="create-new-section-modal-label">Create New Section</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group row">
                        <label for="sectionNumber" class="col-2 col-from-label">sectionNumber</label>
                        <div class="col-10">
                            <input api-property="SectionNumber" name='SectionNumber' id="sectionNumber" class="form-control" type="text" placeholder="Section Number...">
                        </div>
                    </div>



                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" api-action="add-section"  data-dismiss="modal" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </div>
<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#create-new-course-modal">
    New Course
</button>
<?php } ?>


<!-- Modal -->


<div api-component="Courses" api-fetcher="get">

    <div api-array-template tabindex="-1">
        <div class="course-container">
            <div class="course-name-tuple">
                <div api-attribute="CourseCategory"></div>
                <div api-attribute="CourseID"></div>
                <div api-attribute="CourseName"></div>
            </div>
            <div api-attribute="Description"></div>
        </div>
        <div api-attribute="Sections">

            <div class="sections-container" api-drop-here="Sections">
                <div api-attribute-link="Sections->urls->home" api-array-template >
                    <div api-attribute="Sections->SectionNumber" ></div>
                </div>
            </div>
            <div class="sections-control-panel">
                <div class="add-section-container">
                    <button api-trigger-update="Courses" api-target="#create-new-section-modal" api-target-update-on="click" api-target-update="CourseUniqueID" api-target-update-to="CourseUniqueID" type="button" class="btn btn-default" data-toggle="modal" data-target="#create-new-section-modal">Add Section</button>
                </div>
            </div>
        </div>
    </div>
</div>
<?php

return;

 ?>

</style>
<h1>Hello, <?php echo "{$user->getFirstName()} "; ?></h1>

<div class="col-lg-12">
    <div class="col-lg-6">
        <div class="mainScreenHeading">
            <h1>Course List</h1>
            <h4>Enrolled courses as a <span class="label label-primary"><?php echo $user->getRole()  ?></span></h4>
        </div>
        <div class="coursesList list-group col-12">
            <?php
            foreach($sectionsEnrolled as $section){
                $url=Info::Url();
                echo "<a href='$url/section/{$section->getSectionID()}' class='list-group-item list-group-item-action flex-column align-items-start'>";
                echo "<div class='d-flex w-100 justify-content-between'>";

                echo "</div>";
                echo "   <span class='mute'>Instructor(s): ";
                $instructors=Info::SectionUsersTable()->getUsersForSections($section,array("Role"=>$user->getRole()));
                foreach($instructors as $instructor){
                    echo "{$instructor->getFirstName()} {$instructor->LastName};";
                }
                echo "   </span>";
                echo "</a>";
            }

            ?>
        </div>
    </div>
</div>
<div class='col-lg-8'>
    <!-- <svg id="svg"></svg> -->
</div>



<script>
//    function MyEvent(data) {
//        $.extend(this, data);
//    }
//
//    function ProgressChart(containerStr){
//        this.s = Snap(containerStr);
//        this.s.attr({
//            "width":1000,
//            "height":1000,
//            "transform":"translate(0,0)"});
//
//        var $this=this;
//        var infRotate;
//        infRotate=function (el) {
//            el.attr({"transform":'t50,50r0,200,200'});
////            el.animate({"transform":'t50,50r360,200,200'},10000*20,mina.linear,function() {
////                infRotate(el);
////            });
//        };
//
//
//        this._size=200;
//        this.sections=[];
//
//        this._mainGroup=this.s.g().attr({"transform":"translate(50,50)","transform-origin":"50% 50%"});
//
//        infRotate( this._mainGroup);
//
//        this._otherGroup=this.s.g();
//        this._textGroup=this.s.g();
//        this._sectionsGroup=this.s.g();
//        this._glowFilter=this.s.filter(Snap.filter.shadow(0,2,.6));
//        this._mainGroup.append(this._otherGroup);
//        this._mainGroup.append(this._sectionsGroup);
//        this._mainGroup.append(this._textGroup);
//
//        this._sectionsGroup.hover(
//            function(event){
//                if(event.toElement.onmouseover==null){return;}
//                event.toElement.onmouseover();
//
//
//            },function(event){
//                if(event.toElement.onmouseleave==null){return;}
//                event.toElement.onmouseleave();
//
//            });
//        this._sectionsGroup.click(function(event)
//        {
//            if(event.toElement.onmouseclick==null){return;}
//            event.toElement.onmouseclick();
//        });
//
//        this._sectionsGroup.append(
//            this.s.circle(this.size(), this.size(), this.size()).attr({
//                "fill":"rgb(100,206,48)"})
//                .attr({'pointer-events': "none"}));
//
//        this._otherGroup.append(
//            this.s.circle(this.size(), this.size(), this.size()).
//            attr(
//                { 'pointer-events': "none",
//                    "fill":"transparent",
//                    "stroke":"black",
//                    'stroke-width':'40',
//                    "color":"white"
//                }));
//        this._sectionsGroup.append(
//            this.s.circle(this.size(), this.size(), this.size()*.3).
//            attr(
//                {
//                    "filter":this._glowFilter,
//                    'stroke-dasharray':"20, 15",
//                    'pointer-events': "none",
//                    "fill":"transparent",
//                    "stroke":"gray",
//                    'stroke-width':'4',
//                    "color":"white"
//                }));
//    }
//    Tools.inheritsFrom(ProgressChart,EventHandler);
//    ProgressChart.prototype.size=function(){
//        return this._size;
//
//    };
//    ProgressChart.prototype.update=function(){
//        for(var i=0;i<this.sections.length;i++)
//        {
//            if(this.sections[i]._isDeleted){
//                this.sections.splice(i,1);
//                continue;
//            }
//        }
//
//        var angleSize=(Math.PI*2)/this.sections.length;
//        for(var i=0;i<this.sections.length;i++)
//        {
//            this.sections[i].setAngleInfo(angleSize*i,angleSize);
//        }
//
//    };
//    ProgressChart.prototype.getSectionGroup=function(){
//        return this._sectionsGroup;
//    };
//    ProgressChart.prototype.getTextGroup=function(){
//        return this._textGroup;
//    };
//
//    ProgressChart.prototype.attr=function(attrValue){
//        this.s.attr(attrValue);
//    }
//    ProgressChart.prototype.addSection=function(section){
//        section.setSpiderHouse(this);
//
//        this.sections.push(section);
//        this.update();
//    }
//    ProgressChart.prototype.createSection=function(text,percentage){
//        this.addSection(new Section(text,percentage));
//    }
//
//    function Section(text,percentage){
//        this._x1=0;
//        this._y1=0;
//        this._x2=0;
//        this._y2=0;
//        this._angleSize=0;
//        this._angleOffset=0;
//        this.parent=null;
//        this._isDeleted=false;
//        this._text=text;
//        this._percentage=percentage;
//        this._id=Math.random()*100;
//        this._element=null;
//
//        var $this=this;
//
//        $this.on("mouseover",function(){
//            var xMove=Math.cos($this._angleOffset+($this._angleSize/2));
//            var yMove=Math.sin($this._angleOffset+($this._angleSize/2));
//            $this._element.animate({"opacity":".5","path":$this.generatePath($this._percentage*.6)},1500,mina.elastic);
//
//
//
//        });
//        $this.on("mouseleave",function(){
//            $this._element.animate({"opacity":"1","path":$this.generatePath($this._percentage)},1500,mina.elastic);
//        });
//        $this.on("mouseclicked",function(){
//            $this.delete();
//        });
//    }
//    Tools.inheritsFrom(Section,EventHandler);
//    Section.prototype.delete=function(){
//        this._element.onmouseover=null;
//        this._element.mouseleave=null;
//        this._element.mouseclicked=null;
//        this._element.remove();
//        //this._element=null;
//        this._isDeleted=true;
//        this.SpiderHouse().update();
//    };
//    Section.prototype.setSpiderHouse=function(parent){
//        return this.parent=parent;
//    };
//    Section.prototype.SpiderHouse=function(){
//        return this.parent;
//    };
//    Section.prototype.setAngleInfo=function(AngleOffset, AngleSize)
//    {
//        this._angleOffset=AngleOffset;
//        this._angleSize=AngleSize;
//        this.update();
//    }
//    Section.prototype.setText=function($text)
//    {
//        this._text=$text;
//        this.update();
//    }
//    Section.prototype.setPercentage=function($percentage)
//    {
//        this._percentage=$percentage;
//        this.update();
//    }
//    Section.prototype.generatePath=function(percentage)
//    {
//        if(typeof percentage=="undefined"){
//            percentage=this._percentage;
//        }
//
//        var angleSize=this._angleSize;
//        var circleSize = this.SpiderHouse().size();
//
//        /***************************************************************/
//        /* Helpfull Angles                                             */
//        /***************************************************************/
//        var angleAtCenterOfSection=this._angleOffset+(angleSize/2);
//        var angleSizeOfEnd=angleSize*(1.0-percentage)
//
//        /***************************************************************/
//        /* Get points at the outer size of circle                      */
//        /***************************************************************/
//        var angle1=this._angleOffset;
//        var angle2=this._angleOffset+angleSize;
//
//        var x1=Math.cos(angle1)*circleSize + (circleSize);
//        var y1=Math.sin(angle1)*circleSize + (circleSize);
//
//        var x2=Math.cos(angle2)*circleSize + (circleSize);
//        var y2=Math.sin(angle2)*circleSize + (circleSize);
//
//        /***************************************************************/
//        /* Get points on inner side of circel                          */
//        /***************************************************************/
//        var circleSizeInner=circleSize*(1.0-percentage);
//        var angle_inner1=angleAtCenterOfSection-(angleSizeOfEnd/2);
//        var angle_inner2=angleAtCenterOfSection+(angleSizeOfEnd/2);
//
//        var xInner1=Math.cos(angle_inner1)*circleSizeInner + (circleSize);
//        var yInner1=Math.sin(angle_inner1)*circleSizeInner + (circleSize);
//
//        var xInner2=Math.cos(angle_inner2)*circleSizeInner + (circleSize);
//        var yInner2=Math.sin(angle_inner2)*circleSizeInner + (circleSize);
//
//        return "M "+x1+" "+y1+" A "+circleSize     +" "+circleSize     +" "+angle1      +" "+0+" "+1+" "+x2     +" "+y2     +" L "+xInner2+" "+yInner2+
//            " A "+circleSizeInner+" "+circleSizeInner+" "+angle_inner1+" "+0+" "+0+" "+xInner1+" "+yInner1+" L "+x1     +" "+y1;
//    };
//    Section.prototype.update=function()
//    {
//        if(this.parent==null){
//            return;
//        }
//        if(this._element==null) {
//
//
//            //this._textPathElement=this.SpiderHouse().s.path().attr({fill:"transparent"});
//            this._element=this.SpiderHouse().s.path(this.generatePath(0)).attr({"filter":this.SpiderHouse()._glowFilter,"fill":"white"});
//            this._element["info"]=this;
//            this.SpiderHouse().getSectionGroup().append(this._element);
//
//            this._textElement=this.SpiderHouse().s.text(50,50,this._text);
//            this._textElement.attr({"transform":"scale(1,1)","textpath":this._element,"stroke":"white"});
//
//            this._textElement["info"]=this;
//
//            this.SpiderHouse().getTextGroup().append(this._textElement);
//
//            $this=this;
//            this._element.hover(function(){
//                this["info"].trigger("mouseover");
//
//            },function(){
//                this["info"].trigger("mouseleave");
//
//            });
//            this._element.click(function(){
//                this["info"].trigger("mouseclicked");
//            });
//
//        }
//
//        //this._textElement.attr({"text":this._text});
//        //this._textPathElement.attr({fill:"transparent"}).animate({path:this.SpiderHouse().s.path(this.generatePath(0))});
//        var angle=this._angleOffset+this._angleSize/2
//        var xMove=Math.cos(angle)*5;
//        var yMove=Math.sin(angle)*5;
//        this._textElement.animate({transform:"scale("+xMove+","+yMove});
//        this._element.animate({path:this.generatePath()},1500,mina.elastic);
//    };
//    Section.create=function(text,percentage){
//        return new Section(text,percentage);
//    }
//
//
//    //Command	Name	Parameters
//    //M	moveto	(x y)+
//    //Z	closepath	(none)
//    //L	lineto	(x y)+
//    //H	horizontal lineto	x+
//    //V	vertical lineto	y+
//    //C	curveto	(x1 y1 x2 y2 x y)+
//    //S	smooth curveto	(x2 y2 x y)+
//    //Q	quadratic Bézier curveto	(x1 y1 x y)+
//    //T	smooth quadratic Bézier curveto	(x y)+
//    //A	elliptical arc	(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+
//    //R	Catmull-Rom curveto*	x1 y1 (x y)+
//    var spiderHouse=new ProgressChart("#svg");
//    $(document).ready(function(){
//
//        var makeItFunction;
//        makeItFunction=function(count){
//            if(count==0){
//                return;
//            }
////            setTimeout(function(){
////                    spiderHouse.createSection("Account",(Math.random()*.5)+.2);
////                    makeItFunction(count-1);
////                },
////                100);
//        };
//        makeItFunction(10);
//
//        spiderHouse.createSection("Ch1",.7);
//        spiderHouse.createSection("Ch2",.6);
//        spiderHouse.createSection("Ch3",.6);
//        spiderHouse.createSection("Ch4",.7);
//        spiderHouse.createSection("Ch5",.2);
//        spiderHouse.createSection("Ch6",.3);
//        spiderHouse.createSection("Test1",1);
//        spiderHouse.createSection("Test2",.5);
//        spiderHouse.createSection("Test3",.6);
//        spiderHouse.createSection("Quizes",.9);
//        spiderHouse.createSection("Quizes",.4);
//        spiderHouse.createSection("Quizes",.5);
//
//
////        $(".addSection").click(function(){
////
////            spiderHouse.createSection($(".inputNewSection").val(),(Math.random()*.5)+.2);
////        });
//
//    });
//
//
//
//
//
//
//
//

</script>