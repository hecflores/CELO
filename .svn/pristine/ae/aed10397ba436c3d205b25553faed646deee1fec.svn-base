<?php
namespace Questions\Controller;
use Application\Info;
use Application\QuestionTypeManager;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;

/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 2/27/2017
 * Time: 5:40 AM
 */
class QuestionTypeController  extends AbstractActionController
{
    public function onDispatch(MvcEvent $e)
    {

        /*******************************************************************/
        /* User Check                                                      */
        /*******************************************************************/
        Info::LoginService()->Authorize(array("Administrator","Instructor","TA"));

        /*******************************************************************/
        $json=$e->getRouteMatch()->getParam("json");
        if(isset($json)){
            $e->getViewModel()->setTemplate("application/layout/empty");
        }


        $navigation=new ViewModel();
        $navigation->setTemplate("instructor/layout/navigation");


        /*******************************************************************/
        $e->getViewModel()->addChild($navigation,"navigation");

        //e->getViewModel()->setTemplate("visitors/layout");
        $parent=parent::onDispatch($e); // TODO: Change the autogenerated stub


        /*******************************************************************/




        /*******************************************************************/
        return $parent;
    }
    public function indexAction(){
        $view =new ViewModel();
        $view->setTemplate("/questions/edit/question_type/index");
        $view->setVariable("types",Info::QuestionTypesTable()->get());

        return $view;
    }

    public function getQuestionType(){
        $questionID=$this->params()->fromRoute("questionTypeId");
        if(!isset($questionID)){
            QuestionTypeManager::ExitWithError("Question ID was not found in the Route");
            return;
        }
        $returnedQuestion=new QuestionTypeManager($questionID);
        if($questionID!=$returnedQuestion->getQuestionType()->getQuestionTypeID()){
            $this->redirect()->toRoute("questionsHome/questionTypes/questionTypeEditor",array("questionTypeId" => $returnedQuestion->getQuestionType()->getQuestionTypeID()));

            return;
        }
        return $returnedQuestion;
    }
    public function editorAction(){
        $view =new ViewModel();
        $view->setTemplate("questions/edit/question_type/editor");
        $this->getQuestionType();

        return $view;
    }
    public function loadAction(){

        $questionType=$this->getQuestionType();
        $returnData=array(
            "creator"=>$questionType->getDevelopmentCode(),
            "display"=>$questionType->getDeploymentCode()
        );

        return $this->JsonView($returnData);
    }
    public function JsonView($object)
    {
        $view =new ViewModel();
        $view->setTemplate("application/tools/json");

        Info::getEvent()->getViewModel()->setTemplate("layout/empty");

        $view->setVariable("object",$object);
        return $view;
    }
    public function saveAction(){

        $questionType=$this->getQuestionType();
        $content=Info::getBodyJSON();

        if(isset($content["display"]) && isset($content["creator"])){
            $questionType->setDeploymentCode($content["display"]);
            $questionType->setDevelopmentCode($content["creator"]);

            return $this->JsonView(array("success"=>true));
        }
        return $this->JsonView(array("success"=>false,"error"=>"Not all the perameters were there"));




    }
}