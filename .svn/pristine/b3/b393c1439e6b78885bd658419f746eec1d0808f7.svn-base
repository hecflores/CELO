/* DROP TABLE Questions;*/
/*DROP TABLE QuestionTypes;*/
DROP TABLE CourseContent;
DROP TABLE SectionUsers;
DROP TABLE Sections;
DROP TABLE Courses;
DROP TABLE CourseStatus;
DROP TABLE UserSessions;
DROP TABLE Invitation;
DROP TABLE InvitationReasons;
DROP TABLE Users;



/**************************************************************************/
/* Users                                                                  */
/**************************************************************************/
DROP TABLE Users;
CREATE TABLE Users
(
  UserID varchar(36),
  FirstName VARCHAR(200),
  LastName VARCHAR(200),
  Email VARCHAR(200),
  PhoneNumber VARCHAR(200),
  UserName VARCHAR(200) NOT NULL,
  Password VARCHAR(200) NOT NULL,
  Role VARCHAR(50) NOT NULL CHECK(Role IN ('Admin','Instructor','TA','Student')),
  UHID INTEGER(7),
  PRIMARY KEY(UserID,UserName,Role)
);


/**************************************************************************/
/* User Sessions                                                          */
/**************************************************************************/
DROP TABLE UserSessions;
CREATE TABLE UserSessions
(
  SessionID varchar(36),
  UserID varchar(36),
  TimeLastAccessed TIMESTAMP,
  MAC_Address VARCHAR(300),
  Role VARCHAR(50),
  PRIMARY KEY(SessionID),
  FOREIGN KEY(UserID) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE
);
/**************************************************************************/
/* CourseStatus                                                           */
/**************************************************************************/
DROP TABLE CourseStatus;
CREATE TABLE CourseStatus
(
  CourseStatus VARCHAR(200),
  AnyTags VARCHAR(200),
  PRIMARY KEY (CourseStatus)
);

/**************************************************************************/
/* Course                                                                */
/**************************************************************************/
DROP TABLE Courses;
CREATE TABLE Courses
(
  CourseUniqueID BIGINT UNIQUE AUTO_INCREMENT NOT NULL ,
  CourseName VARCHAR(100),
  CourseCategory CHAR(4),
  Setup BOOL,
  CourseID INTEGER,
  Description VARCHAR(500),
  CourseStatus VARCHAR(200),
  CreatedBy VARCHAR(36),
  PRIMARY KEY(CourseUniqueID),
  FOREIGN KEY(CreatedBy) REFERENCES Users(CreatedBy) ,
  FOREIGN KEY(CourseStatus) REFERENCES CourseStatus(CourseStatus)
);


/**************************************************************************/
/* Section                                                                */
/**************************************************************************/
DROP TABLE Sections;
CREATE TABLE Sections
(
  SectionID BIGINT UNIQUE AUTO_INCREMENT NOT NULL ,
  SectionNumber INTEGER,
  StartDate DATETIME,
  EndDate DATETIME,
  Location VARCHAR(200),
  TextBookInformation VARCHAR(500),
  CourseUniqueID BIGINT,
  CreatedBy VARCHAR(36),
  MainCourseContentID BIGINT,

  PRIMARY KEY(SectionID),
  FOREIGN KEY(CourseUniqueID) REFERENCES Courses(CourseUniqueID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(MainCourseContentID) REFERENCES CourseContent(ContentID) ON UPDATE CASCADE ON DELETE CASCADE

);


/**************************************************************************/
/* Section Users                                                          */
/**************************************************************************/
DROP TABLE SectionUsers;
CREATE TABLE SectionUsers
(
  SectionUsersID BIGINT AUTO_INCREMENT,
  SectionID BIGINT,
  AddedOn DATETIME,
  AssignedBy VARCHAR(36),
  UserID VARCHAR(36),
  UHID INT(7),

  PRIMARY KEY(SectionUsersID),
  FOREIGN KEY(SectionID) REFERENCES Sections(SectionID),
  FOREIGN KEY(UserID) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(AssignedBy) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE
);
/**************************************************************************/
/* Invitation Reasons                                                     */
/**************************************************************************/
DROP TABLE InvitationReasons;
CREATE TABLE InvitationReasons
(
  ReasonID VARCHAR(10),
  ReasonString VARCHAR(200),
  RolesExcepted VARCHAR(200),
  PRIMARY KEY (ReasonID)
);

/**************************************************************************/
/* Invitation                                                             */
/**************************************************************************/
DROP TABLE Invitation;
CREATE TABLE Invitation
(
  InvitationID varchar(36),
  Accepted BOOL,
  Viewed BOOL,
  InvitedBy VARCHAR(36),
  Inviting VARCHAR(36),
  ReasonID VARCHAR(10),


  PRIMARY KEY(InvitationID),
  FOREIGN KEY(Inviting) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(InvitedBy) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(ReasonID) REFERENCES InvitationReasons(ReasonID) ON UPDATE CASCADE ON DELETE CASCADE
);
DROP TABLE Tags;
CREATE TABLE Tags(
  TagID  VARCHAR(100),
  ObjectID BIGINT NOT NULL,
  Category VARCHAR(100) NOT NULL CHECK(Category IN ('Assessments','Questions','QuestionTypes','CourseContents')),
  Rank INTEGER,
  PRIMARY KEY(TagID,ObjectID,Category)
);

/**************************************************************************/
/* Section Folders                                                        */
/**************************************************************************/
DROP TABLE CourseContent;
CREATE TABLE CourseContent
(
  ContentID BIGINT NOT NULL AUTO_INCREMENT,
  CourseContentNumber BIGINT ,
  SectionID BIGINT NOT NULL,
  Name VARCHAR(200),
  URL VARCHAR(200),
  Description VARCHAR(1000),
  ParentFolderID BIGINT,
  RootContentID BIGINT,
  Depth INTEGER,
  Type VARCHAR(200),
  Properties TEXT,
  Gradable BOOL,
  CreatedBy VARCHAR(36),
  RolesVisible VARCHAR(200), /* Role1|Role2|Role3 */


  PRIMARY KEY(ContentID),
  FOREIGN KEY(ParentFolderID,SectionID) REFERENCES CourseContent(CourseContentNumber,SectionID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(RootContentID,SectionID) REFERENCES CourseContent(CourseContentNumber,SectionID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(CreatedBy) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(SectionID) REFERENCES Sections(SectionID) ON UPDATE CASCADE ON DELETE CASCADE

);

DROP TABLE CourseContentQuestions(
  ContentID BIGINT NOT NULL AUTO_INCREMENT,
  SectionID BIGINT NOT NULL ,
);

DROP TABLE CourseContentTemplates;
CREATE TABLE CourseContentTemplates (
  TemplateID BIGINT NOT NULL AUTO_INCREMENT,
  ContentID BIGINT NOT NULL ,
  Name VARCHAR(200),
  URL VARCHAR(200),
  Description VARCHAR(1000),
  ParentFolderID BIGINT,
  RootContentID BIGINT,
  Depth INTEGER,
  Type VARCHAR(200),
  Properties TEXT,
  Gradable BOOL,
  CreatedBy VARCHAR(36),
  RolesVisible VARCHAR(200), /* Role1|Role2|Role3 */
  TemplateName VARCHAR(200),
  TemplateNotes TEXT,

  PRIMARY KEY(TemplateID),
  FOREIGN KEY(ParentFolderID) REFERENCES CourseContent(ContentID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(RootContentID) REFERENCES CourseContent(ContentID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(CreatedBy) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE
);
DROP PROCEDURE SaveAsTemplate;
CREATE PROCEDURE SaveAsTemplate(
   _ContentID BIGINT,
   _SectionID BIGINT,
   _NameOfTemplate VARCHAR(200),
   _Notes TEXT
)
  BEGIN
    INSERT INTO CourseContentTemplates
           (ContentID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible, TemplateName, TemplateNotes)
    SELECT ContentID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible, _NameOfTemplate AS TemplateName ,_Notes AS TemplateNotes   FROM CourseContent
      WHERE SectionID=_SectionID;

  END;


/***************************************************************************/
/* Answerable Question Group                                               */
/* Holds the Basic Connections Between a collection of questions           */
/***************************************************************************/
DROP TABLE AnswerableQuestionsGroups;
CREATE TABLE AnswerableQuestionsGroups(
  AnswerableGroupID BIGINT NOT NULL AUTO_INCREMENT ,
  CreatedOn DATETIME,
  CreatedBy VARCHAR(36),
  Category VARCHAR(200),
  CourseContentID BIGINT,
  SetGrade INTEGER,
  PRIMARY KEY(AnswerableGroupID),
  FOREIGN KEY(CourseContentID) REFERENCES CourseContent(CourseContentID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(CreatedBy) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE
  /*, FOREIGN KEY(TypeID) REFERENCES AnswerableQuestionsGroupTypes(GroupID) ON UPDATE CASCADE ON DELETE CASCADE */
);

DROP TABLE AnsweringQuestionsGroup;
CREATE TABLE AnsweringQuestionsGroup(
  AnsweringGroupID BIGINT NOT NULL AUTO_INCREMENT,
  AnswerableGroupID BIGINT,
  StartOn DATETIME,
  StartedBy VARCHAR(36),
  PRIMARY KEY(AnsweringGroupID),
  FOREIGN KEY(StartedBy) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(AnswerableGroupID) REFERENCES AnswerableQuestionsGroups(AnswerableGroupID) ON UPDATE CASCADE ON DELETE CASCADE
);


/***************************************************************************/
/* Answerable Questions                                                    */
/* Falls Under the Answerable Questions Group. Which holds all the info for*/
/* a question that has the ability to be answered.                         */
/***************************************************************************/
DROP TABLE AnswerableQuestions;
CREATE TABLE AnswerableQuestions(
  AnswerableID BIGINT NOT NULL AUTO_INCREMENT ,
  AnswerableGroupID BIGINT,
  QuestionID BIGINT NOT NULL ,
  AllowedAttempts INTEGER,
  PointsWorth INTEGER,
  CorrectAnswer VARCHAR(200),
  PRIMARY KEY(AnswerableID),
  FOREIGN KEY(QuestionID) REFERENCES Questions(QuestionID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(AnswerableGroupID) REFERENCES AnswerableQuestionsGroups(AnswerableGroupID) ON UPDATE CASCADE ON DELETE CASCADE
);

/***************************************************************************/
/* Answered Questions                                                      */
/* Fold Under the Answerable Question. Which holds a particular response to*/
/* a answerable question                                                   */
/***************************************************************************/
DROP TABLE AnsweredQuestions;
CREATE TABLE AnsweredQuestions(
  AnswerableID BIGINT  ,
  AnsweredHTML TEXT,               /* Once the question is answered. The HTML that is showing will be saved */
  Attempts INTEGER,
  ChosenAnswer VARCHAR(200),
  AnsweringGroupID BIGINT,
  PRIMARY KEY(AnswerableID,AnsweringGroupID),
  FOREIGN KEY(AnswerableID) REFERENCES AnswerableQuestions(AnswerableID) ON UPDATE CASCADE ON DELETE CASCADE

);

/***************************************************************************/
/* Course Content Breadcrumb Improving. We will have a trigger to keep     */
/* of children                                                             */
/***************************************************************************/
DROP TABLE CourseContentChildren;
CREATE TABLE CourseContentChildren(
  ContentID BIGINT,
  ChildContentID BIGINT,
  Depth INTEGER
);



DROP VIEW CourseContentBreadcrumbs;
CREATE VIEW CourseContentBreadcrumbs AS
  SELECT
    S2.ContentID,                             /* From Child Table */
    S1.ParentFolderID AS PreviousContentID,
    S1.ContentID AS CurrentContentID,
    S2.ChildContentID,
    S1.SectionID,
    S1.Name,
    S1.URL,
    S1.Description,
    S1.ParentFolderID,
    S1.RootContentID,
    S1.Depth,
    S1.Type,
    S1.Properties,
    S1.Gradable,
    S1.CreatedBy,
    S1.RolesVisible

  FROM CourseContentChildren AS S2
    JOIN CourseContent AS S1 ON S1.CourseContentNumber=S2.ContentID;


/***************************************************************************/
/* Question Types. We don't want to delete this all the time. Very important*/
/***************************************************************************/
# DROP TABLE QuestionTypes
# CREATE TABLE QuestionTypes
# (
#   QuestionTypeID BIGINT NOT NULL AUTO_INCREMENT,
#   SrcDirectory VARCHAR(1000),
#   Name VARCHAR(1000),
#   CreatedBy VARCHAR(36),
#   PRIMARY KEY(QuestionTypeID),
#   FOREIGN KEY(CreatedBy) REFERENCES Users(UserID)
#
# );

/***************************************************************************/
/* Questions. We don't want to delete this all the time. Very important    */
/***************************************************************************/
# DROP TABLE Questions;
# CREATE TABLE Questions
# (
#   QuestionID BIGINT NOT NULL AUTO_INCREMENT,
#   QuestionTypeID BIGINT,
#   SrcDirectory VARCHAR(1000),
#   Question VARCHAR(1000),
#   ExpectedAnswer VARCHAR(1000),
#   CreatedBy VARCHAR(36),
#   JSONParameters TEXT,
#   PRIMARY KEY(QuestionID),
#   FOREIGN KEY (QuestionTypeID) REFERENCES QuestionTypes(QuestionTypeID),
#   FOREIGN KEY(CreatedBy) REFERENCES Users(UserID)
#
# );

/***************************************************************************/
/* Assessments                                                             */
/***************************************************************************/
DROP TABLE Assessments;
CREATE TABLE Assessments(

  AssessmentID BIGINT NOT NULL AUTO_INCREMENT,
  Name VARCHAR(200),
  URL VARCHAR(200),
  Description VARCHAR(1000),
  Type VARCHAR(200),
  Properties TEXT,
  AssociatedCourseContentID BIGINT NOT NULL,
  AnswerableGroupID BIGINT,
  CreatedBy VARCHAR(36),
  Timelimit INTEGER,


  PRIMARY KEY(AssessmentID),
  FOREIGN KEY(AssociatedCourseContentID) REFERENCES CourseContent(ContentID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(AnswerableGroupID) REFERENCES AnswerableQuestionsGroups(AnswerableGroupID)ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(CreatedBy) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE

);

/***************************************************************************/
/* Assessment Questions                                                    */
/***************************************************************************/
DROP TABLE AssessmentQuestions;
CREATE TABLE AssessmentQuestions(
  AssessmentQuestionID BIGINT NOT NULL AUTO_INCREMENT ,
  AssessmentID BIGINT NOT NULL ,
  QuestionID BIGINT NOT NULL ,
  Weight INTEGER,
  AddedBy VARCHAR(36) NOT NULL,

  PRIMARY KEY(AssessmentQuestionID),
  FOREIGN KEY(AssessmentID) REFERENCES Assessments(AssessmentID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(QuestionID) REFERENCES Questions(QuestionID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(AddedBy) REFERENCES Users(AddedBy) ON UPDATE CASCADE ON DELETE CASCADE
);

/***************************************************************************/
/* Running Assessments. The User Instance of an Assessment                 */
/***************************************************************************/
DROP TABLE RunningAssessments;
CREATE TABLE RunningAssessments(
  AnsweredID BIGINT NOT NULL AUTO_INCREMENT,
  AssessmentID BIGINT NOT NULL,
  StartTime DATETIME DEFAULT NULL,
  EndTime DATETIME DEFAULT NULL,
  TotalPoints INTEGER,
  EarnedPoints INTEGER,
  AnsweringBy VARCHAR(36) NOT NULL,
  GradedBy VARCHAR(36),
  AnsweringGroupID BIGINT NOT NULL,


  PRIMARY KEY(AnsweredID),
  FOREIGN KEY(AssessmentID) REFERENCES Assessments(AssessmentID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(AnsweringBy) REFERENCES Users(UserID) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(GradedBy) REFERENCES Users(GradedBy) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(AnsweringGroupID) REFERENCES AnsweringQuestionsGroup(AnsweringGroupID) ON UPDATE CASCADE ON DELETE CASCADE

);


/***************************************************************************/
/* Files                                                                   */
/***************************************************************************/
DROP TABLE Files;
CREATE TABLE Files(
  FileID varchar(36),
  Path VARCHAR(200),
  ContentType VARCHAR(200),
  Name VARCHAR(200),
  CreatedBy VARCHAR(36),
  FOREIGN KEY(CreatedBy) REFERENCES Users(UserID),
  PRIMARY KEY(FileID)
);



/*
DROP TABLE AnswerableQuestionsGroupTypes;
CREATE TABLE AnswerableQuestionsGroupTypes(
  GroupID BIGINT NOT NULL AUTO_INCREMENT ,
  Name VARCHAR(300) NOT NULL,
  AdditionalInformation TEXT NOT NULL,
  BaseGroupID BIGINT NULL,
  PRIMARY KEY(GroupID),
  FOREIGN KEY(BaseGroupID) REFERENCES AnswerableQuestionsGroupTypes(GroupID)
);


INSERT INTO AnswerableQuestionsGroupTypes (Name, AdditionalInformation, BaseGroupID)  VALUES ('Assessment',
                                                                                              'The Basis for Answering Questions in a group',
                                                                                              NULL);
INSERT INTO AnswerableQuestionsGroupTypes (Name, AdditionalInformation, BaseGroupID)  VALUES ('Magic Points',
                                                                                              'A Special Way of answering questions',
                                                                                              NULL);
INSERT INTO AnswerableQuestionsGroupTypes (Name, AdditionalInformation, BaseGroupID)  VALUES ('Quiz',
                                                                                              'A Smaller, less stressfull assessment',
                                                                                              'Assessment');
*/

/***************************************************************************/
/*                     I m p o r t a n t   T r i g g e r s                 */
/***************************************************************************/
DELIMITER //

/***************************************************************************/
/* Course Controller Children Trigger                                      */
/* A way to keep track of who is the child and who is the parent. To make  */
/* sql selects easier and faster                                           */
/***************************************************************************/
DROP TRIGGER CourseContentNumberTracker;
DELIMITER //
CREATE TRIGGER CourseContentNumberTracker
  BEFORE INSERT ON CourseContent
  FOR EACH ROW
    BEGIN
      SET new.RootContentID=0;
      SET new.CourseContentNumber=0;
      if new.ParentFolderID is NOT NULL THEN
          SET new.CourseContentNumber=(SELECT (MAX(S1.CourseContentNumber)+1) FROM CourseContent AS S1 WHERE S1.RootContentID=new.RootContentID);
      ELSE
          SET new.RootContentID=0;
      END IF;
    END//
DELIMITER ;

# CREATE TRIGGER CourseContentChildren
# AFTER INSERT ON CourseContent
# FOR EACH ROW
#   BEGIN
#     DECLARE ParentID BIGINT;
#     DECLARE Depth INTEGER;
#
#     /***********************************************************************/
#     /* Get the Parent Id of this course                                    */
#     /***********************************************************************/
#     SET ParentID = new.ParentFolderID;
#     SET Depth = new.Depth;
#
#     /***********************************************************************/
#     /* Found it so now we will add it to all parents                       */
#     /***********************************************************************/
#     IF ParentID IS NOT NULL
#     THEN
#
#       INSERT INTO CourseContentChildren (ContentID, ChildContentID, Depth)
#         SELECT
#           S1.ContentID,
#           (new.ContentID)        AS ChildContentID,
#           (new.Depth - S1.Depth) AS Depth
#         FROM CourseContentChildren AS S1
#         WHERE (S1.ChildContentID = new.ParentFolderID);
#       INSERT INTO CourseContentChildren (ContentID, ChildContentID, Depth) VALUES
#         (new.ParentFolderID, new.ContentID, new.Depth);
#
#
#     END IF;
#   END//
#
#

/***************************************************************************/
/***************************************************************************/
/***************************************************************************/




/***************************************************************************/
/*                      I m p o r t a n t   V i e w s                      */
/***************************************************************************/


DROP VIEW CourseContentBreadcrumbsForward;
CREATE VIEW CourseContentBreadcrumbsForward AS
  SELECT
    S2.ContentID,                             /* From Child Table */
    S1.ParentFolderID AS PreviousContentID,
    S1.ContentID AS CurrentContentID,
    S2.ChildContentID,
    S1.SectionID,
    S1.Name,
    S1.URL,
    S1.Description,
    S1.ParentFolderID,
    S1.RootContentID,
    S1.Depth,
    S1.Type,
    S1.Properties,
    S1.Gradable,
    S1.CreatedBy,
    S1.RolesVisible

  FROM CourseContentChildren AS S2
    JOIN CourseContent AS S1 ON S1.CourseContentNumber=S2.ChildContentID;
SELECT * FROM CourseContentBreadcrumbs WHERE ChildContentID=253;

/***************************************************************************/
/* Amazing View!. Will Give you the Grade of any section of Course Content */
/* Which includes the trees underneath...Per User! This is amazing!        */
/***************************************************************************/
DROP VIEW GradeProgress_CourseContentTree;
CREATE VIEW GradeProgress_CourseContentTree AS
  SELECT
    S1.ContentID,
    S1.ChildContentID,
    S4.Name,
    S4.Type,
    S4.Depth,
    S7.UserID,
    (CASE WHEN S3.PointsEarned IS NULL
      THEN 0
     ELSE ((SUM(

                S3.PointsEarned
            ) / SUM(S3.PointsWorth
            )) * 100.0) END) AS Grade
  FROM CourseContentBreadcrumbs AS S1
    LEFT JOIN CourseContent AS S4 ON S4.ContentID = S1.ChildContentID
    LEFT JOIN AnswerableQuestionsGroups AS S2 ON S2.CourseContentID = S1.ChildContentID
    LEFT JOIN AnsweredQuestionsReport AS S3 ON S3.AnswerableGroupID = S2.AnswerableGroupID
    ,
    Users AS S7
  WHERE S7.UserID = S3.UserID
  GROUP BY S1.ContentID, S1.ChildContentID, S1.Name, S1.Type, S1.Depth, S7.UserID;


/***************************************************************************/
/* Questions Report. Combines Questions and Question Types                 */
/***************************************************************************/
DROP VIEW QuestionsReport;
CREATE VIEW QuestionsReport AS
  SELECT
    S1.*,
    S2.Name AS QuestionType,
    S3.FirstName,
    S3.LastName,
    S3.Email,
    S3.PhoneNumber
  FROM Questions AS S1
    JOIN QuestionTypes AS S2 ON S1.QuestionTypeID = S2.QuestionTypeID
    LEFT JOIN Users AS S3 ON S3.UserID = S1.CreatedBy;

/***************************************************************************/
/* Questions Type Report. Gives Details on Creator                         */
/***************************************************************************/
DROP VIEW QuestionTypesReport;
CREATE VIEW QuestionTypesReport AS
  SELECT
    S1.*,
    S3.*
  FROM QuestionTypes AS S1
    LEFT JOIN Users AS S3 ON S3.UserID = S1.CreatedBy;

/***************************************************************************/
/* Assessment Questions                                                    */
/***************************************************************************/
DROP VIEW AssessmentQuestionsReport;
CREATE VIEW AssessmentQuestionsReport AS
  SELECT
    S1.AssessmentID,
    S1.Weight,
    S1.AddedBy,
    S2.*
  FROM AssessmentQuestions AS S1
    JOIN QuestionsReport AS S2 ON S2.QuestionID=S1.QuestionID;

/***************************************************************************/
/* Running Assessment Report                                               */
/***************************************************************************/
DROP VIEW RunningAssessmentsReport;
CREATE VIEW RunningAssessmentsReport AS
  SELECT
    S1.AnsweredID,
    S1.AssessmentID,
    S1.StartTime,
    S1.EndTime,
    S1.TotalPoints,
    SUM(S4.PointsEarned) AS EarnedPoints,
    COUNT(S6.AnswerableID) AS Answered,
    COUNT(S4.AnswerableID) AS TotalQuestions,
    (SUM(S4.PointsEarned)/S1.TotalPoints)*100.0 AS Grade,
    ((SUM(S4.PointsEarned)/S1.TotalPoints)/((SUM(CASE WHEN S4.Attempts=0 THEN 1 ELSE 0 END)/COUNT(S4.AnswerableID))))*100.0 AS RelativeGrade,
    (SUM(CASE WHEN S4.Attempts=0 THEN 1 ELSE 0 END)/COUNT(S6.AnswerableID))*100.0 AS Finished,
    S1.AnsweringBy,
    S1.GradedBy,
    S1.AnsweringGroupID,
    S2.Name,
    S2.URL,
    S2.Description,
    S2.Type,
    S2.Properties,
    S2.AssociatedCourseContentID,
    S2.Timelimit
  FROM RunningAssessments AS S1
    JOIN Assessments AS S2 ON S2.AssessmentID=S1.AssessmentID
    JOIN AnsweringQuestionsGroup AS S3 ON S3.AnsweringGroupID=S1.AnsweringGroupID
    LEFT JOIN AnsweredQuestionsReport AS S4 ON S4.AnswerableGroupID=S3.AnswerableGroupID AND S1.AnsweringBy=S4.AnsweredBy
    LEFT JOIN AnswerableQuestions AS S5 ON S5.AnswerableGroupID=S3.AnswerableGroupID AND S4.AnswerableID=S5.AnswerableID
    LEFT JOIN AnsweredQuestions AS S6 ON S6.AnsweringGroupID=S1.AnsweringGroupID
  GROUP BY
    S1.AnsweredID,
    S1.AssessmentID,
    S1.StartTime,
    S1.EndTime,
    S1.TotalPoints,
    S1.EarnedPoints,
    S1.AnsweringBy,
    S1.GradedBy,
    S1.AnsweringGroupID,
    S2.Name,
    S2.URL,
    S2.Description,
    S2.Type,
    S2.Properties,
    S2.AssociatedCourseContentID,
    S2.Timelimit;


/***************************************************************************/
/* Used for AnsweredQuestionsReport                                        */
/***************************************************************************/
DROP VIEW AnsweredQuestionsCombo;
CREATE VIEW `AnsweredQuestionsCombo` AS
  SELECT
    `S1`.`AnswerableID`                                    AS `AnswerableID`,
    `S1`.`AnswerableGroupID`                                 AS `AnswerableGroupID`,
    `S1`.`QuestionID`                                      AS `QuestionID`,
    `S5`.`AnsweredHTML`                                    AS `AnsweredHTML`,
    `S6`.`StartedBy`                                      AS `AnsweredBy`,
    `S1`.`AllowedAttempts`                                 AS `AllowedAttempts`,
    (CASE WHEN isnull(`S6`.`StartedBy`)
      THEN 0
     ELSE `S5`.`Attempts` END)                             AS `Attempts`,
    `S1`.`PointsWorth`                                     AS `PointsWorth`,
    `S1`.`CorrectAnswer`                                   AS `CorrectAnswer`,
    `S5`.`ChosenAnswer`                                    AS `ChosenAnswer`,
    (`S1`.`CorrectAnswer` IS NOT NULL)                     AS `HasCorrectAnswer`,
    (CASE WHEN isnull(`S6`.`StartedBy`)
      THEN `S1`.`AllowedAttempts`
     ELSE (`S1`.`AllowedAttempts` - `S5`.`Attempts`) END)  AS `RemainingAttempts`,
    (CASE WHEN isnull(`S6`.`StartedBy`)
      THEN 1
     ELSE (`S1`.`AllowedAttempts` > `S5`.`Attempts`) END)  AS `Answerable`,
    (CASE WHEN isnull(`S6`.`StartedBy`)
      THEN 0
     ELSE (`S1`.`AllowedAttempts` >= `S5`.`Attempts`) END) AS `Locked`,
    (`S5`.`ChosenAnswer` IS NOT NULL)                      AS `HasAnswer`,
    (CASE WHEN (`S5`.`ChosenAnswer` = `S1`.`CorrectAnswer`)
      THEN 1
     ELSE 0 END)                                           AS `IsCorrect`
  FROM (`hecflore_CELO`.`AnswerableQuestions` `S1`
    LEFT JOIN `hecflore_CELO`.`AnsweredQuestions` `S5` ON ((`S5`.`AnswerableID` = `S1`.`AnswerableID`))
    LEFT JOIN AnsweringQuestionsGroup S6 ON S6.AnsweringGroupID=S5.AnsweringGroupID
  );

/***************************************************************************/
/* Answered Questions Report: VERY IMPORTANT. Used to find grades          */
/***************************************************************************/
DROP VIEW AnsweredQuestionsReport;
CREATE VIEW `AnsweredQuestionsReport` AS
  SELECT
    `S1`.`AnswerableID`                                    AS `AnswerableID`,
    `S5_2`.`AnsweringGroupID`                                 AS `AnsweringGroupID`,
    `S1`.`AnswerableGroupID`                                 AS `AnswerableGroupID`,
    `S1`.`QuestionID`                                      AS `QuestionID`,
    `S5`.`AnsweredHTML`                                    AS `AnsweredHTML`,
    `S5_2`.`StartedBy`                                      AS `AnsweredBy`,
    `S1`.`AllowedAttempts`                                 AS `AllowedAttempts`,
    (CASE WHEN isnull(`S5_2`.`StartedBy`)
      THEN 0
     ELSE `S5`.`Attempts` END)                             AS `Attempts`,
    `S1`.`PointsWorth`                                     AS `PointsWorth`,
    `S1`.`CorrectAnswer`                                   AS `CorrectAnswer`,
    `S5`.`ChosenAnswer`                                    AS `ChosenAnswer`,
    (`S1`.`CorrectAnswer` IS NOT NULL)                     AS `HasCorrectAnswer`,
    (CASE WHEN isnull(`S5_2`.`StartedBy`)
      THEN `S1`.`AllowedAttempts`
     ELSE (`S1`.`AllowedAttempts` - `S5`.`Attempts`) END)  AS `RemainingAttempts`,
    (CASE WHEN isnull(`S5_2`.`StartedBy`)
      THEN 1
     ELSE (`S1`.`AllowedAttempts` > `S5`.`Attempts`) END)  AS `Answerable`,
    (CASE WHEN isnull(`S5_2`.`StartedBy`)
      THEN 0
     ELSE (`S1`.`AllowedAttempts` >= `S5`.`Attempts`) END) AS `Locked`,
    (`S5`.`ChosenAnswer` IS NOT NULL)                      AS `HasAnswer`,
    (CASE WHEN (`S5`.`ChosenAnswer` = `S1`.`CorrectAnswer`)
      THEN 1
     ELSE 0 END)                                           AS `IsCorrect`,
    `S4`.`CreatedOn`                                       AS `CreatedOn`,
    `S4`.`CreatedBy`                                       AS `CreatedBy`,
    `S3`.`QuestionTypeID`                                  AS `QuestionTypeID`,
    `S3`.`SrcDirectory`                                    AS `SrcDirectory`,
    `S3`.`Question`                                        AS `Question`,
    `S3`.`ExpectedAnswer`                                  AS `ExpectedAnswer`,
    `S3`.`JSONParameters`                                  AS `JSONParameters`,
    `S2`.`UserID`                                          AS `UserID`,
    `S2`.`FirstName`                                       AS `FirstName`,
    `S2`.`LastName`                                        AS `LastName`,
    `S2`.`Email`                                           AS `Email`,
    `S2`.`PhoneNumber`                                     AS `PhoneNumber`,
    `S2`.`UserName`                                        AS `UserName`,
    `S2`.`Password`                                        AS `Password`,
    `S2`.`Role`                                            AS `Role`,
    `S2`.`UHID`                                            AS `UHID`,
    (CASE WHEN ((`S5`.`ChosenAnswer` IS NOT NULL) AND (`S5`.`ChosenAnswer` = `S1`.`CorrectAnswer`))
      THEN `S1`.`PointsWorth`
     ELSE 0 END)                                           AS `PointsEarned`
  FROM ((`hecflore_CELO`.`AnswerableQuestions` `S1`
    LEFT JOIN `hecflore_CELO`.`Questions` `S3` ON ((`S3`.`QuestionID` = `S1`.`QuestionID`)))
    LEFT JOIN `hecflore_CELO`.`AnswerableQuestionsGroups` `S4` ON ((`S4`.`AnswerableGroupID` = `S1`.`AnswerableGroupID`)))
      JOIN (`hecflore_CELO`.`Users` `S2`
            JOIN `hecflore_CELO`.`AnsweringQuestionsGroup` `S5_2` ON ((`S2`.`UserID` = `S5_2`.`StartedBy`))
            JOIN AnsweredQuestions AS S5 ON S5.AnsweringGroupID=S5_2.AnsweringGroupID )
  WHERE (`S1`.`AnswerableID` = `S5`.`AnswerableID`)
  UNION ALL SELECT
              `S1`.`AnswerableID`                AS `AnswerableID`,
              `S13`.`AnsweringGroupID`            AS `AnsweringGroupID`,
              `S1`.`AnswerableGroupID`             AS `AnswerableGroupID`,
              `S1`.`QuestionID`                  AS `QuestionID`,
              NULL                               AS `AnsweredHTML`,
              NULL                               AS `AnsweredBy`,
              `S1`.`AllowedAttempts`             AS `AllowedAttempts`,
              0                                  AS `Attempts`,
              `S1`.`PointsWorth`                 AS `PointsWorth`,
              `S1`.`CorrectAnswer`               AS `CorrectAnswer`,
              NULL                               AS `ChosenAnswer`,
              (`S1`.`CorrectAnswer` IS NOT NULL) AS `HasCorrectAnswer`,
              `S1`.`AllowedAttempts`             AS `RemainingAttempts`,
              1                                  AS `Answerable`,
              0                                  AS `Locked`,
              0                                  AS `HasAnswer`,
              0                                  AS `IsCorrect`,
              `S4`.`CreatedOn`                   AS `CreatedOn`,
              `S4`.`CreatedBy`                   AS `CreatedBy`,
              `S3`.`QuestionTypeID`              AS `QuestionTypeID`,
              `S3`.`SrcDirectory`                AS `SrcDirectory`,
              `S3`.`Question`                    AS `Question`,
              `S3`.`ExpectedAnswer`              AS `ExpectedAnswer`,
              `S3`.`JSONParameters`              AS `JSONParameters`,
              `S2`.`UserID`                      AS `UserID`,
              `S2`.`FirstName`                   AS `FirstName`,
              `S2`.`LastName`                    AS `LastName`,
              `S2`.`Email`                       AS `Email`,
              `S2`.`PhoneNumber`                 AS `PhoneNumber`,
              `S2`.`UserName`                    AS `UserName`,
              `S2`.`Password`                    AS `Password`,
              `S2`.`Role`                        AS `Role`,
              `S2`.`UHID`                        AS `UHID`,
              0                                  AS `PointsEarned`
            FROM `hecflore_CELO`.`Users` `S2`
              JOIN `hecflore_CELO`.`UsersAnswersTemp` `S5`
              JOIN ((`hecflore_CELO`.`AnswerableQuestions` `S1` LEFT JOIN `hecflore_CELO`.`Questions` `S3`
                  ON ((`S3`.`QuestionID` = `S1`.`QuestionID`))) LEFT JOIN
                `hecflore_CELO`.`AnswerableQuestionsGroups` `S4` ON ((`S4`.`AnswerableGroupID` = `S1`.`AnswerableGroupID`))
                JOIN AnsweringQuestionsGroup AS S13 ON S13.AnswerableGroupID=S4.AnswerableGroupID )
            WHERE ((`S1`.`AnswerableID` = `S5`.`AnsweredBy`) AND
                   (NOT (`S2`.`UserID` IN (SELECT DISTINCT `S13`.`StartOn`
                                           FROM `hecflore_CELO`.`AnsweredQuestions` `S12`
                                             JOIN AnsweringQuestionsGroup AS S13 ON S13.AnsweringGroupID=S12.AnsweringGroupID
                                           WHERE (`S12`.`AnswerableID` = `S1`.`AnswerableID`)))));
DROP VIEW UsersAnswersTemp;
CREATE VIEW `UsersAnswersTemp` AS
  SELECT
    `S8`.`AnswerableID` AS `AnswerableID`,
    `S9`.`AnsweredHTML` AS `AnsweredHTML`,
    `S3`.`StartedBy`   AS `AnsweredBy`,
    `S9`.`Attempts`     AS `Attempts`,
    `S9`.`ChosenAnswer` AS `ChosenAnswer`,
    `S10`.`UserID`      AS `UserID`,
    `S10`.`FirstName`   AS `FirstName`,
    `S10`.`LastName`    AS `LastName`,
    `S10`.`Email`       AS `Email`,
    `S10`.`PhoneNumber` AS `PhoneNumber`,
    `S10`.`UserName`    AS `UserName`,
    `S10`.`Password`    AS `Password`,
    `S10`.`Role`        AS `Role`,
    `S10`.`UHID`        AS `UHID`
  FROM ((`hecflore_CELO`.`AnswerableQuestions` `S8`
    LEFT JOIN `hecflore_CELO`.`AnsweredQuestions` `S9` ON ((`S9`.`AnswerableID` = `S8`.`AnswerableID`)))
    JOIN AnsweringQuestionsGroup  S3 ON S3.AnswerableGroupID=S8.AnswerableGroupID AND S3.AnsweringGroupID=S9.AnsweringGroupID
    LEFT JOIN `hecflore_CELO`.`Users` `S10`  ON ((`S3`.`StartedBy` = `S10`.`UserID`)));



/***************************************************************************/
/* Course Section Report                                                   */
/***************************************************************************/
DROP VIEW CourseSectionsReport;
CREATE VIEW CourseSectionsReport AS SELECT
  S1.CourseUniqueID,
  S1.CourseName,
  S1.CourseCategory,
  S1.Setup,
  S1.CourseID,
  S1.Description,
  S1.CourseStatus,

  S2.SectionID,
  S2.SectionNumber,
  S2.StartDate,
  S2.EndDate,
  S2.Location,
  S2.TextBookInformation,


  S2.MainCourseContentID,

  S2.CreatedBy,
  S3.AssignedBy,
  CASE WHEN S4.UserID IS NULL THEN S2.CreatedBy ELSE S4.UserID END As UserID,

  S4.FirstName,
  S4.LastName,
  S4.Email,
  S4.PhoneNumber,
  S4.UserName,
  S4.Password,
  S4.Role,
  S3.UHID,
  S4.UserID IS NOT NULL AS isActive

  FROM Courses AS S1


  LEFT JOIN Sections AS S2 ON S1.CourseUniqueID=S2.CourseUniqueID
  LEFT JOIN SectionUsers AS S3 ON S2.SectionID=S3.SectionID
  LEFT JOIN Users AS S4 ON (S3.UserID IS NULL AND S3.UHID=S4.UHID) OR (S3.UserID IS NOT NULL AND S3.UserID=S4.UserID);

/***************************************************************************/
/* Course Content Report                                                   */
/***************************************************************************/
DROP VIEW CourseContentReport;
CREATE VIEW CourseContentReport AS
  SELECT
        S3.CourseUniqueID AS CourseUniqueID,
       S1.ContentID AS CourseContent_ContentID,
       S1.SectionID AS CourseContent_SectionID,
       S1.Name AS CourseContent_Name,
       S1.URL AS CourseContent_URL,
       S1.Description AS CourseContent_Description,
       S1.ParentFolderID AS CourseContent_ParentFolderID,
       S1.Type AS CourseContent_Type,
       S1.Properties AS CourseContent_Properties,
       S1.Gradable AS CourseContent_Gradable,
       S1.CreatedBy AS CourseContent_CreatedBy,
       S1.RolesVisible AS CourseContent_RolesVisible,

       S2.SectionID AS Sections_SectionID,
       S2.SectionNumber AS Sections_SectionNumber,
       S2.StartDate AS Sections_StartDate,
       S2.EndDate AS Sections_EndDate,
       S2.Location AS Sections_Location,
       S2.TextBookInformation AS Sections_TextBookInformation,

       S2.CreatedBy AS Sections_CreatedBy,
       S2.MainCourseContentID AS Sections_MainCourseContentID,

       S4.UserID AS Section_CreatedBy_UserID,
       S4.FirstName AS Section_CreatedBy_FirstName,
       S4.LastName AS Section_CreatedBy_LastName,
       S4.Email AS Section_CreatedBy_Email,
       S4.PhoneNumber AS Section_CreatedBy_PhoneNumber,
       S4.UserName AS Section_CreatedBy_UserName,
       S4.Password AS Section_CreatedBy_Password,
       S4.Role AS Section_CreatedBy_Role,
       S4.UHID AS Section_CreatedBy_UHID,

       S3.CourseName AS Course_CourseName,
       S3.CourseCategory AS Course_CourseCategory,
       S3.Setup AS Course_Setup,
       S3.CourseID AS Course_CourseID,
       S3.Description AS Course_Description,
       S3.CourseStatus AS Course_CourseStatus,
       S3.CreatedBy AS Course_CreatedBy

    FROM CourseContent AS S1
    LEFT JOIN Sections AS S2 ON S1.SectionID=S2.SectionID
    LEFT JOIN Users AS S4 ON S4.UserID=S2.CreatedBy
    LEFT JOIN Courses AS S3 ON S3.CourseUniqueID=S2.CourseUniqueID;




/***************************************************************************/
/*                     D a t a    I m p o r t i n g                        */
/***************************************************************************/



INSERT INTO CourseStatus (CourseStatus, AnyTags) VALUES ('Pending','');
INSERT INTO CourseStatus (CourseStatus, AnyTags) VALUES ('Waiting','');
INSERT INTO CourseStatus (CourseStatus, AnyTags) VALUES ('Online','');


INSERT INTO InvitationReasons (ReasonID, ReasonString) VALUES ('Ins_Reg','Register Instructor');
INSERT INTO InvitationReasons (ReasonID, ReasonString) VALUES ('Ins_Enrol','Add Instructor To Section');
INSERT INTO InvitationReasons (ReasonID, ReasonString) VALUES ('Reg_Ta','Register TA');
INSERT INTO InvitationReasons (ReasonID, ReasonString) VALUES ('Add_Ta','Add TA To Section');



INSERT INTO Users (UserID, FirstName, LastName, Email, PhoneNumber, UserName, Password, Role) VALUES
  ('6d80edf2-1756-11e7-b834-002590d0b932','administrator1','administrator1','administrator1@email.com','123-123-1234','administrator1','administrator1','Administrator'),
  ('6d80ef72-1756-11e7-b834-002590d0b932','administrator2','administrator2','administrator2@email.com','123-123-1234','administrator2','administrator2','Administrator'),
  ('6d80f00b-1756-11e7-b834-002590d0b932','administrator3','administrator3','administrator3@email.com','123-123-1234','administrator3','administrator3','Administrator'),
  ('6d80f0a6-1756-11e7-b834-002590d0b932','administrator4','administrator4','administrator4@email.com','123-123-1234','administrator4','administrator4','Administrator');


INSERT INTO Users (UserID, FirstName, LastName, Email, PhoneNumber, UserName, Password, Role) VALUES
  ('6d7e5c89-1756-11e7-b834-002590d0b932','Instructor1','Instructor1','instructor1@email.com','123-123-1234','instructor1','instructor1','Instructor'),
  ('6d7e5e21-1756-11e7-b834-002590d0b932','Instructor1','Instructor1','instructor1@email.com','123-123-1234','instructor1','instructor1','Instructor'),
  ('6d7e5ebb-1756-11e7-b834-002590d0b932','Instructor1','Instructor1','instructor1@email.com','123-123-1234','instructor1','instructor1','Instructor'),
  ('6d7e5f53-1756-11e7-b834-002590d0b932','Instructor1','Instructor1','instructor1@email.com','123-123-1234','instructor1','instructor1','Instructor');

INSERT INTO Users (UserID, FirstName, LastName, Email, PhoneNumber, UserName, Password, Role) VALUES
  ('6d7b7a0f-1756-11e7-b834-002590d0b932','Student1','Student1','instructor@email.com','123-123-1234','student1','student1','Student'),
  ('6d7b7bc3-1756-11e7-b834-002590d0b932','Student2','Student2','instructor@email.com','123-123-1234','student2','student2','Student'),
  ('6d7b7c51-1756-11e7-b834-002590d0b932','Student3','Student3','instructor@email.com','123-123-1234','student3','student3','Student'),
  ('6d7b7cda-1756-11e7-b834-002590d0b932','Student4','Student4','instructor@email.com','123-123-1234','student4','student4','Student');


INSERT INTO Users (UserID, FirstName, LastName, Email, PhoneNumber, UserName, Password, Role) VALUES
  ('6d78c63c-1756-11e7-b834-002590d0b932','TA1','TA1','ta@email.com','123-123-1234','ta1','ta1','TA'),
  ('6d78c938-1756-11e7-b834-002590d0b932','TA2','TA2','ta@email.com','123-123-1234','ta2','ta2','TA'),
  ('6d78c9f1-1756-11e7-b834-002590d0b932','TA3','TA3','ta@email.com','123-123-1234','ta3','ta3','TA'),
  ('6d78ca70-1756-11e7-b834-002590d0b932','TA4','TA4','ta@email.com','123-123-1234','ta4','ta4','TA');




INSERT INTO Courses(CourseUniqueID,CourseName, CourseCategory, Setup, CourseID, Description, CourseStatus, CreatedBy) VALUES
  (1,'Introduction to Computer Science I','COSC',TRUE,1410,'Computer organization, structured procedural programming, C/C++ programming language, algorithm design, and a short introduction to object-oriented programming.','Online','6d7e5c89-1756-11e8-b834-002590d0b932'),
  (2,'Data Structures '                  ,'COSC',TRUE,2320,'Introduction to various data structures (stacks, queues, lists, hash tables, trees, heaps, and graphs); sorting and searching; design, analysis, and comparison of algorithms.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (3,'Computer Organization and Programming','COSC',TRUE,2410,' Basic computer organization; machine execution cycle, digital representation of data and instructions, assembly language programming, assembler, loader, macros, subroutines, program linkage, memory hierarchy, DRAM, SRAM, cache','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (4,'Web Development ','COSC',TRUE,3319,' DHTML, CSS, CGI, JavaScript, server side programming paradigm, XML and transformation, Web services, Service Oriented Architecture.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (5,'Algorithms and Data Structures ','COSC',TRUE,3320,'Data structures and algorithms for manipulating them. Algorithm analysis and design, heuristics; advanced tree structures; advanced hashing techniques; sorting and searching; graphs, sets. NP-Completeness, Time and Space complexities.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (6,'Numerical Methods I ','COSC',TRUE,3361,' Solution of equations, polynomial approximations, initial value problems of ordinary differential equations.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (7,'Numerical Methods II ','COSC',TRUE,3362,'Numerical solutions of problems in linear algebra; systems of linear equations, matrix inversion, and eigen-value problems.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (8,'Digital Logic Design','COSC',TRUE,3410,'Introduction to digital logic design. Digital data representation systems. Binary logic and Boolean algebra. Analysis and synthesis of combinational and sequential circuits. Commonly used integrated circuits and digital components','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (9,'Design of File and Database Systems','COSC',TRUE,3380,'Credit may not be received for both COSC 3480 and 3380. Techniques for file organizations on secondary storage, performance, design, and management of large integrated databases, data models, query languages.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (10,'Programming Languages and Paradigms','COSC',TRUE,4315,'Discussion and comparison of basic programming styles and their underlying paradigms and languages based on these paradigms; such as imperative programming, functional programming, logic programming, and object-oriented programming.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (11,'Fundamentals of Operating Systems','COSC',TRUE,4330,' Purpose of an operating system; sequential processes, concurrent processes, deadlock, mutual exclusion, semaphores; memory management, processor management, peripheral device management.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (12,'Real-Time Systems and Embedded Programming','COSC',TRUE,4331,'Introduction to real-time and embedded systems; scheduling; programming language and operating systems; support; formal specification, analysis, and verification; embedded programming; power-aware computing.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (13,'Medical Robotics & Image Guided Interventions','COSC',TRUE,4332,'Prerequisite: senior standing in Computer Science or consent of instructor. Basics of medical robotics as used in image guided interventions and surgeries. Includes robot registration, sensing, kinematics, safety and control, augmented reality, and tele-surgeries.','Online','6d7e5c89-1756-11e7-b834-002590d0b932'),
  (14,'Data Mining','COSC',TRUE,4335,'Data mining overview, data quality, data preprocessing, OLAP, and statistics on one variable; techniques: classification, regression, clustering, dimensionality reduction, association rules; scoring, postprocessing, and data mining case studies.','Online','6d7e5c89-1756-11e7-b834-002590d0b932');



INSERT INTO Sections(SectionID, SectionNumber, StartDate, EndDate, Location, TextBookInformation, CourseUniqueID, CreatedBy) VALUES
  (1, 10110,'2017-07-01','2017-10-01','','',1,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (2, 10111,'2017-07-2','2017-10-01','','',2,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (3, 10112,'2017-07-3','2017-10-01','','',3,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (4, 10113,'2017-07-4','2017-10-01','','',4,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (5, 10114,'2017-07-5','2017-10-01','','',5,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (6, 10115,'2017-07-6','2017-10-01','','',6,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (7, 10116,'2017-07-7','2017-10-01','','',7,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (8, 10117,'2017-07-8','2017-10-01','','',8,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (9, 10118,'2017-07-9','2017-10-01','','',9,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (10,10119,'2017-07-10','2017-10-01','','',10,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (11,10120,'2017-07-11','2017-10-01','','',11,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (12,10121,'2017-07-12','2017-10-01','','',12,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (13,10120,'2017-08-11','2017-11-01','','',13,'6d7e5c89-1756-11e7-b834-002590d0b932'),
  (14,10121,'2017-09-12','2017-12-01','','',14,'6d7e5c89-1756-11e7-b834-002590d0b932');


CREATE TABLE Numbers(
  number INTEGER
);
INSERT INTO Numbers (number) VALUES
  (1),
  (2),
  (3),
  (4),
  (5),
  (6),
  (7),
  (8),
  (9),
  (10),
  (11),
  (12),
  (13),
  (14),
  (15);

DELETE FROM CourseContent;
/***************************************************************************/
INSERT INTO SectionUsers (SectionID, AddedOn, AssignedBy, UserID)
    SELECT S1.SectionID, NOW(), '6d7e5c89-1756-11e7-b834-002590d0b932', '6d7e5c89-1756-11e7-b834-002590d0b932' FROM Sections AS S1;

/***************************************************************************/
INSERT INTO CourseContent(ContentID, SectionID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible)
    SELECT S1.SectionID, S1.SectionID, S2.CourseName,CONCAT('course-content/',S1.SectionID),S2.Description,NULL ,S1.SectionID,0,'course','{}',FALSE,S1.CreatedBy,'INSTRUCTOR|STUDENT'
      FROM Sections AS S1
      JOIN Courses AS S2 ON S1.CourseUniqueID=S2.CourseUniqueID;


  UPDATE Sections AS S,CourseContent AS C
    SET S.MainCourseContentID = C.ContentID
      WHERE C.Depth=0 AND C.SectionID=S.SectionID;


/***************************************************************************/
INSERT INTO CourseContent(SectionID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible)
  SELECT S1.SectionID, 'Course Content', CONCAT('course-content/',S1.SectionID), 'This is where all file content will be placed', S3.ContentID,S3.RootContentID,S3.Depth+1,'folder','{}',FALSE,'6d7e5c89-1756-11e7-b834-002590d0b932','INSTRUCTOR|STUDENT'
  FROM Sections AS S1
    JOIN Courses AS S2 ON S1.CourseUniqueID=S2.CourseUniqueID
    JOIN CourseContent AS S3 ON S3.SectionID=S1.SectionID
    WHERE S3.Depth=0;

/***************************************************************************/
INSERT INTO CourseContent(SectionID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible)
SELECT S1.SectionID, 'Learning Modules', CONCAT('course-content/',S1.SectionID), 'Class Content(<b>Quizes</b>, <b>Assignments</b>...)', S3.ContentID,S3.RootContentID,S3.Depth+1,'folder','{}',FALSE,'6d7e5c89-1756-11e7-b834-002590d0b932','INSTRUCTOR|STUDENT'
FROM Sections AS S1
  JOIN Courses AS S2 ON S1.CourseUniqueID=S2.CourseUniqueID
  JOIN CourseContent AS S3 ON S3.SectionID=S1.SectionID
WHERE S3.Depth=0;


/***************************************************************************/
INSERT INTO CourseContent(SectionID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible)
SELECT S1.SectionID, CONCAT('Chapter ',N.number), CONCAT('course-content/',N.number), 'Class Content(<b>Quizzes</b>, <b>Assignments</b>...)', S3.ContentID,S3.RootContentID,S3.Depth+1,'section','{}',FALSE,'6d7e5c89-1756-11e7-b834-002590d0b932','INSTRUCTOR|STUDENT'
FROM Sections AS S1
  JOIN Courses AS S2 ON S1.CourseUniqueID=S2.CourseUniqueID
  JOIN CourseContent AS S3 ON S3.SectionID=S1.SectionID, Numbers AS N
WHERE S3.Depth=1 AND S1.SectionID%2 = 0 AND S3.Name='Learning Modules';

INSERT INTO CourseContent(SectionID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible)
SELECT S1.SectionID, CONCAT('Week ',N.number) , CONCAT('course-content/',N.number), 'Class Content(<b>Quizzes</b>, <b>Assignments</b>...) for the week', S3.ContentID,S3.RootContentID,S3.Depth+1,'week','{}',FALSE,'6d7e5c89-1756-11e7-b834-002590d0b932','INSTRUCTOR|STUDENT'
FROM Sections AS S1
  JOIN Courses AS S2 ON S1.CourseUniqueID=S2.CourseUniqueID
  JOIN CourseContent AS S3 ON S3.SectionID=S1.SectionID, Numbers AS N
WHERE S3.Depth=1 AND S1.SectionID%2 = 1 AND S3.Name='Learning Modules';



/***************************************************************************/
INSERT INTO CourseContent(SectionID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible)
SELECT S1.SectionID, CONCAT('Topic ',N.number), CONCAT('course-content/',S1.SectionID), 'Class Content(<b>Quizzes</b>, <b>Assignments</b>...)', S3.ContentID,S3.RootContentID,S3.Depth+1,'topic','{}',FALSE,'6d7e5c89-1756-11e7-b834-002590d0b932','INSTRUCTOR|STUDENT'
FROM Sections AS S1
  JOIN Courses AS S2 ON S1.CourseUniqueID=S2.CourseUniqueID
  JOIN CourseContent AS S3 ON S3.SectionID=S1.SectionID, Numbers AS N
WHERE S3.Depth=2 AND S1.SectionID%2 = 0;

INSERT INTO CourseContent(SectionID, Name, URL, Description, ParentFolderID, RootContentID, Depth, Type, Properties, Gradable, CreatedBy, RolesVisible)
SELECT S1.SectionID, CONCAT('Topic ',N.number) , CONCAT('course-content/',S1.SectionID), 'Class Content(<b>Quizzes</b>, <b>Assignments</b>...) for the week', S3.ContentID,S3.RootContentID,S3.Depth+1,'topic','{}',FALSE,'6d7e5c89-1756-11e7-b834-002590d0b932','INSTRUCTOR|STUDENT'
FROM Sections AS S1
  JOIN Courses AS S2 ON S1.CourseUniqueID=S2.CourseUniqueID
  JOIN CourseContent AS S3 ON S3.SectionID=S1.SectionID, Numbers AS N
WHERE S3.Depth=2 AND S1.SectionID%2 = 1;

/***************************************************************************/
DROP VIEW AnswerableQuestionGroupsReport;
CREATE VIEW AnswerableQuestionGroupsReport AS
SELECT
  S5.AnsweringGroupID,
  S1.AnswerableGroupID,
  S1.CreatedOn,
  S1.CreatedBy,
  S3.SectionID,
  S2.UserID,
  CASE WHEN S1.Category IS NULL THEN S3.Type ELSE S1.Category END AS Category,
  S1.CourseContentID,
  S1.SetGrade,
  CASE WHEN S1.SetGrade IS NULL THEN SUM(S2.PointsEarned)/SUM(S2.PointsWorth)*100.0 ELSE S1.SetGrade END AS Grade,
  CASE WHEN S1.SetGrade IS NULL THEN SUM(S2.PointsEarned) ELSE (S1.SetGrade/100)*SUM(S2.PointsWorth) END AS PointsEarned,
  CASE WHEN S1.SetGrade IS NULL THEN SUM(S2.PointsWorth) ELSE (100/S1.SetGrade)*SUM(S2.PointsEarned) END AS PointsWort,

  S4.CourseUniqueID AS Course_CourseUniqueID,
  S4.CourseName AS Course_CourseName,
  S4.CourseCategory AS Course_CourseCategory,
  S4.Setup AS Course_Setup,
  S4.CourseID AS Course_CourseID,
  S4.Description AS Course_Description,
  S4.CourseStatus AS Course_CourseStatus,

  S4.SectionID AS Section_SectionID,
  S4.SectionNumber AS Section_SectionNumber,
  S4.StartDate AS Section_StartDate,
  S4.EndDate AS Section_EndDate,
  S4.Location AS Section_Location,
  S4.TextBookInformation AS Section_TextBookInformation,
  S4.MainCourseContentID AS Section_MainCourseContentID,
  S4.CreatedBy AS Section_CreatedBy,

  S4.UserID AS User_UserID,
  S4.FirstName AS User_FirstName,
  S4.LastName AS User_LastName,
  S4.Email AS User_Email,
  S4.PhoneNumber AS User_PhoneNumber,
  S4.UserName AS User_UserName,
  S4.Role AS User_Role,
  S4.UHID AS User_UHID,
  S4.isActive AS User_isActive,

  S3.ContentID AS CourseContent_ContentID,
  S3.CourseContentNumber AS CourseContent_CourseContentNumber,
  S3.SectionID AS CourseContent_SectionID,
  S3.Name AS CourseContent_Name,
  S3.URL AS CourseContent_URL,
  S3.Description AS CourseContent_Description,
  S3.ParentFolderID AS CourseContent_ParentFolderID,
  S3.RootContentID AS CourseContent_RootContentID,
  S3.Depth AS CourseContent_Depth,
  S3.Type AS CourseContent_Type,
  S3.Properties AS CourseContent_Properties,
  S3.Gradable AS CourseContent_Gradable,
  S3.CreatedBy AS CourseContent_CreatedBy,
  S3.RolesVisible AS CourseContent_RolesVisible


FROM AnswerableQuestionsGroups AS S1
  JOIN AnsweringQuestionsGroup AS S5 ON S5.AnswerableGroupID=S1.AnswerableGroupID
  LEFT JOIN AnsweredQuestionsReport AS S2 ON S2.AnswerableGroupID=S1.AnswerableGroupID
  JOIN CourseContent AS S3 ON S1.CourseContentID=S3.ContentID
  JOIN CourseSectionsReport AS S4 ON S4.SectionID=S3.SectionID AND (S4.UserID=S2.UserID) AND S3.ContentID=S1.CourseContentID AND S4.Role='Student'

  GROUP BY AnsweringGroupID

