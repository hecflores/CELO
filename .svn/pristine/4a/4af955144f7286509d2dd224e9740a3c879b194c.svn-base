<?php
namespace Questions\Controller;
use Application\Info;
use Application\Model\AnsweredQuestion;
use Application\QuestionManager;
use Application\QuestionTypeManager;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;

/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 2/27/2017
 * Time: 5:40 AM
 */
class QuestionsController  extends AbstractActionController
{
    public function onDispatch(MvcEvent $e)
    {

        /*******************************************************************/
        /* User Check                                                      */
        /*******************************************************************/

        /*******************************************************************/
        $json=$e->getRouteMatch()->getParam("json");
        if(isset($json)){
            $e->getViewModel()->setTemplate("application/layout/empty");
        }


        $navigation=new ViewModel();
        $navigation->setTemplate("layout/staff/navigation");


        /*******************************************************************/
        $e->getViewModel()->addChild($navigation,"navigation");

        //e->getViewModel()->setTemplate("visitors/layout");
        $parent=parent::onDispatch($e); // TODO: Change the autogenerated stub


        /*******************************************************************/




        /*******************************************************************/
        return $parent;
    }

    /***********************************************************************/
    /* Tools                                                               */
    /***********************************************************************/
    public function JsonView($object)
    {
        $view =new ViewModel();
        $view->setTemplate("application/tools/json");

        Info::getEvent()->getViewModel()->setTemplate("layout/empty");

        $view->setVariable("object",$object);
        return $view;
    }
    /**
     * @return AnsweredQuestion
     */
    public function getAnsweredQuestion(){
        $questionID=$this->params()->fromRoute("questionId");
        if(!isset($questionID)){
            QuestionManager::ExitWithError("Question ID was not found in the Route");
            return;
        }
        $returnedQuestion=Info::QuestionsTable()->getAnsweredQuestion($questionID);

        return $returnedQuestion;
    }
    /**
     * @return \Application\Model\Question
     */
    public function getQuestion(){
        $questionID=$this->params()->fromRoute("questionId");
        if(!isset($questionID)){
            QuestionManager::ExitWithError("Question ID was not found in the Route");
            return;
        }
        $returnedQuestion=Info::QuestionsTable()->getFromById($questionID);

        return $returnedQuestion;
    }

    /**
     * @return QuestionTypeManager
     */
    public function getQuestionType(){
        $questionID=$this->params()->fromRoute("questionTypeId");
        if(!isset($questionID)){
            QuestionTypeManager::ExitWithError("Question ID was not found in the Route");
            return;
        }
        $returnedQuestion=new QuestionTypeManager($questionID);
        if($questionID!=$returnedQuestion->getQuestionType()->getQuestionTypeID()){

            QuestionManager::ExitWithError("Question ID was not found in the Route");
        }
        return $returnedQuestion;
    }

    /***********************************************************************/
    /* Public Top Level Operations                                         */
    /***********************************************************************/
    public function indexAction(){
        $view =new ViewModel();
        $view->setTemplate("/questions/edit/question/index");
        $view->setVariable("questions",Info::QuestionsTable()->get());

        return $view;
    }

    public function detailsAction(){
        $view =new ViewModel();
        $view->setTemplate("/questions/edit/question/details");
        $view->addChild($this->runAction(),'viewable');
        $view->setVariable("question",$this->getQuestion());

        return $view;
    }

    public function createAction(){

        if(!$this->getRequest()->isPost()){

            $view=new ViewModel();
            $view->setTemplate("questions/edit/question/create-question");
            return $view;
        }
        $copyFrom=$this->params()->fromPost("copyFrom");
        if(isset($copyFrom)){

            $copyFrom=Info::QuestionsTable()->getFromById($copyFrom);
            if($copyFrom==null){
                throwException(new \Exception("Copy From ID Doesnt Exists for Question "));
            }

            /***************************************************************/
            /* Copy Question                                               */
            /***************************************************************/
            $question=Info::QuestionsTable()->UpdateInsertData(null,$copyFrom->getData());

            /***************************************************************/
            /* Copy Tags                                                   */
            /***************************************************************/
            Info::TagTable()->copy(
                array(
                    "ObjectID"=>$copyFrom->getQuestionID(),
                    "Category"=>"Question"
                ),
                array(
                    "ObjectID"=>$question->getQuestionID(),
                ));

            $this->redirect()->toRoute("questions/questionsInd/questionsInd_Use/questionsInd_editor",
                array(
                    "questionId"=>$question->getQuestionID()
                ));
            return;


        }

        $view =new ViewModel();
        $questionName=$this->params()->fromPost("name");
        if(!isset($questionName)){
            $view=new ViewModel();
            $view->setTemplate("questions/edit/question/create-question");
            $view->setVariable("error","Question Name Required");
            return $view;
        }

        /*******************************************************************/
        $question=Info::QuestionsTable()->UpdateInsertData(null,
            array(
                "QuestionTypeID"=>$this->params()->fromPost("QuestionTypeID"),
                "Question"=>$questionName,
                "ExpectedAnswer"=>null,
                "CreatedBy"=>Info::getCurrentUser()->getUserID()
            ));

        /*******************************************************************/
        $this->redirect()->toRoute("questions/questionsInd/questionsInd_Use",
            array(
                "questionId"=>$question->getQuestionID()
            ));

        return $view;
    }


    /***********************************************************************/
    /***********************************************************************/
    /***********************************************************************/
    public function loadAction(){

        $question=$this->getQuestion();
        $mergedArray=array("parameters"=>$question->getParameters());
        $mergedArray=array_merge($mergedArray,array("answer"=>$question->getExpectedAnswer()));
        $mergedArray=array_merge($mergedArray,array("model"=>$question->toArray()));
        return $this->JsonView($mergedArray);


    }
    public function loadViewAction(){

        $question=$this->getQuestion();
        return $this->JsonView(array(
            "parameters"=>$question->getParameters()));


    }


    /***********************************************************************/
    /***********************************************************************/
    /***********************************************************************/



    /***********************************************************************/
    /* Questions that are editable                                         */
    /***********************************************************************/
    public function saveAction(){

        $question=$this->getQuestion();
        $content=Info::getBodyJSON();


        if(isset($content["parameters"])){
            $question->setParameters($content["parameters"]);
        }
        if(isset($content["answer"])){
            $question->setAnswer($content["answer"]);
        }

        return $this->JsonView($question->getParameters());

    }
    public function editorAction(){
        $view =new ViewModel();
        $view->setTemplate("questions/edit/question/editor");
        $view->setVariable("question",$this->getQuestion());


        return $view;
    }

    /***********************************************************************/
    /* Questions that are runnable                                         */
    /***********************************************************************/
    public function testAction()
    {
        $content=Info::getBodyJSON();
        if(!isset($content["answer"])){
            return $this->JsonView(array("success" => false, "message" => "No Answer Found"));
        }
        $question=$this->getAnsweredQuestion();
        if($question->getAnswer()!=$content["answer"]){
            return $this->JsonView(array("success" => false, "message" => "Incorrect answer"));
        }

        return $this->JsonView(array("success" => true));

    }
    public function answerAction(){
        $answerID=$this->params()->fromRoute("AnswerID");

        /*******************************************************************/
        if(!isset($answerID)){
            return $this->JsonView(array("success" => false, "message" => "No Answer ID Found"));
        }

        /*******************************************************************/
        $content=Info::getBodyJSON();
        if(!isset($content["answer"])){
            return $this->JsonView(array("success" => false, "message" => "No Answer Found"));
        }
        if(!isset($content["html"])){
            return $this->JsonView(array("success" => false, "message" => "No Html Found"));
        }

        Info::ActiveQuestionsTable()->AnswerQuestion($answerID,$content["answer"],$content["html"]);

        /*******************************************************************/
        return $this->JsonView(array("success" => true));
    }

    public function runAction(){
        $view =new ViewModel();
        $view->setTemplate("questions/edit/question/view");
        $view->setVariable("question",$this->getQuestion());
        if($this->params()->fromQuery('answerURL')){
           $view->setVariable("answerURL",$this->params()->fromQuery('answerURL'));
        }

        return $view;
    }

}