<?php

/**
 * Created by PhpStorm.
 * User: Hector
 * Date: 3/8/2017
 * Time: 7:30 PM
 */
echo $this->AutomatedFields;
echo "    <div class='form-group'>"
    ."      <label for='gridSize'>Grid Size</label>"
    ."      <input type='text' style='width:100px;display:inline-block' class='form-control gridSettings' id='gridRows' name='Content[Json][Properties][GridSize][Rows]'/> "
    ."by "."<input type='text' style='width:100px;display:inline-block' class='form-control gridSettings' id='gridColumns' name='Content[Json][Properties][GridSize][Columns]'/>"
    ."  <span class='btn btn-default setup-questions'>Setup</span>"
    ."<h3>Grid</h3>"
    ."<div class='create-grid-container'></div>"
    ."    </div>";
echo "<input type='hidden' class='form-control' name='Content[Json][Properties][CustomPreview]' value='true' />";
echo "<input type='hidden' class='form-control' name='Content[Json][Properties][OnlyOne]' value='true' />";
echo "<input type='hidden' class='form-control' name='Content[Json][Properties][UUID][SessionID]' value='true' />";
?>
<style>
    .create-grid-container{
        position:relative;
    }
    .magic-points-create-grid-cell{
        position:absolute;
        display:inline-block;
        box-shadow:0px 2px 2px rgba(0,0,0,.6),inset 0px 2px rgba(255,255,255,.6);
        background:white;
        cursor:pointer;
    }
    .magic-points-create-grid-cell:hover{
        background:rgb(230,230,230);
    }
    .magic-points-create-grid-cell[ready]{
        background:rgb(180,255,180);
    }
    .magic-points-create-grid-cell[settingUp]{
        background: rgb(208, 96, 66);
    }
</style>
<script>
    $(document).ready(function() {
        var Rows = function () {
            return parseInt($("#gridRows").val())
        };
        var Columns = function () {
            return parseInt($("#gridColumns").val())
        };
        var gridContainer = $(".create-grid-container");

        function setQuestionOnCell(Row, Column, QuestionID, Weight) {
            var cellStr = ".create-grid-cell-" + Row + "-" + Column;
            var inputPrefixStr = "Content[Json][Properties][Grid][" + Row + "][" + Column + "]";
            $(cellStr).remove();

            $("<input type='hidden' class='" + cellStr + "' value='" + QuestionID + "' name='" + inputPrefixStr + "[QuestionID]'/>").appendTo(gridContainer);
            $("<input type='hidden' class='" + cellStr + "' value='" + Weight + "' name='" + inputPrefixStr + "[Weight]'/>").appendTo(gridContainer);


            $(".magic-points-create-grid-cell[row='" + Row + "'][column='" + Column + "']").attr("ready",true);
        }
        $(".create-magic-points-container").on("click", ".setup-questions",function(){
            var $this = $(this);
            var row = $this.attr("row");
            var column = $this.attr("column");
            var maxCells=Rows()*Columns();
            var weight = 2;
            var questionID = -1;

            MessageBox.ShowPopup({
                title: "Edit Row(" + row + "), Column(" + column + ")",
                content: function () {
                    var html=
                        "<div>" +
                        "    <h4>Enter in the range for the random grade wegith for the questions</h4>" +
                        "    <div class='form-group'> " +
                        "        <label for='min-value'>Min Random Weight</label> " +
                        "            <select class='form-control' id='min-value' > " +
                        "            </select> " +
                        "        </label> " +
                        "    </div> " +
                        "    <div class='form-group'> " +
                        "        <label for='max-value'>Max Random Weight</label> " +
                        "            <select class='form-control' id='max-value' > " +
                        "            </select> " +
                        "        </label> " +
                        "    </div> ";
                    var root=$(html);


                    /*******************************************************/
                    /* Get Important Elements                              */
                    /*******************************************************/
                    var maxElement=root.find("#max-value");
                    var minElement=root.find("#min-value");
                    maxElement.myVal=function(){
                        return parseInt(maxElement.val());
                    };
                    minElement.myVal=function(){
                        return parseInt(minElement.val());
                    };

                    /*******************************************************/
                    var bothElements=root.find("#max-value, #min-value");

                    /*******************************************************/
                    /* Fill Elements                                       */
                    /*******************************************************/
                    for(var i=1;i<=20;i++)
                    {
                        $("<option>"+i+"</option>").appendTo(bothElements);
                    }
                    bothElements.val(1);


                    /*******************************************************/
                    /* Constrain Elements                                  */
                    /*******************************************************/
                    maxElement.change(function()
                    {
                        if(minElement.myVal()>maxElement.myVal())
                        {
                            minElement.val(maxElement.myVal());
                        }

                    });
                    minElement.change(function()
                    {
                        if(minElement.myVal()>maxElement.myVal())
                        {
                            maxElement.val(minElement.myVal());
                        }
                    });

                    return root;
                },
                options: {
                    "Done": {
                        type: "success",
                        content: "Done",
                        callback: function (modal) {

                            var maxElement=modal.BodyElement.find("#max-value");
                            var minElement=modal.BodyElement.find("#min-value");

                            var min=parseInt(minElement.val());
                            var max=parseInt(maxElement.val());
                            var generateRandomWeight=function(){
                                return Math.floor(((Math.random()*(max-min)))+min);
                            };

                            Popups.Questions().MaximumSelected(maxCells).Callback(function (selected) {
                                if(selected.length!=maxCells){
                                    throw new Error("WHAT!!!! They Should be equal");
                                }
                                selected.forEach(function(item,index){
                                    var myRow   =Math.floor(index/(Columns()));
                                    var myColumn=Math.floor(index%(Columns()));

                                    setQuestionOnCell(myRow, myColumn, item["QuestionID"], generateRandomWeight());
                                });


                            }).Open();
                        }
                    }
                }
            });
        });
//        gridContainer.on("click", ".magic-points-create-grid-cell", function () {
//            var $this = $(this);
//            var row = $this.attr("row");
//            var column = $this.attr("column");
//            var weight = 2;
//            var questionID = -1;
//
//
//            MessageBox.ShowPopup({
//                title: "Edit Row(" + row + "), Column(" + column + ")",
//                content: function () {
//                    var weightElement = $("<input class='form-control' value='" + weight + "' type='text' placeholder='Weight'>");
//                    weightElement.keyup(function () {
//                        weight = weightElement.val();
//                    });
//                    return weightElement;
//                },
//                options: {
//                    "Done": {
//                        type: "success",
//                        content: "Done",
//                        callback: function () {
//                            setQuestionOnCell(row, column, questionID, weight);
//                        }
//                    }
//                }
//            });
//
//            Popups.Questions().MultiSelect(true).Callback(function (selected) {
//                questionID = selected["QuestionID"];
//
//
//            }).Open();
//
//
//        });
        function ResetGrid() {
            var gap = 10;
            var size = 20;

            gridContainer.empty();
            gridContainer.css({
                width: (Columns() * size) + (Columns() * gap),
                height: (Rows() * size) + (Rows() * gap)
            });
            var updateGrid=function(x,y,element){
                var data=gridContainer.data("grid");
                if(typeof data[x] == "undefined"){
                    data[x]={};
                }
                data[x][y]={
                    element:element
                };
                gridContainer.data("grid",data);
            }

            gridContainer.data("grid",{
                "grid":{},
                "gridSize":{
                    "Rows":Rows(),
                    "Columns":Columns(),
                }
            });
            for (var row = 0; row < Rows(); row++) {

                gridContainer.data("grid",{});
                for (var column = 0; column < Columns(); column++) {
                    var x = (column * size) + (gap * column);
                    var y = (row * size) + (gap * row);
                    var element=$("<div row=" + row + " column=" + column + " class='magic-points-create-grid-cell' style='width:" + size + "px;height:" + size + "px;top:" + y + "px;left:" + x + "px'>").appendTo(gridContainer);
                    updateGrid(row,column,element);

                }
            }


        }

        $(".gridSettings").keyup(function () {
            ResetGrid();
        });
    });

</script>